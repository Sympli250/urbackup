g.main_nav_pos=5;
g.loading=false;
g.lang="-";
g.startup=true;
g.no_tab_mouse_click=false;
g.tabberidx=-1;
g.progress_stop_id=-1;
g.current_version=2005003000;
g.status_show_all=false;
g.ldap_login=false;
g.datatable_default_config={};
g.cloudcache_mode=false;
g.maximized=true;
g.has_account=false;
g.no_live_log=true;

g.languages=[ 
				{ l: "English", s: "en" }
			];

g.languages.sort(function (a,b) { if(a.l>b.l) return 1; if(a.l<b.l) return -1; return 0; } );	

		
function init_datatables()
{		
	g.datatable_default_config = {
				"scrollX": true,
				"iDisplayLength" : 25,
				"sDom" : 'r<"pull-left"f><"clear"><"pull-left"l><"pull-right"B>tip',
				"buttons": [
					{
						extend: 'colvis', className: 'btn btn-default'
					},
					{ extend: 'copy', className: 'btn btn-default glyphicon glyphicon-duplicate'
					},
					{ extend: 'csv', className: 'btn btn-default glyphicon glyphicon-save-file'
					},
					{ extend: 'excel', className: 'btn btn-default glyphicon glyphicon-list-alt'
					},
					{ extend: 'pdf', className: 'btn btn-default glyphicon glyphicon-file'
					},
					{ extend: 'print', className: 'btn btn-default glyphicon glyphicon-print'
					}
				],
				"sPaginationType": "full_numbers",
				//"sScrollX": "100%",
				"bScrollCollapse": true,
				"bStateSave": true,
				"iCookieDuration": 365*60*60*24,
				"oLanguage": {
					"oPaginate": {
						"sFirst": trans("First"),
						"sLast": trans("Last"),
						"sNext": trans("Next"),
						"sPrevious": trans("Previous")
					},
					"sEmptyTable": trans("No data available in table"),
					"sInfo": trans("Showing _START_ to _END_ of _TOTAL_ entries"),
					"sInfoEmpty": trans("Showing 0 to 0 of 0 entries"),
					"sInfoFiltered": trans("(filtered from _MAX_ total entries)"),
					"sInfoThousands": trans("sInfoThousands"),
					"sLengthMenu": trans("Show _MENU_ entries"),
					"sProcessing": trans("Processing..."),
					"sSearch": trans("Search:"),
					"sZeroRecords": trans("No matching records found"),
					buttons: {
						colvis: trans("Show/hide columns")
					}
				},
				select: true
	};
}

function default_validator_config()
{
	var validation_highlight = function (element) {
				$(element).closest('.form-group').removeClass('has-success').addClass('has-error');
				$(element).siblings(".form-control-feedback").addClass("glyphicon-remove").removeClass("glyphicon-ok");
			};

	var validation_success = function (element) {
				$(element).closest('.form-group').removeClass('has-error').addClass('has-success');
				$(element).siblings(".form-control-feedback").addClass("glyphicon-ok").removeClass("glyphicon-remove");
			};
			
	return {
		highlight: validation_highlight,
		success: validation_success,
		errorElement: 'span',
		errorClass: 'help-block',
		errorPlacement: function(error, element) {
			if(element.length) {
				error.insertAfter(element);
			} else {
				error.insertAfter(element);
			}
		}
	}
}

jQuery.validator.addMethod("requireYes", function(value, element) {
    return this.optional(element) || value.toLowerCase()==="yes";
}, "Please enter \"Yes\"");

$.validator.addMethod('licensekey', function (value) { 
	if(value.length==0)
	{
		return true;
	}	
	value = value.toLowerCase().replace(/[^0-9a-f]/gi, "");	
    if(value.length!=23)
	{
		return false;
	}	
	var sum=0;
	for(var i=0;i<value.length-1;++i)
	{
		sum+=value.charCodeAt(i);
	}	
	if((sum%16).toString(16)!=value[value.length-1])
	{
		return false;
	}	
	return true;
}, 'Your license key is invalid. Please check for typos.');

function startup()
{
	$("#report_problem_lnk").click(function(){
		report_problem();
		return false;
	});
	$("#about_link").click(function(){
		aboutUrBackup();
		return false;
	})
	$("#maximize").click(function(){
		g.maximize_or_minimize(true);
		return false;
	});
	$("#urbackup_nav_self").click(function(evt) {
		window.location.href='.';
	});

	clearTimeout(g.refresh_timeout);
	g.refresh_timeout=-1;
	g.session="";
	I('main_nav').innerHTML="";
	I('nav_pos').innerHTML="";
	
	if(!startLoading()) return;
	
	new getJSONOther("startup", after_startup);
}

function after_startup(data)
{
	var available_langs="langs=";
	for(var i=0;i<g.languages.length;++i)
	{
		available_langs+=g.languages[i].s;
		if(i+1<g.languages.length)
			available_langs+=",";
	}
	
	if(data.ok)
	{
		new getJSON("login", available_langs, try_anonymous_login);
	}
	else
	{
		if(data.needs_setup)
		{
			location.href="wizard.htm";
		}
		else if(data.not_running)
		{
			stopLoading();
			
			var ndata=dustRender("maintenance_refresh");
			if(g.data_f!=ndata)
			{
				I('data_f').innerHTML=ndata;
				dustPost(I("data_f"));
				g.data_f=ndata;
			}
			
			setTimeout(function() { location.href="index.htm"; }, 60000);
		}
		else if(data.sys_corrupted)
		{
			stopLoading()

			var ndata=dustRender("sys_corrupted");
			if(g.data_f!=ndata)
			{
				I('data_f').innerHTML=ndata;
				dustPost(I("data_f"));
				g.data_f=ndata;
			}
		}
		else if(data.crashed)
		{
			stopLoading();

			var ndata=dustRender("crashed_reboot");
			if(g.data_f!=ndata)
			{
				I('data_f').innerHTML=ndata;
				dustPost(I("data_f"));
				g.data_f=ndata;
			}
		}
		else
		{
			alert("Error getting startup information");
		}
	}
}


function refresh_page()
{
	if(g.last_action=="status")
	{
		show_status1();
	}
	else if(g.last_action=="progress")
	{
		show_progress1();
	}
	else
	{
		g.last_function(clone(g.last_data));
		build_main_nav();
	}
}


function change_lang_select()
{
	var selidx=I('change_lang_select').selectedIndex;
	
	var cookie_lang = g.languages[selidx].s;
	
	var d = new Date();
	d.setTime(d.getTime() + 365*24*60*60*1000);		
	document.cookie="urbackup_lang="+cookie_lang+"; expires="+d.toUTCString()+"";
	if(window.localStorage)
	{
		window.localStorage.setItem('urbackup_lang', cookie_lang);
	}
	
	change_lang(cookie_lang, true);
}


function change_lang(l, refresh)
{
	g.lang=l;
	
	if(!I("languages"))
	{
		return;
	}
	
	var c="<select id=\"change_lang_select\" class=\"form-control input-sm\">";
	for(var i=0;i<g.languages.length;++i)
	{
		if(g.languages[i].s==l)
		{
			c+="<option selected=\"selected\">"+g.languages[i].l+"</option>";
		}
		else
		{
			c+="<option>"+g.languages[i].l+"</option>";
		}
	}
	c+="</select>";
	
	I('languages').innerHTML=c;
	$("#change_lang_select").change(change_lang_select);
	
	window.curr_trans=window.translations[l];

	if(refresh)
	{
		refresh_page();
	}
	
	init_datatables();
}


function try_anonymous_login(data)
{
	stopLoading();
	
	if(data.cloud_mode)
	{
		g.cloudcache_mode=true;
		g.cloud_mode = data.cloud_mode;
		if(data.cloud_mode=="ec2" ||
			data.cloud_mode=="ec2b")
		{
			I("top_doc_link").href="admin_guide_aws.pdf";
		}
	}
	
	if(data.has_account)
	{	
		g.has_account=true;
	}
	
	if(g.startup)
	{
		var lang="en";
		for(var i=0;i<g.languages.length;++i)
		{
			if(g.languages[i].s.toLowerCase()==data.lang.toLowerCase())
			{
				lang=g.languages[i].s;
				break;
			}
		}
		g.startup=false;
		
		cookie_lang = getCookie("urbackup_lang");
		
		if(!cookie_lang && window.localStorage)
		{
			cookie_lang = localStorage.getItem("urbackup_lang");
		}
		
		if(cookie_lang)
		{
			change_lang(cookie_lang, false);
		}
		else
		{		
			change_lang(lang, false);
		}
	}
	
	if(data.upgrading_database)
	{
		data.upgrade_error_text=trans("upgrade_error_text");
		var ndata=dustRender("upgrade_error", data);
		if(g.data_f!=ndata)
		{
			destroy_selectpickers();
			$("#data_f").empty();
			I('data_f').innerHTML=ndata;
			dustPost(I("data_f"));
			g.data_f=ndata;
		}
		dustPost(I("data_f"));
		return;
	}
	
	if(data.creating_filescache)
	{
		data.creating_filescache_text=trans("creating_filescache_text");
		var ndata=dustRender("file_cache_error", data);
		if(g.data_f!=ndata)
		{
			destroy_selectpickers();
			$("#data_f").empty();
			I('data_f').innerHTML=ndata;
			dustPost(I("data_f"));
			g.data_f=ndata;
		}
		dustPost(I("data_f"));
		return;
	}
	
	if(g.maximized)
	{
		if(document.cookie.indexOf("bootstrap_minimize=true")!=-1
			|| (window.localStorage && localStorage.getItem("bootstrap_minimize")==="true") )
		{
			g.maximize_or_minimize();
		}
		else
		{
			I('maximize').innerHTML=trans('Minimize'); 
		}
	}
	
	if(trans("about") && I("about_link"))
	{
		I("about_link").innerHTML = trans("about");
	}
	
	var has_session_timeout=false;
	var has_remote_error=false;
	var has_remote_errmsg = false;
	var remote_errmsg = "";
	var remote_appname = "";
	var params;
	var hash = location.href.split('#').splice(1).join('#');
	if(hash.length>0)
	{
		params = deparam(hash);
	}
	if(params && params.session_timeout)
	{
		has_session_timeout=true;
	}
	if(params && params.remote_error)
	{
		has_remote_error=true;
		has_remote_errmsg = typeof params.errmsg == "string" && params.errmsg.length>0;
		remote_appname = params.appname;
		remote_errmsg = has_remote_errmsg ? params.errmsg : "";
	}
	if(params && params.token_data && params.clientname)
	{
		window.location.hash="";
		g.remote_apps = [{id: data.appid, name: data.appname}];
		g.self_appid = data.appid;
		g.curr_browse_appid = g.self_appid;
		file_access(params);
	}
	else
	{		
		if(data.success)
		{
			g.session=data.session;
			startLoading();
			g.login_data = null;
			new getJSON("remote", "ra_f7f7aa43a9a04633a6d4fd34bc8a20b9=remote_appnames_f7f7aa43a9a04633a6d4fd34bc8a20b9", login_remote_appnames);
		}
		else
		{
			if(data.ldap_enabled)
			{
				g.ldap_enabled=true;
			}
			
			var ndata=dustRender("login", {session_timeout: has_session_timeout, remote_error: has_remote_error,
				has_remote_errmsg: has_remote_errmsg, remote_appname: remote_appname, remote_errmsg: remote_errmsg});
			if(g.data_f!=ndata)
			{
				destroy_selectpickers();
				$("#data_f").empty();
				I('data_f').innerHTML=ndata;
				dustPost(I("data_f"));
				g.data_f=ndata;
			}
			dustPost(I("data_f"));
			
			if(data.admin_only)
			{
				I('username_row').style.display="none";
				I('username').value = data.admin_only;
				I("password").focus();
				if(g.has_account)
				{
					I("forgot_admin_password").style.display="inline";
				}
				I("admin_login").style.display="none";
			}
			else
			{
				I('username').focus();
			}
		}
	}
}

function adminLogin()
{
	I("username_row").style.display="none";
	if(g.has_account)
	{
		I("forgot_admin_password").style.display="inline";
	}
	I("username").value="admin";
	I("admin_login").style.display="none";
	I("password").focus();
}

function forgotAdmingPassword()
{
	if(!startLoading()) return;
	
	if(confirm("We will send you an email with further instructions on how to reset your administrator password. Do you want to continue?"))
	{
		new getJSON("reset_admin_pw", "", forgotAdmingPasswordCb);
	}
	else
	{
		stopLoading();
	}
}

function forgotAdmingPasswordCb(data)
{
	stopLoading();
	
	if(data.ok)
	{
		I('data_f').innerHTML="Successfully sent you an email containing further instructions about the password reset.<br /><br />"+I('data_f').innerHTML;
		I("username").value="admin";
	}
	else
	{
		I('data_f').innerHTML="Error initiating password reset: "+data.err+"<br /><br />"+I('data_f').innerHTML;
		I("username").value="admin";
	}
}

function file_access(params)
{
	var p = "clientname="+encodeURIComponent(params.clientname);
	p+="&token_data="+encodeURIComponent(params["token_data"]);
	
	for(var i=0;;++i)
	{
		if(params["tokens"+i])
		{
			p+="&tokens"+i+"="+encodeURIComponent(params["tokens"+i]);
		}
		else
		{
			break;
		}
	}	
	
	if(params["path"])
	{
		p+="&path="+escapePath(encodeURIComponent(base64_decode_dash(params["path"])));
		p+="&is_file="+params["is_file"];
		p+="&sa=files";
	}

	if(!startLoading()) return;
	new getJSON("backups", p, show_backups2);
}

function startLoading(do_destroy_selectpickers)
{
	if(g.loading)
		return false;
	
	if(typeof do_destroy_selectpickers=="undefined"
		|| do_destroy_selectpickers)
	{
		destroy_selectpickers();
	}
	NProgress.start();
	g.loading=true;
	SetLoadingCursor();
	return true;
}

function stopLoading()
{
	NProgress.done();
	g.loading=false;
	ResetCursor();
}


function build_main_nav()
{
	var ndata="";
	nav_items=["show_settings1", "show_statistics1", "show_logs1", "show_replication1", "show_vms1", "show_backups1", "show_progress1", "show_status1"];
	nav_items_id=[1,2,3,7,8,4,5,6]
	for(var i=0;i<nav_items.length;++i)
	{
		var found=false;
		if(!g.allowed_nav_items || g.allowed_nav_items.length==0)
			found=true;
		else
		{
			for(var j=0;j<g.allowed_nav_items.length;++j)
			{
				if(g.allowed_nav_items[j]==nav_items_id[i])
				{
					found=true;
					break;
				}
			}			
		}
		if(found)
		{
			var p="";
			if(g.nav_params && g.nav_params[nav_items_id[i]])
				p=g.nav_params[nav_items_id[i]];
			if(nav_items_id[i]==g.main_nav_pos)
			{
				ndata=dustRender("main_nav_sel", {func: nav_items[i], name: trans("nav_item_"+nav_items_id[i]), params: p})+ndata;
			}
			else
			{
				ndata=dustRender("main_nav", {func: nav_items[i], name: trans("nav_item_"+nav_items_id[i]), params: p})+ndata;
			}
		}
	}
	I('main_nav').innerHTML=ndata;
	dustPost(I("main_nav"));

	$('.nav li a').on('click',function(){
		$('.navbar-collapse.in').collapse('hide');
		mainNav($(this).data('func'), $(this).data('params'))
	})
}

function mainNav(func, params)
{
	if(func=="show_settings1") show_settings1(params);
	else if(func=="show_statistics1") show_statistics1(params);
	else if(func=="show_logs1") show_logs1(params);
	else if(func=="show_replication1") show_replication1(params);
	else if(func=="show_vms1") show_vms1(params);
	else if(func=="show_backups1") show_backups1(params);
	else if(func=="show_progress1") show_progress1(params);
	else if(func=="show_status1") show_status1(params);
	else alert("Unknown nav func: "+func);
}

function multiplyTimeSpan(ts, m, allow_percent)
{
	ts = unescapeHTML(ts);
	var timespans = ts.split(";");
	
	var ret = "";
	for(var i=0;i<timespans.length;++i)
	{
		if(ret.length!=0)
		{
			ret+=";"
		}
		var idx = timespans[i].indexOf("@");
		if(idx!=-1)
		{
			var idx_pc = timespans[i].indexOf("%");
			if(idx_pc!=-1 && allow_percent )
			{
				var d=parseFloat(timespans[i].substr(0, idx_pc));
				ret+= (d*-1 - 1) + timespans[i].substr(idx, timespans[i].length - idx);
			}
			else
			{
				var d=parseFloat(timespans[i].substr(0, idx));
				
				if(d<-1 && m<1 && allow_percent)
				{
					ret+=(d*-1 -1)+"%";
				}
				else
				{
					ret+=d*m;
				}
				
				ret+=timespans[i].substr(idx, timespans[i].length - idx);
			}
		}
		else
		{
			var idx_pc = timespans[i].indexOf("%");
			if(idx_pc!=-1 && allow_percent )
			{
				var d=parseFloat(timespans[i].substr(0, idx_pc));
				ret+=d*-1 -1;
			}
			else
			{
				var d=parseFloat(timespans[i]);
				
				if(d<-1 && m<1 && allow_percent)
				{
					ret+=(d*-1 - 1)+"%";
				}
				else
				{
					ret+=d*m;
				}
			}
		}
	}
	
	return ret;
}

function makeTimeSpanNegative(ts)
{
	ts = unescapeHTML(ts);
	var timespans = ts.split(";");
	
	var ret = "";
	for(var i=0;i<timespans.length;++i)
	{
		if(ret.length!=0)
		{
			ret+=";"
		}
		var idx = timespans[i].indexOf("@");
		if(idx!=-1)
		{
			var d=parseFloat(timespans[i].substr(0, idx));
			if(d>0)
				d*=-1;
				
			ret+=d + timespans[i].substr(idx, timespans[i].length - idx);
		}
		else
		{
			d=parseFloat(timespans[i]);
			if(d>0)
				d*=-1;
				
			ret+=d;
		}
	}
	
	return ret;
}

function getParValue(p, val)
{
	if(p=="update_freq_incr"){ val=multiplyTimeSpan(val, 60.0*60.0); }
	if(p=="update_freq_full" || p=="update_freq_image_full" || p=="update_freq_image_incr")
		{ val=multiplyTimeSpan(val, 60.0*60.0*24.0); }
	if(p=="startup_backup_delay") val*=60;
	if(p=="local_speed") { if(val=="-" || val=="") val=0; else val=multiplyTimeSpan(val, (1024*1024)/8, true); }
	if(p=="internet_speed") { if(val=="-" || val=="") val=0; else val=multiplyTimeSpan(val, 1024/8, true); }
	if(p=="global_local_speed") { if(val=="-" || val=="") val=0; else val=multiplyTimeSpan(val, (1024*1024)/8, true); }
	if(p=="global_internet_speed") { if(val=="-" || val=="") val=0; else val=multiplyTimeSpan(val, 1024/8, true); }
	if(p=="update_stats_cachesize") val=Math.round(val*1024);
	if(p=="internet_file_dataplan_limit" || p=="internet_image_dataplan_limit") val=Math.round(val*1024*1024);
	if(p=="sync_throttle_timeoutms") val=Math.round(val*60*1000);

	return val;
}

function getPar(p)
{
	var obj=I(p);
	if(!obj) return "";
	if(obj.type=="checkbox" )
	{
		return "&"+p+"="+(obj.checked?"true":"false");
	}
	var val = getParValue(p, obj.value);
	return "&"+p+"="+encodeURIComponent(val+"");
}

function show_progress1(stop_backup)
{
	if(!stop_backup)
	{
		if(!startLoading()) return;
	}
	if(g.refresh_timeout!=-1)
	{
		clearTimeout(g.refresh_timeout);
	}
	g.refresh_timeout=0;
	show_progress11(true);
}


function show_progress11(manual_click)
{
	if(g.refresh_timeout==-1) return;
	clearTimeout(g.refresh_timeout);
	
	if(manual_click)
	{
		g.progress_cnt = 0;
	}
	else
	{
		g.progress_cnt += 1;
		
		if(g.progress_cnt>10)
		{
			g.progress_cnt = 0;
		}
	}	

	var pars="";
	var app_extra_params = {};
	if( g.progress_stop_id!=-1)
	{
		//alert(stop_clientid);
		var rev_clientid = revMapClientId(g.progress_stop_client_id);
		app_extra_params[rev_clientid.appid]="stop_clientid="+rev_clientid.id+"&stop_id="+g.progress_stop_id;
		g.progress_stop_id=-1;
	}
	
	if(g.progress_cnt!=0)
	{
		if(pars.length>0) pars+="&";
		pars+="with_lastacts=0";
	}
	
	g.progress_first=true;
	new getJSONMultiple("progress", pars, manual_click ? show_progress2 : show_progress21, show_progress_aggregate, app_extra_params, manual_click==true);
	
	if(manual_click)
	{
		g.main_nav_pos=5;
		build_main_nav();
		I('nav_pos').innerHTML="";
	}
}

function show_progress21(data)
{
	if((I("show_progress") && !g.loading) || g.progress_first)
	{
		data.from_timeout=true;
		
		if(!data.lastacts)
		{
			data.lastacts = jQuery.extend(true, [], g.cached_lastacts);
		}
		
		show_progress2(data);
	}
}

function show_progress2(data)
{
	if(g.refresh_timeout==-1)
	{
		return;
	}
	if(g.main_nav_pos!=5) return;
	if(!I('show_progress') && !g.progress_first)
	{
		return;
	}
	
	g.progress_first=false;
	
	if(!data.from_timeout)
	{
		stopLoading();
	}
	
	var rows="";
	var tdata="";
	if(data.progress.length>0)
	{
		for(var i=0;i<data.progress.length;++i)
		{
			var action = data.progress[i].action;
			
			if(action==3 || action==4 || action==9)
			{
				data.progress[i].image=true;
			}
			
			if(action==8)
			{
				data.progress[i].file_restore=true;
			}
			
			if(action==10)
			{
				data.progress[i].client_update=true;
			}
			
			if(action==11 || action==12 || action==54) //check database integrity, backup database
			{
				data.progress[i].show_details=true;
			}
			
			if(action==12) //backup database
			{
				data.progress[i].backups_interrupted=true;
			}
		
			data.progress[i].action=trans("action_"+data.progress[i].action);
			if(data.progress[i].pcdone>=0)
			{
				data.progress[i].percent=true;
			}
			else
			{
				data.progress[i].indexing=true;
			}			
			
			if(action==14 || action==15 || action==11) //cleanup, check database integrity
			{
				data.progress[i].indexing=false;
			}
			
			if(data.progress[i].eta_ms>1000)
			{
				data.progress[i].eta = format_time_seconds(data.progress[i].eta_ms/1000);
			}
			else
			{
				data.progress[i].eta = "-";
			}
			
			if(data.progress[i].speed_bpms>1)
			{
				data.progress[i].speed = format_speed_bits(data.progress[i].speed_bpms*8000);
			}
			else
			{
				data.progress[i].speed = "-";
			}
			
			if(data.progress[i].total_bytes>=0)
			{
				data.progress[i].f_done_bytes = format_size(data.progress[i].done_bytes);
				data.progress[i].f_total_bytes = format_size(data.progress[i].total_bytes);
			}

			if(data.progress[i].details)
			{
				data.progress[i].details = unescapeHTML(data.progress[i].details);
			}
			
			rows+=dustRender("progress_row", data.progress[i]);
		}
		tdata=dustRender("progress_table", {"rows": rows});
	}
	else
	{
		tdata=dustRender("progress_table_none");
	}
	
	if(data.lastacts && data.lastacts.length>0)
	{
		g.cached_lastacts = jQuery.extend(true, [], data.lastacts);
		
		rows="";
		for(var i=0;i<data.lastacts.length;++i)
		{
			var obj=data.lastacts[i];
			var action=0;
			var no_size=false;
			if(obj.restore!=0)
			{
				if(obj.image==0)
				{
					obj.file_restore=true;
					action=8;
				}
				else
				{
					action=9;
					obj.is_image=true;
				}
				no_size=true;
			}
			else if(obj.image==0)
			{
				if(obj.resumed==0)
				{
					if(obj.incremental>0)
						action=1;
					else
						action=2;
				}
				else
				{
					if(obj.incremental>0)
						action=5;
					else
						action=6;
				}
			}
			else
			{
				obj.is_image=true;
				
				if(obj.incremental>0)
					action=3;
				else
					action=4;				
			}
			var a="action_"+action;
			if(obj.del)
				a+="_d";
			obj.action=trans(a);
			if(no_size)
			{
				obj.size="-";
				obj.total_size="-";
			}
			else
			{
				if(obj.size_bytes==-1)
					obj.size=trans("unknown");
				else
					obj.size=format_size(obj.size_bytes);
				if(obj.del)
					obj.size="-"+obj.size;

				if(typeof obj.total_size == "undefined"
					|| obj.total_size<0)
					obj.total_size = trans("unknown");
				else
					obj.total_size=format_size(obj.total_size);

				if(obj.del)
					obj.total_size="-"+obj.total_size;
			}
			
			obj.duration/=60;
			obj.duration=Math.ceil(obj.duration);
			obj.duration+=" min";
			
			obj.backuptime = format_unix_timestamp(obj.backuptime);
						
			rows+=dustRender("lastacts_row", obj);
		}
		tdata+=dustRender("lastacts_table", {rows: rows});
	}
	
	tdata+="<span id='show_progress' class='urbackup_no_display'></span>";
	
	if(g.data_f!=tdata)
	{
		destroy_selectpickers();
		$("#data_f").empty();
		I('data_f').innerHTML=tdata;
		dustPost(I('data_f'));
		dustPost(I('data_f'), 'progress_table');
		dustPost(I('data_f'), 'progress_row');
		dustPost(I('data_f'), 'lastacts_row');		
		g.data_f=tdata;

		$("#data_f").find("div[data-progressbar='1']").each(function(idx, elem){
			if($(elem).data("haspercent")=="1")
			{
				$(elem).css({"min-width": "2em"});
			}
			$(elem).css({"width": $(elem).data("percent")+"%"});
		});
	}
	
	if(data.progress.length>0)
	{
		for(var i=0;i<data.progress.length;++i)
		{
			if(typeof data.progress[i].past_speed_bpms !== "undefined"
				&& data.progress[i].past_speed_bpms.length>0)
			{
				data.progress[i].past_speed_bpms.push(data.progress[i].speed_bpms);
				$("#speed_sparkline_"+data.progress[i].id).sparkline(data.progress[i].past_speed_bpms,
					{disableTooltips: true});
			}
		}
	}
	
	I('nav_pos').innerHTML="";
	
	clearTimeout(g.refresh_timeout);
	g.refresh_timeout=setTimeout(show_progress11, 1000);
}


function show_statistics1()
{	
	if(!startLoading()) return;
	clearTimeout(g.refresh_timeout);
	g.refresh_timeout=-1;

	new getJSONMultiple("users", "", show_statistics2, show_statistics_aggregate_users);
	new getJSONMultiple("usage", "", show_statistics3, show_statistics_aggregate_usage);
	
	g.main_nav_pos=2;
	g.settings_nav_pos=0;
	build_main_nav();
}

function show_statistics2(data)
{
	stopLoading();
	if(g.main_nav_pos!=2) return;
	
	var ndata="<div class=\"row\">";

	ndata+="<div class=\"col-sm-1\" class=\"urbackup_statistics_margin\">";
	if(g.remote_apps.length<=1)
	{		
		ndata+="<a class=\"btn btn-default\" id=\"show_statistics1_button\" href=\"#\">"+trans("overview")+"</a>";
	}
	else
	{
		ndata+="<select class=\"selectpicker\" data-live-search=\"true\" data-container=\"body\" id=\"statappliance\">"
		for(var i=0;i<g.remote_apps.length;++i)
		{
			var sel ="";
			if(g.remote_apps[i].id==g.self_appid)
				sel="selected"
			ndata+="<option value=\""+g.remote_apps[i].id+"\" "+sel+">"+escapeHTML(g.remote_apps[i].name)+"</option>";
		}
		ndata+="</select>&nbsp;&nbsp;"
	}
	ndata+="</div>";
	if(data.users.length>0)
	{
		ndata+="<div class=\"col-sm-2\">";
		ndata+="<select class=\"selectpicker\" data-live-search=\"true\" data-container=\"body\" id=\"statclient\">";
		if(g.settings_nav_pos<1)
		{
			ndata+="<option value=\"n\">"+trans("clients")+"</option>";
		}
		for(var i=0;i<data.users.length;++i)
		{		
			s="";
			if(g.settings_nav_pos==i+1)
			{
				s=" selected=\"selected\"";
			}
			ndata+="<option value=\""+i+"\""+s+">"+data.users[i].name+"</option>";					
		}
		ndata+="</select>";
		g.stat_data=data;
	}
	ndata+="</div>";
	ndata+="<br/>&nbsp<br/>";
	I('nav_pos').innerHTML=ndata;

	$("#show_statistics1_button").click(function() {show_statistics1(); return false;})
	$("#statappliance").change(stat_appliance);
	$("#statclient").change(stat_client);
	
	setup_selectpicker('#statclient');
	setup_selectpicker("#statappliance");
}

function stat_appliance()
{
	var appid = I("statappliance").value;
	createUsageGraph(0, "", appid);
}

function render_useagegraph_single(selectedIdx, idx, key, params, appid)
{
	var ret="";
	if(selectedIdx==idx)
	{
		ret+="<strong>"+trans(key)+"</strong>";
	}
	else
	{
		ret+="<a data-idx=\""+idx+"\" data-sel-usagegraph=\"1\" data-params=\""+escapeHTML(params)+"\" data-appid=\""+escapeHTML(appid)+"\" href=\"#\">"+trans(key)+"</a>";
	}
	return ret;
}
function render_sel_usagegraph(selectedIdx, params, appid)
{
	var ret="<span class='urbackup_statistics_usagegraph'>";
	ret+=render_useagegraph_single(selectedIdx, 0, "day", params, appid);
	ret+=" | ";
	ret+=render_useagegraph_single(selectedIdx, 1, "month", params, appid);
	ret+=" | ";
	ret+=render_useagegraph_single(selectedIdx, 2, "year", params, appid);
	ret+="</span>";
	return ret;
}
function render_sel_usagegraph_post(elem)
{
	$(elem).find("a[data-sel-usagegraph='1']").click(function(){
		createUsageGraph(parseInt($(this).data("idx")), $(this).data("params"), $(this).data("appid"));
		return false;
	});
}
function createUsageGraph(selectedIdx, params, appid)
{
	var addUsagegraph = render_sel_usagegraph(selectedIdx, params, appid);
	
	I('usagegraph').innerHTML = "<img src=\"images/indicator.gif\" />"+trans("loading")+"...";
	
	var scale;
	var dateFormat;
	var transKey;
	if(selectedIdx==1)
	{
		scale="m";
		dateFormat="%b";
		transKey="month";
	}
	else if(selectedIdx==2)
	{	
		scale="y";
		dateFormat="%y";
		transKey="year";
	}
	else
	{
		scale="d";
		dateFormat="%#d";
		transKey="day";
	}
	
	if(params.length>0)
	{
		params= "&" + params;
	}
	
	if(typeof appid=="undefined" || appid==g.self_appid)
	{
		new loadGraph("usagegraph", "scale="+scale+params, "usagegraph", {pie: false, width: 640, height: 480, 
				title: trans("storage_usage_bar_graph_title"),
				colname1: trans(transKey),
				colname2: trans("storage_usage_bar_graph_colname2"),
				dateFormat: dateFormat },
			addUsagegraph, render_sel_usagegraph_post);
	}
	else
	{
		new loadGraph("remote", "ra_f7f7aa43a9a04633a6d4fd34bc8a20b9=usagegraph&remote_id_f7f7aa43a9a04633a6d4fd34bc8a20b9="+appid+"&scale="+scale+params, "usagegraph", {pie: false, width: 640, height: 480, 
			title: trans("storage_usage_bar_graph_title"),
			colname1: trans(transKey),
			colname2: trans("storage_usage_bar_graph_colname2"),
			dateFormat: dateFormat },
		addUsagegraph, render_sel_usagegraph_post);
	}
}
function set_button_filename(buttons, text)
{
	for(var i=0;i<buttons.length;++i)
	{
		var cd = getISODatestamp();
		if(i==2)
		{
			cd+=".pdf";
		}
		else
		{
			cd+=".csv";
		}
		buttons[i].sFileName = text+" "+cd;
	}
	return buttons;
}
function changeStorageAllocationAppliance()
{
	if(!I("storage_allocation_appliance")) return;
	var appid = I("storage_allocation_appliance").value;

	I("piegraph").innerHTML = "<img src=\"images/indicator.gif\" />Loading...";

	if(appid==g.self_appid)
	{
		new loadGraph("piegraph", "", "piegraph", {pie: true, width: 640, height: 900, 
			title: trans("storage_usage_pie_graph_title"), colname1: trans("storage_usage_pie_graph_colname1"), colname2: trans("storage_usage_pie_graph_colname2") }, "" );
	}
	else
	{
		new loadGraph("remote", "ra_f7f7aa43a9a04633a6d4fd34bc8a20b9=piegraph&remote_id_f7f7aa43a9a04633a6d4fd34bc8a20b9="+appid, "piegraph", {pie: true, width: 640, height: 900, 
			title: trans("storage_usage_pie_graph_title"), colname1: trans("storage_usage_pie_graph_colname1"), colname2: trans("storage_usage_pie_graph_colname2") }, "" );
	}
}
function show_statistics3(data)
{
	stopLoading();
	if(g.main_nav_pos!=2) return;
	var ndata="";
	var rows="";
	var used_total=0;
	var files_total=0;
	var images_total=0;
	for(var i=0;i<data.usage.length;++i)
	{
		var obj=data.usage[i];
		used_total+=obj.used;
		files_total+=obj.files;
		images_total+=obj.images;
		/*obj.used=format_size(obj.used);
		obj.files=format_size(obj.files);
		obj.images=format_size(obj.images);*/
		rows+=dustRender("stat_general_row", obj);
	}

	var apps = clone(g.remote_apps);

	for(var i=0;i<apps.length;++i)
	{
		if(apps[i].id==g.self_appid)
			apps[i].sel=true;
	}

	ndata=dustRender("stat_general", {rows: rows, used_total: format_size(used_total), files_total: format_size(files_total),
				images_total: format_size(images_total), ses: g.session, maximized: g.maximized, has_apps: (g.remote_apps.length>1),
				apps: apps});
	if(g.data_f!=ndata)
	{	
		$("#data_f").empty();
		I('data_f').innerHTML=ndata;
		dustPost(I('data_f'));
		dustPost(I('data_f'), 'stat_general_row');
		new loadGraph("piegraph", "", "piegraph", {pie: true, width: 640, height: 900, 
			title: trans("storage_usage_pie_graph_title"), colname1: trans("storage_usage_pie_graph_colname1"), colname2: trans("storage_usage_pie_graph_colname2") }, "" );
		
		setup_selectpicker("#storage_allocation_appliance");
		createUsageGraph(0, "", g.self_appid);
		
		var datatable_config = jQuery.extend(true, {}, g.datatable_default_config);
		var sort_fun = function(idx)
		{
			var _idx = idx;			
			this.sort = function( source, type, val ) {
					if (type === 'set') {
						source["bsize"+idx] = val;
						source["bsize_display"+idx] = format_size(val)
						return;
					}
					else if (type === 'display') {
					  return source["bsize_display"+idx];
					}
					else if (type === 'filter') {
					  return source["bsize_display"+idx];
					}
					return source["bsize"+idx];
				};
		}
		
		datatable_config.aoColumnDefs =
			[ {
				"aTargets": [ 1 ],
				"mData": (new sort_fun(1)).sort
			},
			{
				"aTargets": [ 2 ],
				"mData": (new sort_fun(2)).sort
			},
			{
				"aTargets": [ 3 ],
				"mData": (new sort_fun(3)).sort
			}];
		
		datatable_config.aaSorting = [[ 3, "desc" ]];
		$("#statistics_table").dataTable(datatable_config);
		
		g.data_f=ndata;
	}
}

function stat_client(id, name)
{
	if(g.main_nav_pos!=2) return;
	
	var selidx=I('statclient').selectedIndex;
	if(selidx!=-1 && I('statclient').value!="n")
	{	
		var idx=I('statclient').value*1;
		var name=g.stat_data.users[idx].name;
		var id=g.stat_data.users[idx].id;
		g.settings_nav_pos=idx+1;
		g.data_f=dustRender("stat_user", {clientid: id, clientname: name, ses: g.session});
		destroy_selectpickers();
		$("#data_f").empty();
		I('data_f').innerHTML=g.data_f;
		dustPost(I('data_f'));
		var clientid = revMapClientId(id);
		createUsageGraph(0, "clientid="+clientid.id, clientid.appid);
		show_statistics2(g.stat_data);
	}
}

g.status_action_add_hostname=0;
g.status_action_remove_hostname=1;
g.status_action_add_internetclient=2;
g.status_action_stop_show=3;
g.status_action_reset_error=4;
g.status_action_stop_show_new_version=5;
g.status_action_reset_client_uid=6;
function show_status1(hostname, action, remove_client, stop_client_remove, appid)
{
	if(!startLoading()) return;
	clearTimeout(g.refresh_timeout);
	g.refresh_timeout=-1;
	var pars="";
	
	var appid_extra_params = {};
	if(hostname && hostname.length>0)
	{
		if(pars!="")
		{
			pars+="&";
		}
		if( typeof action=="undefined" || action==null
			|| action==g.status_action_add_hostname || action==g.status_action_remove_hostname)
		{
			if(g.remote_apps.length<=1)
			{
				pars+="hostname="+hostname;

				if(action==g.status_action_remove_hostname)
				{
					pars+="&remove=true";
				}
			}
			else
			{
				if(action==g.status_action_remove_hostname)
				{
					var hostname_id = revMapRemoteId(hostname, g.remote_hostname_map);
					appid_extra_params[hostname_id.appid] ="hostname="+hostname_id.id+"&remove=true";
				}
				else
				{
					appid_extra_params[appid]="hostname="+hostname;
				}
			}
		}
		else if(action==g.status_action_add_internetclient)
		{
			if(g.remote_apps.length>1)
			{
				appid_extra_params[appid] ="clientname="+hostname;
				if(pars=="&")
					pars="";
			}
			else
			{
				pars+="clientname="+hostname;			
			}
		}
		else if(action==g.status_action_stop_show)
		{
			pars+="stop_show="+hostname;
		}
		else if(action==g.status_action_reset_error)
		{
			pars+="reset_error="+hostname;
		}
		else if(action==g.status_action_stop_show_new_version)
		{
			pars+="stop_show_version="+hostname;
		}
		else if(action==g.status_action_reset_client_uid)
		{
			var rev_clientid = revMapClientId(hostname);
			if(g.remote_apps.length>1)
			{
				appid_extra_params[rev_clientid.appid] ="reset_client_uid="+rev_clientid.id;
				if(pars=="&")
					pars="";
			}
			else
			{
				pars+="reset_client_uid="+rev_clientid.id;			
			}
		}
	}
	else if(remove_client && remove_client.length>0)
	{
		var remove_client_appid = {};
		for(var i=0;i<remove_client.length;++i)
		{
			var rev_clientid = revMapClientId(remove_client[i]);
			if(typeof remove_client_appid[rev_clientid.appid]=="undefined")
				remove_client_appid[rev_clientid.appid] = [];
			remove_client_appid[rev_clientid.appid].push(rev_clientid.id);
		}
		
		$.each(remove_client_appid, function(key, value) {
			appid_extra_params[key] = "remove_client="+value.join();
		});

		if(stop_client_remove)
		{
			if(pars!="") pars+="&";
			pars+="stop_remove_client=true";
		}
	}
	
	new getJSONMultiple("status", pars, show_status2, show_status_aggregate, appid_extra_params);
	
	g.main_nav_pos=6;
	build_main_nav();
	I('nav_pos').innerHTML="";
}


function build_client_download_select(client_downloads)
{
	var ret="";
	for(var i=0;i<client_downloads.length;++i)
	{
		ret+="<option value=\""+client_downloads[i].id+"\">"+client_downloads[i].name+"</option>";
	}
	return ret;
}

function show_status_check1()
{
	//new getJSON("status_check", "", show_status_check2);
}

function show_status_check2(data)
{
	if(!I("delayed_status_errors")) return;

	var check_res="";
	if(data.dir_error
		&& (typeof data.dir_error_show === "undefined" || data.dir_error_show===true)  )
	{
		var ext_text="";
		var generic_text=true;
		if(data.dir_error_ext) ext_text=" ("+data.dir_error_ext+")";
		if(data.system_err) ext_text+=". "+data.system_err;
		
		if(data.dir_error_hint)
		{
			if(data.dir_error_hint=="volume_not_accessible")
			{
				ext_text+="<br>The entire drive is not accessible. If this is a network drive be aware that network drives are per user and UrBackup server runs as \"Local System\" user per default so it wont see your network drive. In this case you should use the UNC notation instead (\\\\servername\\share).";
			}
			else if(data.dir_error_hint=="folder_unc_access_denied")
			{
				ext_text+="<br>UrBackup is denied access to the network share, probably because it does not have the correct credentials to access the server. To setup UrBackup server to backup to a network share please see the FAQ: <a href=\"https://www.urbackup.org/faq.html#use_shares\">https://www.urbackup.org/faq.html#use_shares</a>";
			}
			else if(data.dir_error_hint=="dos_names_created")
			{
				ext_text+="<br>MS-DOS 8.3 compatibility names are created on the backup storage. This can lead to problems. You can disable 8.3 name generation by runnning <br>"
					+ "<code><pre>fsutil 8dot3name set "+data.dir_error_volume+" 1</pre></code><br>as administrator. UrBackup will stop showing this error after you run this command.";
			}
			else
			{
				ext_text+="<br>"+data.dir_error_hint;
			}
		}
		
		if( data.dir_error_ext
			&& (data.dir_error_ext=="err_cannot_create_symbolic_links"
				|| data.dir_error_ext=="dos_names_created") )
		{
			generic_text=false;
		}
		
		if(data.detail_err_str)
		{
			ext_text+="<br><br>Detailed error info:<br><pre>"+data.detail_err_str+"</pre>";
		}
		
		check_res+=dustRender("dir_error", {ext_text: ext_text, dir_error_text: trans("dir_error_text"), generic_text: generic_text,
											stop_show_key: data.dir_error_stop_show_key });
	}
	
	var tmpdir_error="";
	if(data.tmpdir_error
		&& (typeof data.tmpdir_error_show === "undefined" || data.tmpdir_error_show===true )  )
	{
		check_res+=dustRender("tmpdir_error", {tmpdir_error_text: trans("tmpdir_error_text"), stop_show_key: data.tmpdir_error_stop_show_key});
	}
	
	var virus_error="";
	if(data.virus_error
		&& (typeof data.virus_error_show === "undefined" || data.virus_error_show===true )  )
	{
		check_res+=dustRender("virus_error", {stop_show_key: data.virus_error_stop_show_key, virus_error_path: data.virus_error_path});
	}	
	I("delayed_status_errors").innerHTML = check_res;

	dustPost(I("delayed_status_errors"), "dir_error");
	dustPost(I("delayed_status_errors"), "tmpdir_error");
	dustPost(I("delayed_status_errors"), "virus_error");
}

function show_status2(data)
{
	stopLoading();
	if(g.main_nav_pos!=6) return;
	
	var has_migrate=false;
	if(data.replication_dests
		&& data.replication_dests.length>0 )
	{
		g.replication_dests = data.replication_dests;	
		has_migrate=true;
	}
	if(data.replication_ports
		&& data.replication_ports.length>0 )
	{
		g.replication_ports = data.replication_ports;	
		has_migrate=true;
	}

	if(typeof data.app_replication_dests != "undefined"
		&& Object.keys(data.app_replication_dests).length>0)
	{
		g.app_replication_dests = data.app_replication_dests;
		has_migrate=true;
	}

	if(typeof data.app_replication_ports != "undefined"
			&& Object.keys(data.app_replication_ports).length>0)
	{
		g.app_replication_ports = data.app_replication_ports;
		has_migrate=true;
	}

	var ndata="";
	var rows="";
	var removed_clients=[];
	var move_clients=[];
	for(var i=0;i<data.status.length;++i)
	{
		var obj=data.status[i];
		if(obj.no_backup_paths)
		{
			obj.file_style="warning";
			obj.file_ok_t=trans("no_backup_paths");
		}
		else if(obj.file_ok
			&& obj.last_filebackup_issues==0)
		{
			obj.file_style="success";
			obj.file_ok_t=trans("ok");
		}
		else if(obj.file_ok)
		{
			obj.file_style="warning";
			obj.file_ok_t=trans("completed_with_issues");
		}
		else if(obj.file_disabled)
		{
			obj.file_style="success";
			obj.file_ok_t=trans("disabled");
		}
		else
		{
			obj.file_style="danger";
			obj.file_ok_t=trans("no_recent_backup");
		}
		
		if(obj.image_not_supported)
		{
			obj.image_style="";
			obj.image_ok_t=trans("not_supported");
		}
		else
		{
			if(obj.image_ok)
			{
				obj.image_style="success";
				obj.image_ok_t=trans("ok");
			}
			else if(obj.image_disabled)
			{
				obj.image_style="success";
				obj.image_ok_t=trans("disabled");
			}
			else
			{
				obj.image_style="danger";
				obj.image_ok_t=trans("no_recent_backup");
			}
		}
			
		if(obj.online) obj.online=trans("yes");
		else obj.online=trans("no");
				
		obj.Action_remove_start="";
		obj.Action_remove_end="";
		
		if(data.remove_client)
		{
			obj.Actions_start="";
			obj.Actions_end="";
			
			if(obj.id=="-")
			{
				obj.Action_remove_start="<!--";
				obj.Action_remove_end="-->";
			}
		}
		else
		{
			obj.Actions_start="<!--";
			obj.Actions_end="-->";
		}
		
		obj.start_file_backup="";
		obj.start_image_backup="";
		
		if(obj.processes)
		{
			for(var j=0;j<obj.processes.length;++j)
			{
				var proc = obj.processes[j];
				if(proc.action>0 && proc.action<7)
				{
					if(proc.pcdone<0)
					{
						proc.indexing=true;
						proc.pcdone=0;
					}
					else
					{
						proc.percent=true;
					}
					
					if(proc.action==1 || proc.action==2 ||
						proc.action==5 || proc.action==6)
					{
						obj.start_file_backup+=dustRender("status_percent_done", proc);
					}
					else
					{
						obj.start_image_backup+=dustRender("status_percent_done", proc);
					}
				}
			}
		}
		
		obj.start_file_backup+="<span id=\"start_file_backup_"+obj.id+"\" class=\"urbackup_no_display\" />";
		obj.start_image_backup+="<span id=\"start_image_backup_"+obj.id+"\" class=\"urbackup_no_display\" />";
		
		if(obj.os_version_string)
		{
			obj.os_version_string = unescapeHTML(obj.os_version_string);
		}
		
		switch(obj.status)
		{
			case 0: obj.status="ok"; break;
			case 1: obj.status="incr_file"; break;
			case 2: obj.status="full_file"; break;
			case 3: obj.status="incr_image"; break;
			case 4: obj.status="full_image"; break;
			case 5: obj.status="resume_incr_file"; break;
			case 6: obj.status="resume_full_file"; break;
			case 8: obj.status="restore_file"; break;
			case 9: obj.status="restore_image"; break;
			case 10: obj.status=trans("starting"); break;
			case 11: obj.status=trans("ident_err")+" <a href=\"help.htm#ident_err\" target=\"_blank\">?</a>"; break;
			case 12: obj.status=trans("too_many_clients_err"); break;
			case 13: obj.status=trans("authentication_err"); break;
			case 14:
				obj.status=trans("uid_changed_err"); obj.online_add_status=true;
				if(obj.uid && obj.uid.length>0)
					obj.reset_client_uid=true;
				break;
			case 15: obj.status=trans("authenticating"); break;
			case 16: obj.status=trans("exchanging_settings"); break;
			case 17: obj.status=trans("client_starting_up"); break;
			default: obj.status="&nbsp;";
		}
		
		if(data.allow_modify_clients)
		{
			obj.show_select_box=true;
			
			if(!data.no_images)
			{
				obj.allow_image_backup_start=true;
			}
			if(!data.no_file_backups)
			{
				obj.allow_file_backup_start=true;
			}
		}
		
		if(has_migrate)
		{
			obj.has_migrate=true;
		}
		
		if(typeof obj.groupname==="undefined" 
			|| obj.groupname.length==0)
		{
			obj.groupname = trans("default_group");
		}
		
		if( obj.delete_pending && obj.delete_pending>0)
		{
			obj.remove_client=data.remove_client;
			removed_clients.push(obj);
		}
		else
		{
			if(!obj.rejected || g.status_show_all)
			{
				rows+=dustRender("status_detail_row", obj);
			}
		}
		
		if( obj.move_pending)
		{
			var m = obj.move_state;
			var action = "Unknown";
			if(m.indexOf("move_replicate")!=-1) action="Move then replicate";
			else if(m.indexOf("replicate_move")!=-1) action="Replicate then move";
			else if(m.indexOf("move")!=-1) action="Move";
			move_clients.push( {
				"name": obj.name,
				"id": obj.id,
				"action": action,
				"del": (obj.move_del>0?true:false),
				"dest": (obj.move_dest>0?"dest":"port")+"/"+obj.move_dest_name
			});
		}
	}
	
	if(data.has_status_check)
	{
		show_status_check1();
	}
	
	var endian_info="";
	if(data.big_endian)
	{
		endian_info=dustRender("big_endian_info", {});
	}
	
	var nospc_stalled="";
	if(data.nospc_stalled)
	{
		nospc_stalled=dustRender("nospc_stalled", {nospc_stalled_text: trans("nospc_stalled_text")});
	}
	
	var database_error="";
	if(data.database_error)
	{
		database_error=dustRender("database_error", {database_error_text: trans("database_error_text")});
	}
	
	var nospc_fatal="";
	if(data.nospc_fatal)
	{
		nospc_fatal=dustRender("nospc_fatal", {nospc_fatal_text: trans("nospc_fatal_text")});
	}
	
	var dlt_mod_start="<!--";
	var dlt_mod_end="-->";
	if(data.allow_modify_clients)
	{
		dlt_mod_start="";
		dlt_mod_end="";
	}
	
	var extra_clients_rows="";
	
	if(data.extra_clients.length>0)
	{
		for(var i=0;i<data.extra_clients.length;++i)
		{
			var obj=data.extra_clients[i];
			
			if(obj.online) obj.online=trans("yes");
			else obj.online=trans("no");
			
			extra_clients_rows+=dustRender("status_detail_extra_row", obj);
		}
	}
	
	var status_can_show_all=false;
	var status_extra_clients=false;
	
	if(data.allow_extra_clients)
	{
		if(!g.status_show_all)
		{
			status_can_show_all=true;
		}
		if( data.extra_clients.length>0)
		{
			status_extra_clients=true;
		}
	}
	
	var allow_add_client=false;
	if(data.allow_add_client)
	{
		allow_add_client=true;
	}

	var modify_clients="";
	if(data.allow_modify_clients)
	{
		var rem_start="<!--";
		var rem_stop="-->";
		if(data.remove_client)
		{
			rem_start="";
			rem_stop="";
		}
		var no_images_start="";
		var no_images_stop="";
		if(data.no_images)
		{
			no_images_start="<!--";
			no_images_stop="-->";
		}
		var no_file_backups_start="";
		var no_file_backups_stop="";
		if(data.no_file_backups)
		{
			no_file_backups_start="<!--";
			no_file_backups_stop="-->";
		}
		var status_modify_params={rem_start: rem_start, rem_stop: rem_stop, backup_type_num: 0, no_images_start: no_images_start,
							      no_images_stop: no_images_stop, no_file_backups_start: no_file_backups_start, no_file_backups_stop: no_file_backups_stop,
								  has_migrate: has_migrate};
								  
		modify_clients=dustRender("status_modify_clients", status_modify_params);
	}
	
	var show_select_box=false;
	if(data.allow_modify_clients)
	{
		show_select_box=true;
	}
	
	var status_client_download_windows="";
	var status_client_download_linux="";
	var status_client_download_mac="";
	var has_client_download=false;
	if(data.client_downloads)
	{
		var client_download_data=build_client_download_select(data.client_downloads);
		status_client_download_windows=dustRender("status_client_download", {download_clients: client_download_data, os: "windows", os_windows: true});
		status_client_download_linux=dustRender("status_client_download", {download_clients: client_download_data, os: "linux", os_linux: true});
		status_client_download_mac=dustRender("status_client_download", {download_clients: client_download_data, os: "mac", os_mac: true});
		has_client_download=true;
	}
	
	g.server_identity = data.server_identity;
	g.server_identities = data.server_identities;
	g.server_pubkey = data.server_pubkey;

	ndata=dustRender("status_detail", {rows: rows, ses: g.session,
		nospc_stalled: nospc_stalled, nospc_fatal: nospc_fatal, endian_info: endian_info,
		extra_clients_rows: extra_clients_rows, status_can_show_all: status_can_show_all, status_extra_clients: status_extra_clients,
		show_select_box: show_select_box,
		server_identity: data.server_identity, modify_clients: modify_clients,
		dlt_mod_start: dlt_mod_start, dlt_mod_end: dlt_mod_end, internet_client_added: data.added_new_client, new_authkey: data.new_authkey, new_clientname: data.new_clientname,
		status_client_download_windows: status_client_download_windows, status_client_download_linux: status_client_download_linux, status_client_download_mac: status_client_download_mac,
		database_error: database_error, removed_clients_table: removed_clients.length>0, removed_clients: removed_clients,
		has_client_download: has_client_download, allow_add_client:allow_add_client, move_clients_table: move_clients.length>0, move_clients: move_clients, has_migrate: has_migrate,
		single_appliance: g.remote_apps.length<=1});
	
	if(g.data_f!=ndata)
	{
		destroy_selectpickers();
		$("#data_f").empty();
		I('data_f').innerHTML=ndata;
		g.data_f=ndata;

		$("#data_f").find("div[data-progressbar='1']").each(function(idx, elem){
			var css_data = {}
			var css_name = "pg_gen_class_";
			var css_rule = "";
			if($(elem).data("haspercent")=="1")
			{
				css_data["min-width"] = "2em";
				css_rule+="min-width: 2em; ";
				css_name+"mw_";
			}
			css_data["width"]= $(elem).data("percent")+"%";
			css_rule+="width: "+$(elem).data("percent")+"% !important;";
			css_name+="w"+$(elem).data("percent");
			
			if(!g.pg_gen_classes)
				g.pg_gen_classes = {};

			if(typeof g.pg_gen_classes[css_name]!="undefined")
			{
				$(elem).addClass(css_name);
			}
			else
			{
				try
				{
					var sheet = document.styleSheets[0];
					sheet.insertRule("."+css_name+" { "+css_rule+" }", 0);
					g.pg_gen_classes[css_name] = 1;
					$(elem).addClass(css_name);
				}
				catch(e)
				{
					$(elem).css(css_data);
				}
			}			
		});

		dustPost(I('data_f'), "status_detail");
		dustPost(I('data_f'), "status_client_download");
		dustPost(I('data_f'), "status_modify_clients");
		dustPost(I('data_f'), "status_detail_extra_row");
		dustPost(I('data_f'), "nospc_fatal");
		dustPost(I('data_f'), "database_error");
		dustPost(I('data_f'), "nospc_stalled");
		dustPost(I('data_f'), "big_endian_info");
		dustPost(I('data_f'), "status_detail_row");
		dustPost(I('data_f'), "status_percent_done");

		if(data.no_images)
		{
			show_hide_column('status_table', 8, false);
			show_hide_column('status_table', 10, false);
		}
		
		if(data.no_file_backups)
		{
			show_hide_column('status_table', 7, false);
			show_hide_column('status_table', 9, false);
		}
		
		var datatable_config = jQuery.extend(true, {}, g.datatable_default_config);
		
		for(var i=0;i<datatable_config.buttons.length;++i)
		{
			if(datatable_config.buttons[i].extend=="pdf")
			{
				var cols = [2, 4, 7 ];
				
				if(!data.no_images)
				{
					cols.push(8);
					cols.push(10);
				}
				
				if(!data.no_file_backups)
				{
					cols.push(7);
					cols.push(9);
				}
				
				datatable_config.buttons[i].exportOptions = { columns: cols };				
			}
			else if(datatable_config.buttons[i].extend!="colvis")
			{
				datatable_config.buttons[i].exportOptions = { columns: ':not(:first-child)' };
			}
		}
		
		datatable_config.aoColumnDefs = [
				{ "bVisible": false, "aTargets": [ 2, 5, 11, 12, 13 ]
				}];
				
		if(data.allow_modify_clients)
		{
			datatable_config.aoColumnDefs.push({ "bSortable": false, 'aTargets': [ 0 ] });
		}
		
		var colvis = datatable_config.buttons[0];
			
		colvis.columns = [ 2, 3, 4, 5, 6 ];
		
		if(data.allow_modify_clients)
		{
			datatable_config.aoColumnDefs.push({ "bVisible": true, "aTargets": [0]});
		}
		
		if(!data.no_images)
		{
			colvis.columns.push(8);
			colvis.columns.push(10);
		}
		
		if(!data.no_file_backups)
		{
			colvis.columns.push(7);
			colvis.columns.push(9);
		}
		
		colvis.columns.push(11);
		colvis.columns.push(12);
		colvis.columns.push(13);
		
		
		var columns = [ 1 ];
		
		if(!data.no_file_backups)
			columns.push(7);		
		if(!data.no_images)
			columns.push(8);
		if(!data.no_file_backups)
			columns.push(9);		
		if(!data.no_images)
			columns.push(10);

		var date_sort_fun = function(idx)
		{
			var _idx = idx;			
			this.sort = function( source, type, val ) {
					if (type === 'set') {
						var hs = val.indexOf("<");
						var n1=val;
						var n2="";
						if(hs!=-1)
						{
							n1 = val.substr(0,hs);
							n2 = val.substr(hs);
						}
						source[idx] = n1;
						if(n1==="" || n1==="0" )
						{
							source["d"+idx] = trans("backup_never");
						}
						else
						{
							source["d"+idx] = format_unix_timestamp(n1);
						}
						source["d"+idx]+=n2;
						return;
					}
					else if (type === 'display') {
					  return source["d"+idx];
					}
					else if (type === 'filter') {
					  return source["d"+idx];
					}
					return source[idx];
				};
		}
		
		datatable_config.aoColumnDefs.push({
				"aTargets": [ 6 ],
				"mData": (new date_sort_fun(5)).sort
			} );
			
		if(!data.no_file_backups)
		{
			datatable_config.aoColumnDefs.push({
				"aTargets": [ 7 ],
				"mData": (new date_sort_fun(6)).sort
			} );
		}
		
		if(!data.no_images)
		{
			datatable_config.aoColumnDefs.push({
				"aTargets": [ 8 ],
				"mData": (new date_sort_fun(7)).sort
			} );
		}
		
		
		datatable_config.drawCallback = function(settings) {
			$('select[id^="startbackup_"]').filter(
				function() {
					setup_selectpicker("#"+$(this).attr("id"));
					//$(this).selectpicker();
					$(this).prop('selectedIndex', -1);
				});
		};
		datatable_config.preDrawCallback = function(settings) {
			$('select[id^="startbackup_"]').filter(
				function() {
					$( ".bootstrap-select.open" ).removeClass("open");
				});
		};
		
		$("#status_table").dataTable(datatable_config);
		
		setup_selectpicker("#download_client_windows");
		setup_selectpicker("#download_client_mac");
		setup_selectpicker("#download_client_linux");
	}
	
	if(data.curr_version_num && 0)
	{
		g.checkForNewVersion(data.curr_version_num, data.curr_version_str);
	}
	else if(I('new_version_available'))
	{
		$('#new_version_available').css({"margin": 0, "padding": 0, "height": 0, "visibility": "hidden"});
	}
	
	if(data.has_ident_error_clients
		&& I("has_ident_error_clients")
		&& (typeof data.show_has_ident_error_clients==="undefined" || data.show_has_ident_error_clients===true) )
	{
		I('has_ident_error_clients').innerHTML=dustRender("has_ident_error_clients", {stop_show_key: data.has_ident_error_clients_stop_show_key} );
		dustPost(I('has_ident_error_clients'));
		$('#has_ident_error_clients').css({"visibility": "visible",
			"margin-bottom": "20", "padding": "15", "height": "auto"});
	}
	else if(I('has_ident_error_clients'))
	{
		$('#has_ident_error_clients').css({"margin": 0, "padding": 0, "height": 0, "visibility": "hidden"});
	}
	
	if(data.admin)
	{
		new getJSONMultiple("admin", "url=status", show_admin_status, show_admin_status_aggregate, {}, false);
		I("report_problem").style.display="inline";
	}
	else
	{
		if(I("space_usage_div"))
		{
			I("space_usage_div").style.display="none";
		}
	}
	
	g.status_show_all=false;
}

function stopShowError(stop_show_key)
{
	show_status1(stop_show_key, g.status_action_stop_show);
}

function resetStatusError(reset_key)
{
	show_status1(reset_key, g.status_action_reset_error);
}

function stopShowNewVersion(version_str)
{
	show_status1(version_str, g.status_action_stop_show_new_version);
}

g.checkForNewVersion = function(curr_version_num, curr_version_str)
{
	if(curr_version_num>g.current_version && I('new_version_available'))
	{
		I('new_version_available').innerHTML=dustRender("new_version_available", {new_version_number: curr_version_str} );
		dustPost(I('new_version_available'));
		I('new_version_available').css({"visibility": "visible"});
	}
}

function show_admin_status(data)
{
	if(I("space_usage"))
	{
		I("space_usage").innerHTML="";
	}

	if(I("system_notifications_container"))
	{
		I("system_notifications_container").innerHTML="";
	}

	for(var i=0;i<data.length;++i)
	{
		show_admin_status_single(data[i], i==0);
	}
}

function show_admin_status_single(data, local_app)
{
	if(data.ok)
	{
		if(I("space_usage"))
		{
			usage_data = {usage: format_size(data.used), size: format_size(data.size),
				percent: Math.round((data.used/data.size)*100), appname: data.appname };
			
			if(data.compressed_size)
			{
				usage_data.compressed_size = format_size(data.compressed_size);
			}
			append_via_span(I("space_usage"), dustRender("storage_info", usage_data), true);
			$("#space_usage").find("div[data-progressbar='1']").each(function(idx, elem){
				if($(elem).data("haspercent")=="1")
				{
					$(elem).css({"min-width": "2em"});
				}
				$(elem).css({"width": $(elem).data("percent")+"%"});
			});
		}
	}
	else if(data.backupfolder_err)
	{
		if(I("space_usage"))
		{
			var ndata="";
			if(data.mounting)
			{
				ndata="<strong>Mount operation in progress. Backup storage will become available shortly. ("+data.appname+")</strong><br /><br />";
			}
			else
			{
				ndata="<strong>There was an error. The backup storage is currently not available. ("+data.appname+")</strong><br /><br />";
			}

			if(data.mount_error)
			{
				ndata+="Error information: <br><pre>"+data.mount_error_info+"</pre>";
				if(data.mount_last_logs
					&& data.mount_last_logs.length>0)
				{
					ndata+="<br><br>Last log:<br><pre>";
					for(var i=0;i<data.mount_last_logs.length;++i)
					{
						ndata+=data.mount_last_logs[i]+"\n";
					}
					ndata+="</pre>";
				}
			}
			else if(data.mount_state)
			{
				ndata+="Current action: <br><br>";
				if(data.mount_state=="create_fs")
					ndata+="Creating new file system...";
				else if(data.mount_state=="mounting")
					ndata+="Mounting file system...";
				else if(data.mount_state=="open_db")
					ndata+="Opening database on cache...";
				else if(data.mount_state=="dl_magic_file")
					ndata+="Loading test file from backend storage to test availability...";
				else if(data.mount_state=="get_generation")
					ndata+="Loading current encryption generation from backend storage...";
				else if(data.mount_state=="start_trans")
					ndata+="Starting new cache storage transaction...";
				else if(data.mount_state=="enum_cache")
					ndata+="Enumerating objects on local cache...";
				else if(data.mount_state=="get_size")
					ndata+="Getting storage size...";
				else if(data.mount_state=="open_bitmaps")
					ndata+="Getting bitmaps...";
				else if(data.mount_state=="delete_objects")
					ndata+="Marking old objects as deleted...";
				else if(data.mount_state=="ready")
					ndata+="Block storage ready. Starting mounting...";
				else if(data.mount_state=="init_size")
					ndata+="Calculating initial backend storage size...";
				else if(data.mount_state=="update_trans")
					ndata+="Updating transactions on cache...";
				else if(data.mount_state=="generating_free_space_cache")
					ndata+="Generating RAID free space cache...";
				else if(data.mount_state=="checking_free_space_cache")
					ndata+="Checking RAID free space cache..."
				else if(data.mount_state=="importing")
				{
					ndata+="Enumerating objects on backend storage...<br>";
					if(data.mount_status
						&& data.mount_status.curr_keys
						&& data.mount_status.total_keys )
					{
						pc = 0;
						if(data.mount_status.total_keys>0)
							pc = (data.mount_status.curr_keys*100)/data.mount_status.total_keys;
						ndata+="Currently " + data.mount_status.curr_keys +" of total "+data.mount_status.total_keys+" enumerated ("+pc+"%)";
					}
				}
			}

			I("space_usage").innerHTML=ndata;
		}
	}
	
	if(!data.messages) data.messages = [];
	
	if( (data.messages.length>0 
		|| !data.reg_appkey
		|| data.ext_system_err
		|| data.scheduled_raid_rebuild!=0 
		|| data.scheduled_raid_scrub!=0 ) && I("system_notifications_container"))
	{
		data.messages_many = [];
		data.messages_app = {};
		data.messages_appname = {};

		for(var i=0;i<data.messages.length;++i)
		{
			data.messages[i].time_str = format_unix_timestamp(data.messages[i].added);
			if(data.messages[i].prio==1)
				data.messages[i].severity = "warning";
			else if(data.messages[i].prio>=2)
				data.messages[i].severity = "danger";	
			else
				data.messages[i].severity = "info";
				
			data.messages[i].msg = unescapeHTML(data.messages[i].msg);

			if(data.scheduled_raid_rebuild==0
				&& data.messages[i].msg.id=="raid_disk_offline")
			{
				data.messages[i].msg+="<br><br>Update: Automatic RAID rebuild has been canceled.";
			}

			if(data.scheduled_raid_rebuild==0
				&& data.messages[i].msg.id=="raid_disk_repair")
			{
				data.messages[i].msg+="<br><br>Update: Automatic RAID scrub has been canceled.";
			}

			var appid = data.appid;
			var appname = data.appname;

			if (typeof data.messages_app[appid]=="undefined" )
				data.messages_app[appid] = 0;
			else
				data.messages_app[appid]+=1;

			data.messages_appname[appid] = appname;
		}

		g.num_status_messages = data.messages.length;

		for(appid in data.messages_app)
		{
			if(data.messages_app[appid]>4)
			{
				data.messages_many.push({
					appid: appid,
					appname: data.messages_appname[appid]
				});
			}
		}

		if(!I("system_notifications"))
		{
			append_via_span(I("system_notifications_container"), dustRender("status_messages", data), true);
		}
		
		if(data.scheduled_raid_rebuild!=0)
		{
			append_via_span(I("system_notifications"), 
				dustRender("status_rebuild", {rebuild_time: format_time_seconds(data.scheduled_raid_rebuild), appname: data.appname, appid: data.appid} ), 
				true);
		}
		
		if(data.scheduled_raid_scrub!=0)
		{
			append_via_span(I("system_notifications"),
				dustRender("status_scrub", {scrub_time: format_time_seconds(data.scheduled_raid_scrub), appname: data.appname, appid: data.appid} ),
				true);
		}
		
		if(!data.reg_appkey)
		{
			if(data.reg_timeout===null || data.reg_timeout>0)
			{
				append_via_span(I("system_notifications"),
					dustRender("license_warning", {reg_timeout: format_time_seconds(data.reg_timeout), appname: data.appname, appid: data.appid}),
					true);
			}
			else
			{
				append_via_span(I("system_notifications"),
					dustRender("license_error", {appname: data.appname, appid: data.appid}),
					true);
			}
		}

		if(data.ext_system_err)
		{
			append_via_span(I("system_notifications"),
					dustRender("ext_system_err"),
					true);
		}
	}
	
	if(local_app)
	{
		if(typeof data.new_devices=="undefined")
			data.new_devices = [];

		g.new_devices = data.new_devices;
		var newHtml ="";
		if(data.new_devices.length>0)
		{
			newHtml+="<br>";
		}
		for(var i=0;i<data.new_devices.length;++i)
		{
			data.new_devices[i].fn = unescapeHTML(data.new_devices[i].fn);
			data.new_devices[i].size = format_size(data.new_devices[i].size);
			var params = {
				name: data.new_devices[i].name,
				size: data.new_devices[i].size,
				fn: data.new_devices[i].fn
			};				
			newHtml+=dustRender("new_device", params);
		}
		g.last_new_devices = data.new_devices;
		if(I("space_usage"))
		{
			append_via_span(I("space_usage"), newHtml, true);
		}

		if(data.new_devices.length==0
			&& data.backupfolder_err
			&& !data.has_device
			&& !data.has_system_cache
			&& I("space_usage"))
		{
			append_via_span(I("space_usage"), dustRender("cloudstorage_system_disk", params), true);
		}
	}
	
	if(data.storage_degraded && I("space_usage"))
	{
		append_via_span(I("space_usage"), dustRender("degraded_alert"), true);
	}
	
	if(data.cloudstorage_congested && I("space_usage"))
	{
		append_via_span(I("space_usage"), dustRender("cloudstorage_congested"), true);
	}
	
	if(data.raidstorage_congested && I("space_usage"))
	{
		append_via_span(I("space_usage"), dustRender("raidstorage_congested"), true);
	}
	
	if(data.cloudcache_mode && local_app)
	{	
		g.cloudcache_mode=true;
	}
	
	if(typeof data.confirmation_queue=="undefined")
		data.confirmation_queue = [];

	if(data.confirmation_queue.length>0 && local_app)
	{	
		new getJSON("admin", "url=confirmation_info", show_confirmation_info);
	}
}

function systemCloudStorage()
{
	if(!startLoading()) return;

	if(confirm("Are you sure you want to use the system disk as cloud storage cache? Use a different device will improve performance."))
	{
		new getJSON("admin", "url=switch_cache_mode%2Fsystem_cloud", systemCloudStorageCb);		
	}
	else
	{
		stopLoading();
	}
}

function systemCloudStorageCb(data)
{
	stopLoading();
	
	if(!data.ok)
	{
		alert("Error switching cache mode: "+data.err);
	}
	
	g.cloudcache_setup=true;
	g.system_cloudcache_setup=true;
	configureClouddrive();
}

function systemRaidStorage()
{
	if(!startLoading()) return;

	if(confirm("Are you sure you want to use the system disk as RAID storage cache? Use a different device will improve performance."))
	{
		new getJSON("admin", "url=switch_cache_mode%2Fsystem_raid", systemRaidStorageCb);		
	}
	else
	{
		stopLoading();
	}
}

function systemRaidStorageCb(data)
{
	stopLoading();
	
	if(!data.ok)
	{
		alert("Error switching cache mode: "+data.err);
	}

	show_status1();
}

function ackMessageAll(appid)
{
	if(!startLoading()) return;
	new getJSONSingleApp("admin", "url=ack_message_all", ackMessageAllCb, appid);
}

function ackMessage(msgid, appid)
{
	if(!startLoading()) return;
	new getJSONSingleApp("admin", "url=ack_message%2F"+msgid, ackMessage2, appid);
}

function ackMessage2(data)
{
	stopLoading();
	
	if(!data.ok)
	{
		alert("Acknowledging message failed");
		return;
	}
	
	g.num_status_messages-=1;
	var obj = I("system_notification_"+data.msgid);
	obj.parentNode.removeChild(obj);

	if(g.num_status_messages==0)
	{
		var obj = I("system_notifications_panel");
		obj.parentNode.removeChild(obj); 
	}
}

function ackMessageAllCb(data)
{
	stopLoading();
	
	if(!data.ok)
	{
		alert("Acknowledging messages failed");
		return;
	}

	var obj = I("system_notifications_panel");
	obj.parentNode.removeChild(obj); 
}

function enterLicenseKey(appid)
{
	if(typeof appid!="undefined" && appid.length>0)
	{
		g.settings_selected_app=appid;
	}
	var ndata=dustRender("enter_license_key");
		
	if(g.data_f!=ndata)
	{
		I('data_f').innerHTML=ndata;
		dustPost(I('data_f'));
		g.data_f=ndata;
	}
	
	var valConfig = default_validator_config();
	
	valConfig.rules = 
	{
		appkey: {
			licensekey: true,
			required: true,
			minlength: 2
		}
	};
	
	g.formValidator = $("#form1").validate(valConfig);
}

function enterLicenseKey2()
{
	if(g.formValidator.form())
	{
		if(!startLoading())return;
		new getJSONSingleApp("admin", "url=add_license_key%2F"+encode2(I("appkey").value), enterLicenseKeyCb, g.settings_selected_app);
	}
}

function enterLicenseKeyCb(data)
{
	stopLoading();
	
	if(data.ok)
	{
		show_status1();
	}
	else
	{
		alert("Error while registering license key: "+data.err);
	}
}

function show_confirmation_info(data)
{
	if(I("alert_panel") && data.ok)
	{
		for(var i=0;i<data.unconfirmed_phones.length;++i)
		{
			data.unconfirmed_phones[i]["n"]=i;
		}
		
		if(data.unconfirmed_phones.length>0 || data.unconfirmed_mails.length>0 || data.unconfirmed_primary)
		{
			I("alert_panel").style.display="inline-block";
			I("confirmation").innerHTML=dustRender("confirmation", data);
			dustPost(I("confirmation"));
			I('confirmation').style.display="inline";
		}
		else
		{
			I('confirmation').style.display="none";
		}
	}
	else
	{
		I("alert_panel").style.display="inline-block";
		I('confirmation').style.display="inline";
		I("confirmation").innerHTML="Error getting confirmation status of contact information";
	}
}

function resendPrimaryConfirmationMail(obj)
{
	if(!startLoading())return;
	
	obj.style.display="none";
	
	new getJSON("admin", "url=resend_account_confirmation", resendPrimaryConfirmationMailCb);
}

function resendPrimaryConfirmationMailCb(data)
{
	stopLoading();
	
	if(data.ok)
	{
		alert("Sent a new confirmation mail.");
	}
	else
	{
		alert("Error sending confirmation mail: "+data.err);
	}
}

function resendMonitoringConfirmationMail(obj, email)
{
	if(!startLoading())return;
	
	obj.style.display="none";
	
	new getJSON("admin", "url=resend_monitoring_confirmation_email%2F"+encode2(email), resendMonitoringConfirmationMailCb);
}

function resendMonitoringConfirmationMailCb(data)
{
	stopLoading();
	
	if(data.ok)
	{
		alert("Sent a new confirmation mail.");
	}
	else
	{
		alert("Error sending confirmation mail: "+data.err);
	}
}

function resendMonitoringConfirmationSms(phone_nr)
{
	if(!startLoading())return;
	
	new getJSON("admin", "url=resend_monitoring_confirmation_phone%2F"+encode2(phone_nr), resendMonitoringConfirmationSmsCb);
}

function resendMonitoringConfirmationSmsCb(data)
{
	stopLoading();
	
	if(data.ok)
	{
		alert("Sent a new confirmation sms.");
	}
	else
	{
		alert("Error sending confirmation sms: "+data.err);
	}
}

function confirmPhoneNr(idx, phone_nr)
{
	var code = I("sms_code_"+idx).value;
	
	if(!startLoading())return;
	
	I("confirmation").innerHTML="<div class=\"throbber\">Loading...</div>";
	
	new getJSON("admin", "url=confirm_monitoring_sms%2F"+encode2(code), confirmPhoneNrCb);
}

function confirmPhoneNrCb(data)
{
	stopLoading();
	
	if(!data.ok)
	{
		alert("Error confirming phone number: "+data.err);
	}
	
	new getJSON("admin", "url=confirmation_info", show_confirmation_info);
}

function useDevice(dev_fn, settings_dialog)
{
	if(!startLoading()) return;
	
	if(settings_dialog)
	{
		g.use_device_settings_dialog=true;
	}
	else
	{
		g.use_device_settings_dialog=false;
	}
	
	new getJSON("admin", "url=use_device%2F"+encode2(dev_fn), useDeviceCb);
}

function useDeviceCb(data)
{
	stopLoading();
	
	data.size = format_size(data.size);
	
	if(g.cloudcache_mode)
	{
		data.no_backup_storage=true;
		data.has_cloudcache=true;
	}
	
	data.new_devices = []
	var idx=0;
	for(var i=0;i<g.new_devices.length;++i)
	{
		if(g.new_devices[i].fn!=unescapeHTML(data.fn))
		{
			g.new_devices[i].idx = idx;
			++idx;
			data.new_devices.push(g.new_devices[i]);
			data.has_new_devices=true;
		}
	}

	if(data.enable_vdisks === 0)
	{
		delete data["enable_vdisks"];
	}

	var ndata;
	if(data.need_ext_system && !data.has_ext_system)
	{
		if(data.dev_type=="ES")
		{
			data.existing_ext_system_disk=true;
		}

		ndata = dustRender("use_device_ext_system", data);
	}
	else
	{
		ndata = dustRender("use_device", data);
	}
		
	if(g.data_f!=ndata)
	{
		I('data_f').innerHTML=ndata;
		dustPost(I('data_f'));
		g.data_f=ndata;
	}
	
	var valConfig = default_validator_config();
	
	valConfig.rules = 
	{
		confirm_selection: {
			required: true,
			requireYes: true
		}
	};
	
	g.formValidator = $("#form1").validate(valConfig);
	
	if(data.has_system_cache)
	{
		if(data.cloudcache_mode)
		{
			if(I("cache_location_system_cloud"))
				I("cache_location_system_cloud").checked=true;
		}
		else if(I("cache_location_system_raid"))
			I("cache_location_system_raid").checked=true;
	}
	
	if(I("use_disk"))
	{
		I("use_disk").checked=true;
	}
	else if(I("format_disk"))
	{
		I("format_disk").checked=true;
		if(data.raidcache_mode)
			I("repeat_action").style.display="inline";
	}
	else if(I("cloudcache"))
	{
		I("cloudcache").checked=true;
	}
}

function useNewDevice(dev_fn, settings, usage)
{
	if(!startLoading())return;
		
	var ndata=dustRender("formatting_drive", device_fn_info(dev_fn) );
	
	if(I("formatting_drive_throbber"))
	{
		I("formatting_drive_throbber").parentNode.removeChild(I("formatting_drive_throbber"));
		append_via_span(I('data_f'), ndata, true);
		g.data_f=I('data_f').innerHTML;
	}
	else if(g.data_f!=ndata)
	{
		I('data_f').innerHTML=ndata;
		dustPost(I('data_f'));
		g.data_f=ndata;
	}
	
	var callback_fn = using_new_device;
	if(settings)
	{
		callback_fn = using_new_device_settings;
	}
	new getJSON("admin", "url=add_new_device%2F"+usage+"%2F"+encode2(dev_fn), callback_fn);
}

function repeat_action_select_all()
{
	var b = true;
	
	if(I("id_repeat_action_select_all").innerHTML!="Select all")
		b=false;

	for(var idx=0;I("repeat_action_"+idx);++idx)
	{
		I("repeat_action_"+idx).checked=b;
	}
	
	if(b)
	{
		I("id_repeat_action_select_all").innerHTML="De-select all";
	}
	else
	{
		I("id_repeat_action_select_all").innerHTML="Select all";
	}
}

function cache_disk_select()
{
	I("repeat_action").style.display="none";
	if(I("raidcache_enckey"))
		I("raidcache_enckey").style.display="none";
}

function import_disk_select()
{
	I("repeat_action").style.display="none";
	if(I("raidcache_enckey"))
		I("raidcache_enckey").style.display="none";
}

function format_raid_disk_select()
{
	I("repeat_action").style.display="inline";
	if(I("raidcache_enckey"))
		I("raidcache_enckey").style.display="none";
}

function format_raid_fast_disk_select()
{
	I("repeat_action").style.display="inline";
	if(I("raidcache_enckey"))
		I("raidcache_enckey").style.display="none";
}

function device_fn_info(fn)
{
	for(var i=0;i<g.new_devices.length;++i)
	{
		if(g.new_devices[i].fn==fn)
		{
			return g.new_devices[i];
		}
	}
	return {};
}

function select_systemcache()
{
	if(I("raidcache_enckey_systemcache"))
		I("raidcache_enckey_systemcache").style.display="none";
}

function select_raid_systemcache()
{
	if(I("raidcache_enckey_systemcache"))
		I("raidcache_enckey_systemcache").style.display="inline";
}

function setupRaiddevCache(dev_fn, settings)
{
	if(!startLoading())return;
	
	data={};
	data["devs"]=[dev_fn];
	
	var idx=0;
	while(I("raiddevcache_mirror"+idx))
	{
		data["devs"].push(I("raiddevcache_mirror"+idx).value);
		++idx;
	}
	
	var ndata=dustRender("formatting_drive", device_fn_info(dev_fn) );
	
	if(g.data_f!=ndata)
	{
		I('data_f').innerHTML=ndata;
		dustPost(I('data_f'));
		g.data_f=ndata;
	}
	
	var callback_fn = using_new_device;
	if(settings)
	{
		callback_fn = using_new_device_settings;
	}
	new getJSON("admin", "url=add_raid_device_cache%2F"+encode2(JSON.stringify(data)), callback_fn);
}

function importFromDevice(dev_fn)
{
	if(!startLoading())return;
	
	var encryption_key = I("encryption_key").value;
	
	var ndata=dustRender("importing_from_drive");
	
	if(g.data_f!=ndata)
	{
		I('data_f').innerHTML=ndata;
		g.data_f=ndata;
	}
	
	new getJSON("admin", "url=import_from_device_start%2Fplain%2F"+encode2(encryption_key)+"%2F"+encode2(dev_fn), importFromDeviceCb);
}

function importExtSystem(dev_fn)
{
	if(!startLoading())return;
	
	var encryption_key = I("encryption_key").value;
	
	var ndata=dustRender("importing_from_drive");
	
	if(g.data_f!=ndata)
	{
		I('data_f').innerHTML=ndata;
		g.data_f=ndata;
	}
	
	new getJSON("admin", "url=import_from_device_start%2Fext_system%2F"+encode2(encryption_key)+"%2F"+encode2(dev_fn), importFromDeviceCb);
}

function importFromRaid(dev_fn, enckey)
{
	if(!startLoading())return;
	
	var encryption_key = I("raid_encryption_key").value;
	
	if(typeof enckey !== "undefined" )
		encryption_key = enckey;
	
	var ndata=dustRender("importing_from_drive");
	
	if(g.data_f!=ndata)
	{
		I('data_f').innerHTML=ndata;
		dustPost(I('data_f'));
		g.data_f=ndata;
	}
	
	new getJSON("admin", "url=import_from_device_start%2Fraid%2F"+encode2(encryption_key)+"%2F"+encode2(dev_fn), importFromDeviceCb);
}

function useDeviceSelected(dev_fn)
{
	if(g.formValidator.form())
	{
		if( (I("format_disk") && I("format_disk").checked) ||
			(I("format_disk_fast") && I("format_disk_fast").checked ) )
		{
			if(I("raidcache_mode"))
				usage="raid";
			else
				usage="storage";
				
			g.use_device_queue=[];
			for(var idx=0;I("repeat_action_"+idx);++idx)
			{
				if(I("repeat_action_"+idx).checked)
				{
					g.use_device_queue.push({"fn": I("repeat_action_fn_"+idx).value,
											 "usage": usage});
				}
			}

			if(I("format_disk_fast") && I("format_disk_fast").checked)
				usage="raid_fast";
			
			useNewDevice(dev_fn, g.use_device_settings_dialog, usage);
		}
		else if(I("cloudcache") && I("cloudcache").checked)
		{
			g.use_device_dev_fn = dev_fn;
			g.cloudcache_setup = true;
			
			configureClouddrive();
		}
		else if(I("raidcache") && I("raidcache").checked)
		{
			if(I("raid_encryption_key").value.length==0)
			{
				useNewDevice(dev_fn, g.use_device_settings_dialog, "raidcache");
			}
			else
			{
				importFromRaid(dev_fn);
			}
		}
		else if(I("l2cloudcache") && I("l2cloudcache").checked)
		{
			useNewDevice(dev_fn, g.use_device_settings_dialog, "l2cloudcache");
		}
		else if(I("l2raidcache") && I("l2raidcache").checked)
		{
			useNewDevice(dev_fn, g.use_device_settings_dialog, "l2raidcache");
		}
		else if(I("raiddevcache_disk") && I("raiddevcache_disk").checked)
		{
			setupRaiddevCache(dev_fn, g.use_device_settings_dialog);
		}
		else
		{
			importFromDevice(dev_fn);
		}
	}
}

function useDeviceSelectedExtSystem(dev_fn)
{
	if(g.formValidator.form())
	{
		if(I("use_disk") && I("use_disk").checked)
		{
			importExtSystem(dev_fn);
		}
		else if(I("ext_system") && I("ext_system").checked)
		{			
			useNewDevice(dev_fn, g.use_device_settings_dialog, "ext_system");
		}
		else
		{
			alert("Not selected!!!");
		}
	}
}
function switchCacheMode(fn)
{	
	var cache_mode="separate";
	
	if(I("cache_location_system_cloud") && I("cache_location_system_cloud").checked)
		cache_mode="system_cloud";
	if(I("cache_location_system_raid") && I("cache_location_system_raid").checked)
		cache_mode="system_raid";
		
	g.use_device_fn = fn;
	
	var enckey = "";
	if(I("raid_encryption_key_systemcache"))
		enckey = I("raid_encryption_key_systemcache").value;
	
	if(enckey.length==0 || cache_mode!="system_raid")
	{
		if(!startLoading())return;
		new getJSON("admin", "url=switch_cache_mode%2F"+cache_mode, switchCacheModeCb);
	}
	else
	{
		importFromRaid("systemcache", enckey);
	}	
}

function switchCacheModeCb(data)
{
	stopLoading();
	
	if(!data.ok)
	{
		alert("Error switching cache mode: "+data.err);
	}
	
	useDevice(g.use_device_fn, g.use_device_settings_dialog);
}

function select_raidcache()
{
	cache_disk_select();
	if(I("raidcache").checked)
	{
		I("raidcache_enckey").style.display="inline";
	}
	else
	{
		I("raidcache_enckey").style.display="none";
	}
}

function next_use_device()
{
	if(g.use_device_queue
		&& g.use_device_queue.length>0)
	{
		dev = g.use_device_queue[0]
		g.use_device_queue.shift();
		
		useNewDevice(dev["fn"], g.use_device_settings_dialog, dev["usage"]);
		
		return true;
	}	
	
	return false;
}

function using_new_device(data)
{
	stopLoading();
	if(data.res)
	{
		if(data.usage=="ext_system")
		{
			restartWait();
			return;
		}

		if(next_use_device())
			return;	
	}
	else
	{
		var err="";
		if(data.err)
			err=data.err;
		alert("Error while formatting device. "+err);
	}
	
	show_status1();
}

function using_new_device_settings(data)
{
	stopLoading();
	
	if(!data.res)
	{
		var err="";
		if(data.err)
			err=data.err;
		alert("Error while formatting device. "+err);
	}
	else
	{
		if(data.usage=="ext_system")
		{
			restartWait();
			return;
		}

		if(next_use_device())
			return;	
	}
	storageSettings();
}

function importFromDeviceCb(data)
{
	if(data.ok)
	{
		setTimeout(refreshImportFromDeviceStatus, 1000);
	}
	else
	{
		alert("Error starting import: "+data.err);
	}
}

function refreshImportFromDeviceStatus()
{
	new getJSON("admin", "url=import_from_device_status", refreshImportFromDeviceStatusCb);
}

function refreshImportFromDeviceStatusCb(data)
{
	if(I("import_status"))
	{
		if(data.ok)
		{
			if(data.status!="done")
			{
				I("import_status").innerHTML = data.status;
			}
			else
			{
				stopLoading();
				alert("Imported database and backup storage successfully. The system will now be restarted...");
				restartWait();
				return;
			}
		}
		else
		{
			if(data.err=="enckey_wrong")
			{
				data.err="The encryption key seems to be wrong. Please try again with the correct encryption key.";
			}
			
			if(data.err=="more_devices")
			{
				alert("Could not bring backup storage online yet. You probably need to add more devices before the backup storage can be brought online.");
			}
			else
			{
				alert("Error importing drive: "+data.err);
			}		
			
			stopLoading();
			if(g.use_device_settings_dialog)
			{
				storageSettings();
			}
			else
			{
				show_status1();
			}
			return;
		}
		
		setTimeout(refreshImportFromDeviceStatus, 1000);
	}
}

function importFromDeviceRestart(data)
{
	stopLoading();
	if(data.ok)
	{
		restartWait();
	}
	else
	{
		alert("Error restarting system: "+data.err);
	}
}

function downloadClientURL(clientid, authkey, os, clientname)
{
	var site_url = location.protocol+'//'+location.host+location.pathname;
	
	if(site_url.substr(site_url.length-1)!="/")
	{
		site_url+="/";
	}

	if(authkey)
	{
		authkey = "&authkey="+encodeURIComponent(authkey);
	}
	else
	{
		authkey = "";
	}

	var new_clientid = revMapClientId(clientid);
	var clientident = "clientid="+new_clientid.id;

	if(g.remote_apps.length>1
			&& new_clientid.appid!=g.self_appid)
	{
		clientident = "clientname="+encodeURIComponent(clientname);	
	}

	var ses = g.session;
	g.session=null;
	var ret = site_url + getURL("download_client", clientident+authkey+"&os="+os);
	g.session = ses;
	return ret;
}

function downloadClient(clientid, authkey, os, clientname)
{
	var selidx=-1;

	var clientident="";
	if(clientid!=-1)
	{
		var t_clientid = revMapClientId(clientid);
		clientident = "clientid="+t_clientid.id;
	}

	if(typeof clientname!="undefined"
		&& clientid!=-1
		&& g.remote_apps.length>1
			&& t_clientid.appid!=g.self_appid)
	{
		clientident = "clientname="+encodeURIComponent(clientname);	
	}
	
	if(os && I('download_client_'+os))
	{
		selidx = I('download_client_'+os).selectedIndex;
	}
	
	if(selidx!=-1 || clientid!=-1)
	{
		if(authkey)
		{
			authkey = "&authkey="+encodeURIComponent(authkey);
		}
		else
		{
			authkey = "";
		}
		
		var url_prefix = "";
		if(clientid==-1)
		{
			var t_clientid = revMapClientId(I('download_client_'+os).value);
			if(clientident=="")
			{
				if(t_clientid.appid != g.self_appid)
				{
					url_prefix = fixupRemoteUrlWithSlash(t_clientid.appid);
				}
				clientident = "clientid="+t_clientid.id;
			}
		}
		
		openBrowserDownloadUrl(url_prefix + getURL("download_client", clientident+authkey+"&os="+os));
	}
}


function addExtraClient()
{
	if(I('hostname').value.length==0)
	{
		alert(trans("enter_hostname"));
		I('hostname').focus();
		return;
	}
	
	var appid=g.self_appid;
	if(I("add_client_appliance"))
	{
		appid = I("add_client_appliance").value;
	}
	show_status1(I('hostname').value, null, null, null, appid);
}


function addInternetClient()
{
	if(I('clientname').value.length==0)
	{
		alert(trans("enter_clientname"));
		I('clientname').focus();
		return;
	}
	
	show_status1(I('clientname').value, g.status_action_add_internetclient);
}


function removeExtraClient(id)
{
	show_status1(id+"", g.status_action_remove_hostname);
}


function show_backups1()
{
	if(!startLoading()) return;
	clearTimeout(g.refresh_timeout);
	g.refresh_timeout=-1;
	new getJSONMultiple("backups", "", show_backups2, show_backups_aggregate);
	
	g.main_nav_pos=4;
	build_main_nav();
	I('nav_pos').innerHTML="";
}

function prepareBackupObj(data, obj, image)
{
	if(obj.size_bytes<0)
		obj.size_bytes="-";
	else
		obj.size_bytes=format_size(obj.size_bytes);

	obj.incr=obj.incremental>0;
	if( obj.incr )
		obj.incr=trans("yes");
	else
		obj.incr=trans("no");
	
	if(typeof obj.total_size!="undefined"
		&& obj.total_size>=0)
		obj.total_size = format_size(obj.total_size);
	else
		obj.total_size="-";
		
	var link_title="";
	var stopwatch_img="";
	
	if(obj.archive_timeout!=0)
	{
		link_title='title="'+trans("unarchived_in")+' '+format_time_seconds(obj.archive_timeout)+'"';
		stopwatch_img='<span class="glyphicon glyphicon-time"></span>';
	}
	
	if(image && obj.id>0)
		obj.id*=-1;
	
	var hdd_archived = '<span class="glyphicon glyphicon-hdd urbackup_color_blue"></span>';
	var hdd_unarchived = '<span class="glyphicon glyphicon-hdd urbackup_color_black"></span>';
	
	var archived = obj.archived ;
	obj.archived="";
	
	if(!data.deleted_locally)
	{
		if(data.can_archive)
		{
			if( archived & 1 )
			{
				obj.archived+='<span '+link_title+'><a href="#" title="Archived locally" data-unarchive="1" data-id="'+obj.id+'" ' +
					' data-clientid="'+data.clientid+'">'+hdd_archived+'</a>'+stopwatch_img+'</span>';
				obj.is_archived=true;
			}
			else
				obj.archived+='<a href="#" title="Archive locally" data-archive="1" data-id="'+obj.id+'" ' +
					' data-clientid="'+data.clientid+'">'+hdd_unarchived+'</a>';
		}
		else
		{
			if( archived & 1)
			{
				obj.archived+='<span '+link_title+'>'+hdd_archived+stopwatch_img+'</span>';
				obj.is_archived=true;
			}
			else
				obj.archived+=hdd_unarchived;
		}
	}
	
	if(!g.cloudcache_mode)
	{
		var stopwatch_img_cloud="";
		var link_title_cloud="";
		if(obj.cloud_archive_timeout!=0)
		{
			link_title_cloud='title="'+trans("unarchived_in")+' '+format_time_seconds(obj.cloud_archive_timeout)+'"';
			stopwatch_img_cloud='<span class="glyphicon glyphicon-time"></span>';
		}
		
		var cloud_archived = '<span class="glyphicon glyphicon-cloud urbackup_color_blue"></span>';
		var cloud_icon_working = '<span class="glyphicon glyphicon-cloud-upload blink urbackup_color_blue"></span>';
		var cloud_unarchvied = '<span class="glyphicon glyphicon-cloud-upload urbackup_color_black"></span>';
		
		obj.archived+="&nbsp;&nbsp;";
		
		if(data.can_archive)
		{
			if(obj.cloud_working)
				obj.archived+='<span '+link_title_cloud+'><a href="#" title="Archiving to cloud in progress" data-unarchive="2" data-id="'+obj.id+'" ' +
					' data-clientid="'+data.clientid+'">'+cloud_icon_working+'</a>'+stopwatch_img_cloud+'</span>';
			else if( archived & 2 )
				obj.archived+='<span '+link_title_cloud+'><a href="#" title="Archived to cloud" data-unarchive="2" data-id="'+obj.id+'" ' +
					' data-clientid="'+data.clientid+'">'+cloud_archived+'</a>'+stopwatch_img_cloud+'</span>';
			else
				obj.archived+='<a href="#" title="Archive to cloud" data-archive="2" data-id="'+obj.id+'" ' +
					' data-clientid="'+data.clientid+'">'+cloud_unarchvied+'</a>';
		}
		else
		{
			if(obj.cloud_working)
				obj.archived+='<span '+link_title_cloud+'>'+cloud_icon_working+stopwatch_img_cloud+'</span>';
			else if( archived & 2 )
				obj.archived+='<span '+link_title_cloud+'>'+cloud_archived+stopwatch_img_cloud+'</span>';
			else
				obj.archived+=cloud_unarchvied;
		}
	}
	
	if(obj.repl_from_name.length>0)
	{
		obj.archived+='<span class="glyphicon glyphicon-briefcase urbackup_replicated_from" title="Replicated from ' + obj.repl_from_name + '"></span>';
	}
	if(typeof obj.replications !== "undefined" )
	{
		for(var i =0;i<obj.replications.length;++i)
		{
			if(obj.replications[i].done)
			{
				obj.archived+='<span class="glyphicon glyphicon-briefcase urbackup_replicated_to" title="Replicated to ' + obj.replications[i].name + '"></span>';
			}
			else
			{
				obj.archived+='<span class="glyphicon glyphicon-briefcase blink urbackup_replication_in_progress" title="Replication to ' + obj.replications[i].name + ' in progress"></span>';
			}
		}
	}
	
	obj.clientid=data.clientid;
	
	if(obj.backuptime!=0)
	{
		obj.backuptime = format_unix_timestamp(obj.backuptime);
	}
	else
	{
		obj.backuptime = "-";
	}
	
	if(image && obj.id<0)
		obj.id*=-1;
	
	return obj;
}
function prepareBackupObjPost(elem)
{
	$(elem).find("a[data-unarchive]").click(function(evt){ 
		unarchive_single(parseInt($(this).data("id")), parseInt($(this).data("clientid")), parseInt($(this).data("unarchive")));
		return false;
	});
	$(elem).find("a[data-archive]").click(function(evt){ 
		archive_single(parseInt($(this).data("id")), parseInt($(this).data("clientid")), parseInt($(this).data("archive")));
		return false;
	});
	
}
function show_backups2(data)
{
	stopLoading();
	var ndata="";
	
	if(data.session && g.session.length==0)
	{
		g.session=data.session;
	}
	
	if(data.delete_err)
	{
		var errmsg=trans(data.delete_err);
		if(errmsg==null)
		{
			errmsg=data.delete_err;
		}
		alert(trans("delete_err")+errmsg);
	}
	
	if(data.delete_now_err)
	{
		var errmsg=trans(data.delete_now_err);
		if(errmsg==null)
		{
			errmsg=data.delete_now_err;
		}
		alert(trans("delete_now_err")+errmsg);
	}
	
	if(data.err)
	{
		if(data.err=="access_denied")
		{
			ndata=dustRender("backups_access_denied", data);
		}
		else
		{
			ndata=dustRender("backups_error", {err: data.err});
		}
	}
	else if(data.clients)
	{
		var rows="";
		for(var i=0;i<data.clients.length;++i)
		{
			var obj=data.clients[i];
			if(obj.lastbackup==0)
				obj.lastbackup="-";
			else
				obj.lastbackup = format_unix_timestamp(obj.lastbackup);
			rows+=dustRender("backups_clients_row", obj);
		}
		ndata=dustRender("backups_clients", {rows: rows, ses: g.session});
	}
	else if(data.backups)
	{
		var rows="";
		for(var i=0;i<data.backups.length;++i)
		{
			data.backups[i] = prepareBackupObj(data, data.backups[i], false);
		}
		
		for(var i=0;i<data.backup_images.length;++i)
		{
			data.backup_images[i] = prepareBackupObj(data, data.backup_images[i], true);
		}
		
		var show_client_breadcrumb=false;
		if(!data.token_authentication)
		{
			show_client_breadcrumb=true;
		}
		
		var has_actions=false;
		if(data.can_delete)
		{
			has_actions=true;
		}	
		
		ndata=dustRender("backups_backups", {backups: data.backups, backup_images: data.backup_images, ses: g.session, 
					clientname: data.clientname, clientid: data.clientid, show_client_breadcrumb: show_client_breadcrumb,
					has_actions: has_actions, can_delete: data.can_delete, can_compare: data.can_compare,
					can_search: data.can_search});
	}
	else if(data.files && !data.single_item)
	{
		if(data.image_backup_info)
		{
			data.backupid = -1*data.backupid;
		}
		
		if(data.files
			&& data.mount_in_progress)
		{
			tabMouseClickFiles(data.clientid,data.backupid, unescapeHTML(data.path), true);
			return;
		}
	
		var rows="";		
		var path=unescapeHTML(data.path);
		g.last_browse_backupid = data.backupid;
		g.last_browse_backuptime = data.backuptime;
		var els=path.split("/");
		var cp="";
		var curr_path="";
		
		var last_path="";
		for(var i=0;i<els.length-1;++i)
		{
			if(els[i].length>0)
			{
				last_path+="/"+els[i];
			}
		}
		
		if(els.length>1 && (els[1].length>0 || els.length>2))
		{
			cp+="<a data-browse-backups=\"1\" data-clientid=\""+data.clientid+"\""+
						" data-browse-backupid=\""+data.backupid+"\">"+format_unix_timestamp(data.backuptime)+"</a> > ";
		}
		else
		{
			cp+="<strong>"+format_unix_timestamp(data.backuptime)+"</strong>"
		}
		
		for(var i=0;i<data.files.length;++i)
		{
			var obj=data.files[i];
			if(obj.dir)
			{
				if(typeof obj.size !== "undefined"
					&& obj.size>=0)
				{
					obj.size=format_size(obj.size);
				}
				else
				{
					obj.size="";
				}
				obj.proc="Files";
			}
			else
			{
				obj.size=format_size(obj.size);				
				obj.proc="FilesDL";
			}
			
			if(obj.creat==0)
			{
				obj.creat="-";
			}
			else
			{
				obj.creat=format_unix_timestamp(obj.creat);
			}
			
			if(obj.mod==0)
			{
				obj.mod="-";
			}
			else
			{	
				obj.mod=format_unix_timestamp(obj.mod);
			}
			
			if(obj.access==0)
			{
				obj.access="-";
			}
			else
			{	
				obj.access=format_unix_timestamp(obj.access);
			}

			if(typeof obj.symtarget != "undefined")
			{
				obj.has_symtarget=true;
				obj.symtarget = unescapeHTML(obj.symtarget);
			}
			
			obj.clientid=data.clientid;
			obj.backupid=data.backupid;
			obj.path=encodeURIComponent(path+"/"+obj.name).replace(/'/g,"%27");
			if(data.backupid>0)
			{
				obj.list_items=true;
			}
			
			data.files[i]=obj;
		}
		
		for(var i=0;i<els.length;++i)
		{
			if(els[i].length>0)
			{
				curr_path+="/"+els[i];
				if(i+1<els.length)
				{
					cp+="<a href=\"#\" data-browse-files=\"tabMouseClickFiles\" data-clientid=\""+data.clientid+"\" "+
						" data-browse-backupid=\""+data.backupid+"\" href=\"#\"" +
						" data-path=\""+(curr_path==""?"/":encodeURIComponent(curr_path).replace(/'/g,"%27"))+"\">"+els[i]+"</a>";
					if(i!=0)
					{
						cp+=" > ";
					}
				}
				else
				{
					cp+="<strong>"+els[i]+"</strong>";
				}
			}
		}
		
		var server_confirms_restore="false";
		if(data.server_confirms_restore)
		{
			server_confirms_restore="true";
		}
		
		var image_backup_info=null;
		if(data.image_backup_info)
		{
			image_backup_info = [prepareBackupObj(data, data.image_backup_info)];
			image_backup_info[0].volume_size = format_size(image_backup_info[0].volume_size);
		}	
		
		var folder_path = encodeURIComponent(path).replace(/'/g,"%27");
		var obj = {files: data.files, can_mount: data.can_mount, os_mount: data.os_mount, no_files: data.no_files,
			can_restore: data.can_restore, server_confirms_restore: server_confirms_restore,
			ses: g.session, clientname: data.clientname,
			clientid: data.clientid, cpath: cp, backuptime: format_unix_timestamp(data.backuptime),
			backupid: data.backupid, path: folder_path, folder_path: folder_path,
			image_backup_info: image_backup_info, mount_failed: data.mount_failed, mount_errmsg: data.mount_errmsg,
			can_compare: data.can_compare ? true : false,
			can_search: data.can_search ? true : false};
			
		if(!data.token_authentication)
		{
			obj.show_client_breadcrumb=true;
		}
			
		if( data.files.length>0
			&& !data.no_zip)
		{
			obj.download_zip=true;
		}
		
		ndata=dustRender("backups_files", obj);
	}
	else if(data.files && data.single_item)
	{
		if(data.path)
		{
			var path=unescapeHTML(data.path);
			
			var cp="";
			var folder_path="";

			var els=path.split("/");
			var curr_path="";
			
			var last_path="";
			for(var i=0;i<els.length-1;++i)
			{
				if(els[i].length>0)
				{
					last_path+="/"+els[i];
				}
			}
			
			if(g.last_browse_backupid)
			{
				if(els.length>1 && (els[1].length>0 || els.length>2))
				{	
					cp+="<a data-browse-backups=\"1\" data-clientid=\""+data.clientid+"\" "+
							" data-browse-backupid=\""+g.last_browse_backupid+"\" href=\"#\">"+format_unix_timestamp(g.last_browse_backuptime)+"</a> > ";
				}
				else
				{
					cp+="<strong>"+format_unix_timestamp(g.last_browse_backuptime)+"</strong>"
				}
			}
			
			for(var i=0;i<els.length;++i)
			{
				if(els[i].length>0)
				{
					curr_path+="/"+els[i];
					if(i+1<els.length)
					{
						folder_path+="/"+els[i];
						var proc = "tabMouseClickFiles";
						if(!g.last_browse_backupid)
						{
							proc = "tabMouseClickFilesAccess";
						}
						cp+="<a data-browse-files=\""+proc+"\" data-clientid=\""+data.clientid+"\" "+
							" data-browse-backupid=\""+g.last_browse_backupid+"\" href=\"#\"" +
							" data-path=\""+(curr_path==""?"/":encodeURIComponent(curr_path).replace(/'/g,"%27"))+"\">"+els[i]+"</a>";
						
						if(i!=0)
						{
							cp+=" > ";
						}
					}
					else
					{
						cp+="<strong>"+els[i]+"</strong>";
					}
				}
			}
		}
		
		var items = [];
		
		var lastitemhash="-";
		var lastitemidx=-1;
		
		for(var i=0;i<data.files.length;++i)
		{
			var obj=data.files[i];
			if(obj.dir)
			{
				obj.size="&nbsp;";
				obj.proc="Files";
				obj.path=encodeURIComponent(path).replace(/'/g,"%27");
			}
			else
			{
				obj.size=format_size(obj.size);				
				obj.proc="FilesDL";
				obj.path=encodeURIComponent(path).replace(/'/g,"%27");
			}
			obj.clientid=data.clientid;
			
			if(obj.creat==0)
			{
				obj.creat="-";
			}
			else
			{
				obj.creat=format_unix_timestamp(obj.creat);
			}
			
			if(obj.mod==0)
			{
				obj.mod="-";
			}
			else
			{	
				obj.mod=format_unix_timestamp(obj.mod);
			}
			
			if(obj.access==0)
			{
				obj.access="-";
			}
			else
			{
				obj.access=format_unix_timestamp(obj.access);
			}
			
			obj.backuptime = format_unix_timestamp(obj.backuptime);
			
			obj.rowspan=1;
			obj.has_version=true;
			obj.version=1;
			
			if(obj.shahash && lastitemhash==obj.shahash)
			{
				items[lastitemidx].rowspan+=1;
				obj.has_version=false;
				obj.version=items[lastitemidx].version;
			}
			else if(obj.shahash)
			{
				lastitemidx=i;
				lastitemhash=obj.shahash;
			}
			
			if(obj.has_version)
			{
				for(var j=0;j<items.length;++j)
				{
					if(items[j].has_version)
					{
						items[j].version+=1;
					}
				}
			}
				
			items.push(obj);
		}
		
		var server_confirms_restore="false";
		if(data.server_confirms_restore)
		{
			server_confirms_restore="true";
		}
		
		var folder_path = encodeURIComponent(folder_path).replace(/'/g,"%27");
		var obj = {items: items, can_restore: data.can_restore, server_confirms_restore: server_confirms_restore,
			ses: g.session, clientname: data.clientname,
			clientid: data.clientid, cpath: cp,
			path: encodeURIComponent(path).replace(/'/g,"%27"), folder_path: folder_path };
			
		if(!data.token_authentication)
		{
			obj.show_client_breadcrumb=true;
		}
		
		ndata=dustRender("backup_item", obj);
	}
	
	if(g.data_f!=ndata)
	{
		destroy_selectpickers();
		$("#data_f").empty();
		I('data_f').innerHTML=ndata;
		dustPost(I('data_f'));
		if(!data.err && data.clients)
		{
			dustPost(I('data_f'), "backups_clients_row");
		}
		else if(!data.errr && data.backups)
		{
			prepareBackupObjPost(I('data_f'));
		}
		$("#data_f").find("a[data-browse-backups='1'").click(function(){
			tabMouseClickBackups(parseInt($(this).data('clientid')), parseInt($(this).data('browse-backupid')) );
			return false;
		});
		$("#data_f").find("a[data-browse-files='tabMouseClickFiles'").click(function(){
			tabMouseClickFiles(parseInt($(this).data('clientid')), parseInt($(this).data('browse-backupid')), $(this).data('path') );
			return false;
		});
		$("#data_f").find("a[data-browse-files='tabMouseClickFilesAccess'").click(function(){
			tabMouseClickFilesAccess(parseInt($(this).data('clientid')), parseInt($(this).data('browse-backupid')), $(this).data('path') );
			return false;
		});
		g.data_f=ndata;
	}
}
function allowNewClient(clientid)
{
	if(confirm(trans("confirm_allow_new_client")))
	{
		show_status1(""+clientid, g.status_action_reset_client_uid);
	}
}
function tabMouseOver(obj)
{
	g.mouse_over_styles=[];
	var idx=0;
	for(var i=0;i<obj.childNodes.length;++i)
	{
		if(obj.childNodes[i].style)
		{
			if(idx>0)
			{
				if(obj.childNodes[i].id!="nomouseover")
				{
					g.mouse_over_styles.push({backgroundColor: obj.childNodes[i].style.backgroundColor, color: obj.childNodes[i].style.color});
					obj.childNodes[i].style.backgroundColor='blue';
					if(obj.childNodes[i].childNodes.length>0 && obj.childNodes[i].childNodes[0].nodeType==3)
					{
						obj.childNodes[i].style.color='white';
					}
				}
			}
			else
			{
				obj.childNodes[i].innerHTML="<img src=\"images/arr.png\" />";
			}
			++idx;
		}
	}
}
function tabMouseOut(obj)
{
	var idx=0;
	var mos=0;
	for(var i=0;i<obj.childNodes.length;++i)
	{
		if(obj.childNodes[i].style)
		{
			if(idx>0)
			{
				if(typeof g.mouse_over_styles[mos]!="undefined")
				{
					obj.childNodes[i].style.backgroundColor=g.mouse_over_styles[mos].backgroundColor;
					obj.childNodes[i].style.color=g.mouse_over_styles[mos].color;
				}
				++mos;
			}
			else
			{
				obj.childNodes[i].innerHTML="&nbsp;";
			}
			++idx;
		}
	}
	if(mos>0)
	{
		g.mouse_over_styles.length=0;
	}
}
function tabMouseClickClients(clientid)
{
	if(!startLoading()) return;
	var t_id = revMapClientId(clientid);
	g.curr_browse_appid = t_id.appid;
	new getJSONSingleApp("backups", "sa=backups&clientid="+t_id.id, show_backups2, t_id.appid);
}
function tabMouseClickClientsNm(clientid)
{
	if(!startLoading()) return;
	new getJSONSingleApp("backups", "sa=backups&clientid="+clientid, show_backups2, g.curr_browse_appid);
}
function tabMouseClickBackups(clientid, backupid)
{
	if(g.no_tab_mouse_click){ g.no_tab_mouse_click=false; return false; }
	if(!startLoading()) return;
	new getJSONSingleApp("backups", "sa=files&clientid="+clientid+"&backupid="+backupid+"&path=%2F", show_backups2, g.curr_browse_appid);
}
function addMountInsecure()
{
	if(g.mount_insecure)
	{
		return "&mount_insecure=1";
	}
	return "";
}
function tabMouseClickProc(clientid, backupid, path, proc)
{
	if(proc=="Files")
	{
		tabMouseClickFiles(clientid, backupid, path);
	}
	else if(proc=="FilesDL")
	{
		tabMouseClickFilesDL(clientid, backupid, path);
	}
	else
	{
		alert("Proc undefined: "+proc);
	}
}
function tabMouseClickFiles(clientid, backupid, path, mount, mount_insecure)
{
	if(!startLoading()) return;
	
	if(mount && typeof mount_insecure !== "undefined" && mount_insecure)
	{
		g.mount_insecure=true;
	}
	else if(mount)
	{
		g.mount_insecure=false;
	}
	
	var add_mount_insecure="";
	if(g.mount_insecure)
	{
		add_mount_insecure="&mount_insecure=1";
	}
	new getJSONSingleApp("backups", "sa=files&clientid="+clientid+"&backupid="+backupid+"&path="+escapePath(path)+(mount?"&mount=1":"")+addMountInsecure(), show_backups2, g.curr_browse_appid);
}
function tabMouseClickPreload(clientid, backupid)
{
	if(!startLoading()) return;
	new getJSONSingleApp("backups", "sa=preload_img&clientid="+clientid+"&backupid="+backupid, tabMouseClickPreloadCb, g.curr_browse_appid);
}
function tabMouseClickPreloadCb(data)
{
	stopLoading();
	if(data.ok)
	{
		alert("Preloading starting successfully");
	}
	else
	{
		if(data.err)
			alert("Error starting preloading: "+data.err);
		else
			alert("Error starting preloading.");
	}
}
function tabMouseClickLinuxImageRestore(clientid, backupid)
{
	if(!startLoading()) return;
	new getJSON("restore_image", "backupid="+backupid, linux_image_restore1);
}
function tabMouseClickFilesDL(clientid, backupid, path)
{	
	var file_url = getURL("backups", "sa=filesdl&clientid="+clientid+"&backupid="+backupid+"&path="+escapePath(path)+addMountInsecure());;
	if(g.curr_browse_appid==g.self_appid)
	{
		openBrowserDownloadUrl(file_url);
	}
	else
	{
		openBrowserDownloadUrl(fixupRemoteUrlWithSlash(g.curr_browse_appid)+file_url);
	}
}
function tabMouseClickProcAccess(clientid, backupid, path, proc)
{
	if(proc=="Files")
	{
		tabMouseClickFilesAccess(clientid, backupid, path);
	}
	else if(proc=="FilesDL")
	{
		tabMouseClickFilesDLAccess(clientid, backupid, path);
	}
	else
	{
		alert("Proc undefined: "+proc);
	}
}
function tabMouseClickFilesAccess(clientid, backupid, path)
{
	if(!startLoading()) return;
	new getJSONSingleApp("backups", "sa=files&clientid="+clientid+"&path="+escapePath(path)+"&is_file=false"+addMountInsecure(), show_backups2, g.curr_browse_appid);
}
function tabMouseClickFilesDLAccess(clientid, backupid, path)
{
	if(!startLoading()) return;
	new getJSONSingleApp("backups", "sa=files&clientid="+clientid+"&path="+escapePath(path)+"&is_file=true"+addMountInsecure(), show_backups2, g.curr_browse_appid);
}
function downloadZIP(clientid, backupid, path)
{
	var file_url = getURL("backups", "sa=zipdl&clientid="+clientid+"&backupid="+backupid+"&path="+escapePath(path)+addMountInsecure());
	if(g.curr_browse_appid==g.self_appid)
	{
		openBrowserDownloadUrl(file_url);
	}
	else
	{
		openBrowserDownloadUrl(fixupRemoteUrlWithSlash(g.curr_browse_appid)+file_url);
	}
}
function restoreFiles(clientid, backupid, path, server_confirms_restore, fn_filter)
{
	if(!startLoading()) return;
	
	if(server_confirms_restore)
	{
		if(!confirm("Are you sure you want to restore the selected files? Existing files will be overwritten. Files created within the selected folder since the backup will be deleted. When in doubt please cancel and run a file backup before proceeding."))
		{
			stopLoading();
			return;
		}
	}
	
	var filter="";
	if(fn_filter)
	{
		filter+="&filter="+encodeURIComponent(escapePath(fn_filter))
	}
	
	g.curr_clientid = clientid;
	g.curr_backupid = backupid;
	g.curr_path = path;
	
	new getJSONSingleApp("backups", "sa=clientdl&clientid="+clientid+"&backupid="+backupid+"&path="+escapePath(path)+filter, restore_callback, g.curr_browse_appid);
}

function restore_callback(data)
{
	stopLoading();
	if(data.err)
	{
		alert("An error occured when starting restore: " + data.err);
	}
	else if(data.wait_key)
	{
		var ndata=dustRender("backup_restore_wait");
		if(g.data_f!=ndata)
		{
			destroy_selectpickers();
			$("#data_f").empty();
			I('data_f').innerHTML=ndata;
			g.data_f=ndata;
		}
		
		new getJSONSingleApp("restore_prepare_wait", "wait_key="+data.wait_key, restore_prepare_wait_callback, g.curr_browse_appid);
	}
}

function restore_prepare_wait_callback(data)
{
	if(!data.wait_key)
	{
		alert("An error occured while waiting for the restore process: "+data.err);
	}
	else
	{
		if(data.completed)
		{
			stopLoading();
			tabMouseClickFiles(g.curr_clientid, g.curr_backupid, g.curr_path);
		}
		else
		{
			new getJSONSingleApp("restore_prepare_wait", "wait_key="+data.wait_key, restore_prepare_wait_callback, g.curr_browse_appid);
		}
	}
}
function convert_interval_to_ms(val, unit)
{
	if(unit=="ms") return val;
	else if(unit=="s") return val*1000;
	else if(unit=="m") return val*1000*60;
	else if(unit=="h") return val*1000*60*60;
	else if(unit=="d") return val*1000*60*60*24;
	else if(unit=="M") return val*1000*60*60*24*30;
	else if(unit=="y") return val*1000*60*60*24*365;
}
function convert_interval_from_ms(val, unit)
{
	if(unit=="ms") return val;
	else if(unit=="s") return val/1000;
	else if(unit=="m") return val/(1000*60);
	else if(unit=="h") return val/(1000*60*60);
	else if(unit=="d") return val/(1000*60*60*24);
	else if(unit=="M") return val/(1000*60*60*24*30);
	else if(unit=="y") return val/(1000*60*60*24*365);
}

function build_alert_params(alert_script)
{
	params = deparam(unescapeHTML(g.last_alert_params));
	
	var script_options = "";
	var params_html = "";
	g.alert_params = [];
	
	for(var i=0;i<g.last_alert_scripts.length;++i)
	{
		var script = g.last_alert_scripts[i];
		var selected="";
		if(script.id==alert_script)
		{
			selected=" selected=\"selected\"";
			
			for(var j=0;j<script.params.length;++j)
			{
				var param = script.params[j];
				var val = param.default_value;
				if(typeof params[param.name] !== "undefined")
				{
					val = params[param.name];
				}
				else
				{
					val = unescapeHTML(val);
				}
				var label = param.label;
				if(param.has_translation==1)
				{
					label = trans(label);
					if(typeof label == "undefined")
					{
						label = param.label;
					}
					param.label = label;
				}
				params_html+="<div class=\"form-group\">"+
					"<label class=\"col-sm-4 control-label\" for=\"alert_name_"+escapeHTML(param.name)+"\">"+escapeHTML(label)+"</label>"+
					"<div class=\"col-sm-6\">";
					
				if(param.type=="str" || param.type=="num" || param.type=="int")
				{
					params_html+="<input type=\"text\" class=\"form-control\" id=\"alert_name_"+escapeHTML(param.name)+"\" value=\""+escapeHTMLDoubleQuote(val)+"\" data-update-alert=\"1\"/>";
				}
				else if(param.type=="choice")
				{
					params_html+="<select class=\"form-control\" id=\"alert_name_"+escapeHTML(param.name)+"\" data-update-alert=\"1\">";
					var toks = param.default_value.split("|");
					for(var k=0;k<toks.length;++k)
					{
						if(toks[k]==params[param.name])
						{
							params_html+="<option selected>"+escapeHTML(toks[k])+"</option>";
						}
						else
						{
							params_html+="<option>"+escapeHTML(toks[k])+"</option>";
						}
					}
					params_html+="</select>";
				}
				else if(param.type=="interval")
				{
					var unit="h";
					var toks = val.split("|");
					var val_ms = val;
					if(toks.length>1)
					{
						unit = toks[1];
						val_ms = toks[0];
					}						
					val = convert_interval_from_ms(val_ms, unit);
					params_html+="<div class=\"input-group\"><input type=\"text\" class=\"form-control\" id=\"alert_name_"+escapeHTML(param.name)+"\" value=\""+val+"\" data-update-alert=\"1\"/>";
					params_html+="<input type=\"hidden\" class=\"form-control\" id=\"alert_name_"+escapeHTML(param.name)+"_val_ms\" value=\""+escapeHTMLDoubleQuote(val_ms)+"\"/>";
					params_html+="<div class=\"input-group-addon\">";
					var units=["ms", "s", "m", "h", "d", "M", "y"];
					var units_trans=["milliseconds", "seconds", "minutes", "hours", "days", "months", "years"];
					params_html+="<select id=\"alert_name_"+escapeHTML(param.name)+"_interval_unit\" data-update-alert-unit=\""+escapeHTML(param.name)+"\">";
					for(var k=0;k<units.length;++k)
					{
						var unit_name = trans("interval_"+units_trans[k]);
						if(typeof unit_name === "undefined")
						{
							unit_name = units_trans[k];
						}
						if(units[k]==unit)
						{
							params_html+="<option value=\""+units[k]+"\" selected>"+escapeHTML(unit_name)+"</option>";
						}
						else
						{
							params_html+="<option value=\""+units[k]+"\">"+escapeHTML(unit_name)+"</option>";
						}
					}
					params_html+="</select></div></div>";
				}
				else
				{
					var checked="";
					if(val!="0")
					{
						checked="checked=\"checked\"";
					}
					params_html+="<label><input type=\"checkbox\" class=\"form-control\" id=\"alert_name_"+escapeHTML(param.name)+"\" "+checked+" data-update-alert=\"1\" class=\"urbackup_auto_width\"/></label>";
				}
				
				params_html+="</div></div>";
					
				g.alert_params.push(param);
			}
		}
		script_options += "<option value=\""+script.id+"\""+selected+">"+escapeHTML(script.name)+"</option>";
	}
	
	return {"options": script_options, "params": params_html};
}
function build_alert_params_post(elem)
{
	$(elem).find("[data-update-alert='1']").change(function(evt){ 
		update_alert_params();
		return false;
	});
	$(elem).find("select[data-update-alert-unit]").change(function(evt){ 
		update_alert_unit($(this).data('update-alert-unit'));
		return false;
	});
}
function update_alert_params(nochange)
{
	var p = {};
	for(var i=0;i<g.alert_params.length;++i)
	{
		if(I("alert_name_"+g.alert_params[i].name))
		{
			if(I("alert_name_"+g.alert_params[i].name).type=="checkbox")
			{
				p[g.alert_params[i].name] = I("alert_name_"+g.alert_params[i].name).checked ? "1" : "0";
			}
			else if(I("alert_name_"+g.alert_params[i].name+"_interval_unit"))
			{
				var val = I("alert_name_"+g.alert_params[i].name).value;
				var unit = $("#alert_name_"+g.alert_params[i].name+"_interval_unit").val();
				var val_ms = convert_interval_to_ms(val, unit);
				p[g.alert_params[i].name] = val_ms + "|" + unit;
				I("alert_name_"+g.alert_params[i].name+"_val_ms").value = val_ms;
			}
			else
			{
				p[g.alert_params[i].name] = $("#alert_name_"+g.alert_params[i].name).val();
			}
		}
	}
	g.alert_params = $.param(p);
	if(!nochange)
		settingChangeKey("alert_params");
}
function update_alert_unit(name)
{
	var val_ms = I("alert_name_"+name+"_val_ms").value;
	var unit = $("#alert_name_"+name+"_interval_unit").val();
	I("alert_name_"+name).value=convert_interval_from_ms(val_ms, unit);
	update_alert_params();
}
function validate_alert_params()
{
	var p = {};
	for(var i=0;i<g.alert_params.length;++i)
	{
		if(I("alert_name_"+g.alert_params[i].name))
		{
			if(I("alert_name_"+g.alert_params[i].name).type!="checkbox")
			{
				var type = g.alert_params[i].type;
				if(type=="int" || type=="interval")
				{
					if(!validate_text_int(["alert_name_"+g.alert_params[i].name], [g.alert_params[i].label]))
						return false;						
				}
				else if(type=="num")
				{
					if(!validate_text_float(["alert_name_"+g.alert_params[i].name], [g.alert_params[i].label]))
						return false;
				}
			}
		}
	}
	
	return true;
}
function show_settings1(appid)
{
	if(!startLoading()) return;
	clearTimeout(g.refresh_timeout);
	g.refresh_timeout=-1;
	if(typeof appid=="undefined" || appid==null || appid=="")
	{
		g.settings_selected_app = g.self_appid;
	}
	else
	{
		g.settings_selected_app = appid;
	}
	new getJSONSingleApp("settings", "", show_settings2, g.settings_selected_app);
	
	g.main_nav_pos=1;
	g.settings_nav_pos=-1;
	build_main_nav();
	I('nav_pos').innerHTML="";
}
function getVal(val)
{
	if(typeof val.use=="undefined")
	{
		if(typeof val.value!="undefined")
			return val.value;

		if(typeof val!="object")
			return val;
		
		return "";
	}

	if(val.use==1)
	{
		return val.value_group;
	}
	else if(val.use==2)
	{
		return val.value;
	}
	else if(val.use==4)
	{
		return val.value_client;
	}
	else
	{
		return val.value;
	}
}
function getCurrentSettings(settings)
{
	var new_settings = {};
	for (var key in settings)
	{
		if (!settings.hasOwnProperty(key))
		{
			continue;
		}

		if(key=="alert_scripts")
		{
			new_settings[key]=settings[key];
			continue;	
		}

		var val = getVal(settings[key]);

		if(typeof val == "boolean")
		{
			val = getCheckboxValue(val);
		}

		new_settings[key]=val;
	}
	return new_settings;
}
function unescapeCurrentSettings(settings)
{
	for (var key in settings) {
		if (!settings.hasOwnProperty(key)) {
			continue;
		}

		var setting = settings[key];

		if(typeof setting!="object")
			continue;

		if(typeof setting.value == "string")
			setting.value = unescapeHTML(setting.value);
		if(typeof setting.value_client == "string")
			setting.value_client = unescapeHTML(setting.value_client);
		if(typeof setting.value_group == "string")
			setting.value_group = unescapeHTML(setting.value_group);
	}
}
function settingSwitchReset(key)
{
	var use = g.curr_settings[key].use;
	if(use==1)
		use=2;
	else if(use==2)
		use=4;
	else if(use==4)
		use=3;
	else if(use==3)
		use=1;

	if( (g.curr_settings_type==0 || g.curr_settings_type==1) && use!=1 && use!=2)
		use=1;

	g.curr_settings[key].use=use;

	for(var i=0;i<g.settings_list.length;++i)
	{
		var lkey = g.settings_list[i];
		var lval = g.curr_settings[lkey];
	
		if(typeof lval=="undefined")
			continue;
		
		if(typeof lval.use=="undefined")
			continue

		luse = fixupUse(lkey, use);
		
		if(luse==1)
		{
			if(typeof g.curr_settings[lkey].orig_html!="undefined")
			{
				I(lkey+"_div").innerHTML = lval.orig_html;
			}
		}

		if(luse==2 &&
			typeof lval.value == "undefined")
		{
			lval.value = getVal(g.curr_settings[lkey])
		}

		lval.use = luse;
	}

	renderSettingSwitchAll();
}
function fixupUse(key, use)
{
	if($.inArray(key, g.client_settings_list)==-1
		&& use==4 && $.inArray(key, g.mergable_settings_list)!=-1)
		use=3;
	else if($.inArray(key, g.client_settings_list)==-1
		&& use>2)
		use=1;
	if($.inArray(key, g.mergable_settings_list)==-1
		&& (use==3 || use>4))
		use=1;

	if( (g.curr_settings_type==0 || g.curr_settings_type==1) && use!=1 && use!=2)
		use=1;

	return use;
}
function settingSwitch()
{
	var key = $(this).attr("id");

	if(key.indexOf("_btn")==key.length-4)
	{
		key = key.substr(0, key.length-4);
	}

	if(key=="backup_window")
		key="backup_window_incr_file";

	if(key=="reset")
	{
		settingSwitchReset(key);
		return;
	}

	var use = g.curr_settings[key].use;

	if(use==1)
		use=2;
	else if(use==2)
		use=4;
	else if(use==4)
		use=3;
	else
	{
		if(typeof g.curr_settings[key].orig_html!="undefined")
		{
			I(key+"_div").innerHTML = g.curr_settings[key].orig_html;
		}
		use=1;
	}

	use = fixupUse(key, use);

	if(use==2 &&
		typeof g.curr_settings[key].value == "undefined")
	{
		g.curr_settings[key].value = getVal(g.curr_settings[key])
	}

	g.curr_settings[key].use=use;

	renderSettingSwitch(key);

	if(!I(key+"_group"))
	{
		var val = getVal(g.curr_settings[key]);

		if(typeof val == "boolean")
		{
			I(key).checked = val;
		}
		else
		{
			if(key=="archive")
			{
				renderArchiveSettings(g.curr_settings_type==0 || g.curr_settings_type == 1);
			}
			else
			{
				I(key).value = renderSettingValue(key, val);
			}

			if(key=="alert_script")
			{
				updateAlertScriptParams();
			}

			if(I(key+"_disable"))
			{
				I(key+"_disable").checked=false;
				settingsCheckboxHandle(key);
			}
		}
	}
	else
	{
		I(key).value = g.curr_settings[key].value;

		if(typeof g.curr_settings[key].value_client != "undefined")
			I(key+"_client").value = g.curr_settings[key].value_client;
			
		I(key+"_group").value = g.curr_settings[key].value_group;
	}
}
function renderSettingValue(key, val)
{
	if(key=="update_freq_incr") return multiplyTimeSpan(val, 1/(60.0*60.0));
	if(key=="update_freq_full") return multiplyTimeSpan(val, 1/(60.0*60.0*24.0));
	if(key=="update_freq_image_incr") return multiplyTimeSpan(val, 1/(60.0*60.0*24.0));
	if(key=="update_freq_image_full") return multiplyTimeSpan(val, 1/(60.0*60.0*24.0));
	if(key=="startup_backup_delay") return val/60;
	if(key=="local_speed" || key=="internet_speed"
		|| key=="global_local_speed" || key=="global_internet_speed")
	{
		if(val=="0" || val=="-1") return "-";
		var mult;
		if(key=="local_speed") mult=(1024*1024)/8;
		if(key=="internet_speed") mult=(1024)/8;
		if(key=="global_local_speed") mult=(1024*1024)/8;
		if(key=="global_internet_speed") mult=(1024)/8;
		return multiplyTimeSpan(val, 1/mult, true);
	}

	if(key=="file_hash_collect_cachesize") return val/1024;
	if(key=="update_stats_cachesize") return val/1024;
	if(key=="internet_file_dataplan_limit") return val/(1024*1024);
	if(key=="internet_image_dataplan_limit") return val/(1024*1024);
	
	return val;
}
function settingChangeKey(key)
{
	if(key=="backup_window")
		key="backup_window_incr_file";

	var use = g.curr_settings[key].use;

	if(use==1 || use==4)
	{
		use=2;
		g.curr_settings[key].use = use;
		renderSettingSwitch(key);
	}

	if(typeof use=="undefined"
		|| (use&2)>0)
	{
		if(typeof use=="undefined")
		{
			g.curr_settings[key] = {use: 2, value: g.curr_settings[key]};
		}

		if(key=="alert_params")
		{
			g.curr_settings[key].value = g.alert_params;
		}
		else if($("#"+key).attr("type")=="checkbox")
		{
			g.curr_settings[key].value=I(key).checked ? "true" : "false";
		}
		else
		{
			g.curr_settings[key].value = getParValue(key, I(key).value);
		}
		
		if(I(key+"_disable")
			&& I(key+"_disable").checked)
		{
			g.curr_settings[key].value = makeTimeSpanNegative(g.curr_settings[key].value);
		}
	}
}
function settingChange(p_key)
{
	key = $(this).attr("id");
	
	settingChangeKey(key);
}

function getResetVal(settings)
{
	var use = 0;
	for (var key in settings) {
		if (!settings.hasOwnProperty(key)) {
			continue;
		}

		var setting = settings[key];

		if(typeof setting!="object")
			continue;

		use |= setting.use;
	}

	if(use!=1 && use!=2 && use!=4)
		use = 1;

	return {"use": use,
		value: "",
		value_client: "",
		value_group: ""};
}

function renderSettingSwitch(key)
{
	var val;
	if(key=="reset")
	{
		if(typeof g.curr_settings["reset"] === "undefined")
		{
			val = getResetVal(g.curr_settings);
			g.curr_settings["reset"] = val;
		}
		else
		{
			val = g.curr_settings[key];
		}
	}
	else if(key=="backup_window")
	{
		val = g.curr_settings["backup_window_incr_file"];
	}
	else
	{
		val = g.curr_settings[key];
	}

	if(typeof val=="undefined")
		return;
		
	if(typeof val.use=="undefined")
	{
		$("#"+key).change(settingChange);
		$("#"+key).keyup(settingChange);
		return;
	}

	if(I(key+"_sw"))
	{
		if(val.use==1)
		{
			I(key+"_sw").innerHTML = '<button type="button" class="btn btn-default" title="Using setting from group" id="'+key+"_btn"+'">'+
						'<span class="glyphicon glyphicon-lock" aria-hidden="true"></span>&nbsp;'+
						'</button>';
		}
		else if(val.use==2)
		{
			I(key+"_sw").innerHTML = '<button type="button" class="btn btn-default" title="Using setting configured here" id="'+key+"_btn"+'">'+
						'<span class="glyphicon glyphicon-home" aria-hidden="true"></span>&nbsp;'+
						'</button>';
		}
		else if(val.use==4)
		{
			I(key+"_sw").innerHTML = '<button type="button" class="btn btn-default" title="Using setting configured on client" id="'+key+"_btn"+'">'+
						'<span class="glyphicon glyphicon-road" aria-hidden="true"></span>&nbsp;'+
						'</button>';
		}
		else
		{
			I(key+"_sw").innerHTML = '<button type="button" class="btn btn-default" title="Using combination of setting sources" id="'+key+"_btn"+'">'+
						'<span class="glyphicon glyphicon-duplicate" aria-hidden="true"></span>&nbsp;'+
						'</button>';
			renderMergeSetting(key);
		}
	}

	if(I(key+"_btn"))
		$("#"+key+"_btn").click(settingSwitch);
	
	$("#"+key).change(settingChange);
	$("#"+key).keyup(settingChange);
}
function mergeSettingSwitch()
{
	var key = $(this).attr("id");

	var idx = key.indexOf("_check_");
	key = key.substr(0, idx);
	
	if(!$(this).checked)
	{
		var ids = [key+"_check_group",
					key+"_check_home",
					key+"_check_client"];

		var num_checked=0;

		for(var i=0;i<ids.length;++i)
		{
			if(I(ids[i]) && I(ids[i]).checked)
				num_checked+=1;
		}

		if(num_checked==1)
		{
			for(var i=0;i<ids.length;++i)
			{
				if(!I(ids[i]).checked
					&& I(ids[i]).checked
					&& ids[i]!=$(this).attr("id"))
				{
					$("#"+ids[i]).prop("checked", true).change();
				}
			}
		}
	}

	mergeSettingUpdateUse(key);
}
function mergeSettingUpdateUse(key)
{
	var use=0;
	if(I(key+"_check_group").checked)
	{
		use=use|1;
	}
	if(I(key+"_check_home").checked)
	{
		use=use|2;
	}
	if(I(key+"_check_client") &&
		I(key+"_check_client").checked)
	{
		use=use|4;
	}
	g.curr_settings[key].use=use;
}
function renderMergeSetting(key)
{
	if(key=="archive" || key=="reset")
		return;

	var val = g.curr_settings[key];

	var c='<div class="input-group">';
	c+='<input type="text" class="form-control" id="'+key+'_group" value="'+escapeHTMLDoubleQuote(val.value_group)+'" disabled="disabled"/>';
	c+='<div class="checkbox input-group-addon"><input class="input-group-addon" type="checkbox" id="'+key+'_check_group" checked data-toggle="toggle" data-size="mini" data-on="<span class=\'move_left glyphicon glyphicon-lock\'></span> Group" data-off="<span class=\'glyphicon glyphicon-remove\'></span> Group"></input></div>';
	c+='</div>';

	c+='<div class="input-group">';
	c+='<input type="text" class="form-control" id="'+key+'" value="'+escapeHTMLDoubleQuote(val.value)+'"/>';
	c+='<div class="checkbox input-group-addon"><input class="input-group-addon" type="checkbox" id="'+key+'_check_home" checked data-toggle="toggle" data-size="mini" data-on="<span class=\'glyphicon glyphicon-home move_left\'></span> Here" data-off="<span class=\'glyphicon glyphicon-remove\'></span> Here"></input></div>';
	c+='</div>';

	if(typeof val.value_client != "undefined")
	{
		c+='<div class="input-group">';
		c+='<input type="text" class="form-control" id="'+key+'_client" value="'+escapeHTMLDoubleQuote(val.value_client)+'" disabled="disabled"/>';
		c+='<div class="checkbox input-group-addon"><input class="input-group-addon" type="checkbox" id="'+key+'_check_client" checked data-toggle="toggle" data-size="mini" data-on="<span class=\'glyphicon glyphicon-road move_left\'></span> Client" data-off="<span class=\'glyphicon glyphicon-remove\'></span> Client"></input></div>';
		c+='</div>';
	}
	/*
	c+='<div class="input-group">';
	c+='<input type="checkbox" id="'+key+'_check_home" checked data-toggle="toggle" data-on="<i class=\'glyphicon glyphicon-home\'></i> Here" data-off="<i class=\'glyphicon glyphicon-remove\'></i> Ignore"></input>';
	c+='<input type="text" class="form-control" id="exclude_files" value="'+escapeHTMLDoubleQuote(val.value_group)+'"/>';
	c+='</div>';

	c+='<div class="input-group">';
	c+='<input type="checkbox" id="'+key+'_check_client" checked data-toggle="toggle" data-on="<i class=\'glyphicon glyphicon-home\'></i> Client" data-off="<i class=\'glyphicon glyphicon-remove\'></i> Ignore"></input>';
	c+='<input type="text" class="form-control" id="exclude_files" value="'+escapeHTMLDoubleQuote(val.value_group)+'" disabled="disabled"/>';
	c+='</div>';*/

	/*var c='<div class="col-sm-6">'+
	'<div class="input-group">'+
	'	<input type="text" class="form-control" id="exclude_files" value="{exclude_files|s}"/>'+
	'	<div class="input-group-addon"><a href="help.htm#exclude_files" target="_blank">?</a></div>'+
	'</div>'+
	'</div>';*/

	g.curr_settings[key].orig_html=I(key+"_div").innerHTML;
	I(key+"_div").innerHTML=c;

	renderMergeSettingSwitch(key);

	$("#"+key+"_check_group").change(mergeSettingSwitch);
	$("#"+key+"_check_home").change(mergeSettingSwitch);
	if(typeof val.value_client != "undefined")
	{
		$("#"+key+"_check_client").change(mergeSettingSwitch);
	}

	$("#"+key+"_check_group").bootstrapToggle();
	$("#"+key+"_check_home").bootstrapToggle();
	if(typeof val.value_client != "undefined")
	{
		$("#"+key+"_check_client").bootstrapToggle();
	}
}
function renderMergeSettingSwitch(key)
{
	var val = g.curr_settings[key];

	var use = val.use;

	if(use&1)
	{
		I(key+"_check_group").checked=true;
	}
	else
	{
		I(key+"_check_group").checked=false;
	}

	if(use&2)
	{
		I(key+"_check_home").checked=true;
	}
	else
	{
		I(key+"_check_home").checked=false;
	}

	if(I(key+"_check_client"))
	{
		if(use&4)
		{
			I(key+"_check_client").checked=true;
		}
		else
		{
			I(key+"_check_client").checked=false;
		}
	}
}
function renderSettingSwitchAll()
{
	for(var i=0;i<g.settings_list.length;++i)
	{
		renderSettingSwitch(g.settings_list[i]);
	}

	if(I("backup_window_sw"))
	{
		renderSettingSwitch("backup_window");
	}

	if(I("reset_sw"))
	{
		renderSettingSwitch("reset");
	}
	{
		renderSettingSwitch("reset");
	}
}
function update_nav_bar(nav, data)
{
	if(typeof nav == "undefined")
		return;

	var n="";
	var idx=0;
	g.user_nav_pos_offset=0;
	g.group_nav_pos_offset=0;
	g.mail_nav_pos_offset=0;
	g.firmware_pos_offset=0;
	g.monitoring_pos_offset=0;
	g.ldap_nav_pos_offset=0;
	g.networking_pos_offset=0;
	g.storage_pos_offset=0;

	if(g.remote_apps.length>1)
	{
		n+="<span><label for=\"apppicker\" class=\"control-label\" class=\"urbackup_navbar_margin\">Appliance:</label>&nbsp;&nbsp;";
		n+="<select class=\"urbackup_navbar_margin2\" id=\"apppicker\" class=\"selectpicker\" data-live-search=\"true\"></span>";
		for(var i=0;i<g.remote_apps.length;++i)
		{		
			var selected = "";
			if(g.settings_selected_app==g.self_appid)
			{
				selected = "selected=\"selected\"";
			}
			n+="<option value=\""+g.remote_apps[i].id+ "\" "+selected+">" + escapeHTML(g.remote_apps[i].name)+ "</option>";
		}
		n+="</select>";
	}

	n+="<ul class=\"nav nav-tabs\" role=\"tablist\">";

	if(nav.general)
	{
		if(g.settings_nav_pos==-1) g.settings_nav_pos=0;
			
		if(g.settings_nav_pos==idx)
		{
			n+="<li class=\"active\"><a id='navbar_general_settings' href=\"#\">"+trans("general_settings")+"</a></li>";
		}
		else
		{
			n+="<li><a id='navbar_general_settings' href=\"#\">"+trans("general_settings")+"</a></li>";
		}
			
		++idx;
		++g.user_nav_pos_offset;
		++g.group_nav_pos_offset;
		++g.mail_nav_pos_offset;
		++g.ldap_nav_pos_offset;
		++g.internet_nav_pos_offset;
		++g.firmware_pos_offset;
		++g.monitoring_pos_offset;
		++g.networking_pos_offset;
		++g.storage_pos_offset;
	}
	if(nav.mail)
	{
		if(g.settings_nav_pos==-1) g.settings_nav_pos=0;
		
		if(g.settings_nav_pos==idx)
		{
			n+="<li class=\"active\"><a id='navbar_mail_settings' href=\"#\">"+trans("mail_settings")+"</a></li>";
		}
		else
		{
			n+="<li><a id='navbar_mail_settings' href=\"#\">"+trans("mail_settings")+"</a></li>";
		}

		++idx;
		++g.user_nav_pos_offset;
		++g.group_nav_pos_offset;
		++g.ldap_nav_pos_offset;
		++g.internet_nav_pos_offset;
		++g.firmware_pos_offset;
		++g.monitoring_pos_offset;
		++g.networking_pos_offset;
		++g.storage_pos_offset;
	}
	if(nav.ldap)
	{
		if(g.settings_nav_pos==-1) g.settings_nav_pos=0;
		
		if(g.settings_nav_pos==idx)
		{
			n+="<li class=\"active\"><a id='navbar_ldap_settings' href=\"#\">"+trans("ldap_settings")+"</a></li>";
		}
		else
		{
			n+="<li><a id='navbar_ldap_settings' href=\"#\">"+trans("ldap_settings")+"</a></li>";
		}

		++idx;
		++g.user_nav_pos_offset;
		++g.group_nav_pos_offset;
		++g.internet_nav_pos_offset;
		++g.firmware_pos_offset;
		++g.monitoring_pos_offset;
		++g.networking_pos_offset;
		++g.storage_pos_offset;
	}
	if(nav.users)
	{
		if(g.settings_nav_pos==-1) g.settings_nav_pos=0;
		
		if(g.settings_nav_pos==idx)
		{
			n+="<li class=\"active\"><a id='navbar_user_settings' href=\"#\">"+trans("users")+"</a></li>";
		}
		else
		{
			n+="<li><a id='navbar_user_settings' href=\"#\">"+trans("users")+"</a></li>";
		}

		++idx;
		++g.user_nav_pos_offset;
		++g.firmware_pos_offset;
		++g.group_nav_pos_offset;
		++g.monitoring_pos_offset;
		++g.networking_pos_offset;
		++g.storage_pos_offset;
	}
	else
	{
		if(g.settings_nav_pos==-1)
		{
			if(nav.clients && nav.clients.length>0)
			{
				g.settings_nav_pos=1;
			}
			else
			{
				g.settings_nav_pos=0;
				go_to_change_pw=true;
			}
		}
		
		if(g.settings_nav_pos==idx)
		{
			n+="<li id=\"change_pw_el\" class=\"active\"><a id='navbar_change_pw' href=\"#\">"+trans("security")+"</a></li>";
		}
		else
		{
			n+="<li id=\"change_pw_el\"><a id='navbar_change_pw' href=\"#\">"+trans("security")+"</a></li>";
		}

		++idx;
		++g.user_nav_pos_offset;
		++g.firmware_pos_offset;
		++g.group_nav_pos_offset;
		++g.monitoring_pos_offset;
		++g.networking_pos_offset;
		++g.storage_pos_offset;
	}
	if(nav.admin)
	{		
		if(g.settings_nav_pos==idx)
		{
			n+="<li id=\"firmware_settings_el\" class=\"active\"><a id='navbar_firmware_settings' href=\"#\">System</a></li>";
		}
		else
		{
			n+="<li id=\"firmware_settings_el\"><a id='navbar_firmware_settings' href=\"#\">System</a></li>";
		}

		++idx;		
		++g.monitoring_pos_offset;
		++g.networking_pos_offset;
		++g.storage_pos_offset;
		
		if(g.has_account)
		{
			if(g.settings_nav_pos==idx)
			{
				n+="<li id=\"monitoring_settings_el\" class=\"active\"><a id='navbar_monitoring_settings' href=\"#\">Monitoring</a></li>";
			}
			else
			{
				n+="<li id=\"monitoring_settings_el\"><a id='navbar_monitoring_settings' href=\"#\">Monitoring</a></li>";
			}
			
			++idx;		
			++g.networking_pos_offset;
			++g.storage_pos_offset;
		}
				
		if(g.settings_nav_pos==idx)
		{
			n+="<li id=\"networking_settings_el\" class=\"active\"><a id='navbar_networking_settings' href=\"#\">Networking</a></li>";
		}
		else
		{
			n+="<li id=\"networking_settings_el\"><a id='navbar_networking_settings' href=\"#\">Networking</a></li>";
		}
		
		++idx;
		++g.storage_pos_offset;
		
	
		if(g.settings_nav_pos==idx)
		{
			n+="<li id=\"storage_settings_el\" class=\"active\"><a id='navbar_storage_settings' href=\"#\">Storage</a></li>";
		}
		else
		{
			n+="<li id=\"storage_settings_el\"><a id='navbar_storage_settings' href=\"#\">Storage</a></li>";
		}
		
		++idx;
	}
	if(nav.clients)
	{
		if(g.settings_nav_pos==-1) g.settings_nav_pos=0;
		
		g.settings_clients=nav.clients;
	
		if(nav.clients.length>1)
		{
				n+="<span class=\"urbackup_span_wdith10\">&nbsp;</span>";
			n+="<select id=\"clientpicker\" class=\"selectpicker\" data-live-search=\"true\" data-container=\"body\" title=\""+trans("clients")+"\">";
				var groupid=-1;
			for(var i=0;i<nav.clients.length;++i)
			{		
					if(nav.clients[i].group!=groupid)
					{
						if(groupid!=-1)
						{
							n+="</optgroup>";
						}
						groupid = nav.clients[i].group;
						var groupname = nav.clients[i].groupname;
						if(groupid==0)
						{
							groupname = trans("default_group");
						}
						n+="<optgroup label=\""+groupname+"\">";
					}
					var selected = "";
					if(typeof data !== "undefined"
						&& data.sa && data.sa=="clientsettings")
					{
						if( data.settings.clientid
							&& data.settings.clientid==nav.clients[i].id)
						{
							selected = "selected=\"selected\"";
						}
					}
					else if(g.settings_nav_pos==idx)
					{
						selected = "selected=\"selected\"";
					}
					
					var override="";
					if(nav.clients[i].override)
					{
						override="*";
					}
					
					n+="<option value=\""+nav.clients[i].id + ";" + idx + "\" "+selected+">" + nav.clients[i].name + override + "</option>";
					++idx;
					++g.group_nav_pos_offset;
				}
				if(groupid!=-1)
				{
					n+="</optgroup>";
			}
			n+="</select>";
		}
		else if(nav.clients.length>0)
		{
			if(g.settings_nav_pos==idx)
			{
				n+="<li id=\"client_settings_el\" class=\"active\"><a data-id=\""+nav.clients[0].id+
						" data-idx=\""+idx+"\" data-client-setting=\"1\" href=\"#\">"+trans("client_settings")+"</a></li>";
			}
			else
			{
				n+="<li id=\"client_settings_el\"><a data-id=\""+nav.clients[0].id+
						" data-idx=\""+idx+"\" data-client-setting=\"1\" href=\"#\">"+trans("client_settings")+"</a></li>";
			}
			++idx;
			++g.group_nav_pos_offset;
		}
	}
	if(nav.groups
		&& (nav.groups.length>1
		   || (typeof data !== "undefined" && data.added_group) ) )
	{
		if(g.settings_nav_pos==-1) g.settings_nav_pos=0;
		
		if(typeof data !== "undefined"
			&& data.added_group)
		{
			nav.groups.push(data.added_group);
		}
		
		g.settings_groups = nav.groups;
		
		n+="<span class=\"urbackup_span_wdith10\">&nbsp;</span>";
		n+="<select id=\"grouppicker\" class=\"selectpicker urbackup_select_margin10\" data-live-search=\"true\" data-container=\"body\" title=\""+trans("filter_group")+"\">";
		for(var i=0;i<nav.groups.length;++i)
		{		
			var selected = "";
			if(g.settings_nav_pos==idx)
			{
				selected = "selected=\"selected\"";
			}
			if(nav.groups[i].id==0)
			{
				nav.groups[i].name = trans("default_group");
				continue;
			}
			n+="<option value=\""+nav.groups[i].id + ";" + idx + "\" "+selected+">" + nav.groups[i].name + "</option>";
			++idx;
		}
		n+="</select>";
	}
	if(nav.groupmod)
	{
		if(typeof data !== "undefined"
			&& data.sa && data.sa=="clientsettings"
			&& nav.groups && nav.groups.length>1)
		{
			data.settings.groupmod=true;
		}
		n+="<a class=\"btn btn-default urbackup_link_margin10\" id='navbar_add_group' href=\"#\"><span class=\"glyphicon glyphicon-plus\" aria-hidden=\"true\"></span> "+trans("add_new_group")+"</a>";
	}

	I('nav_pos').innerHTML=n;

	$("#navbar_general_settings").click(function() {
		generalSettings();
		return false;
	});

	$("#navbar_mail_settings").click(function() {
		mailSettings();
		return false;
	});

	$("#navbar_ldap_settings").click(function() {
		ldapSettings();
		return false;
	});

	$("#navbar_user_settings").click(function() {
		userSettings();
		return false;
	});

	$("#navbar_change_pw").click(function() {
		changePW(this);
		return false;
	});

	$("#navbar_firmware_settings").click(function() {
		firmwareSettings();
		return false;
	});

	$("#navbar_monitoring_settings").click(function() {
		monitoringSettings();
		return false;
	});

	$("#navbar_networking_settings").click(function() {
		networkingSettings();
		return false;
	});

	$("#navbar_storage_settings").click(function() {
		storageSettings();
		return false;
	});

	$("#navbar_add_group").click(function() {
		addNewGroup1();
		return false;
	});
	
	$("a[data-client-setting='1']").click(function() {
		clientSettings(parseInt($(this).data('id')), parseInt($(this).data('idx')));
		return false;
	});
		
	$("#clientpicker").change(function() {
		var vals = I("clientpicker")[I("clientpicker").selectedIndex].value.split(";");
		if(vals[0]=="n")
		{
			return;
		}
		clientSettings(vals[0], vals[1]);
	});
	
	setup_selectpicker('#clientpicker', {
	  style: 'btn',
	});
		
	if(I('grouppicker'))
	{
		$("#grouppicker").change(function() {
			var vals = I("grouppicker")[I("grouppicker").selectedIndex].value.split(";");
			if(vals[0]=="n")
			{
				return;
			}
			groupSettings(vals[0], vals[1]);
		});
		
		$('#grouppicker').selectpicker({
		  style: 'btn'
		});
	}

	if(I("apppicker"))
	{
		setup_selectpicker("#apppicker");

		$("#apppicker").change(function() {
			g.settings_selected_app = I("apppicker").value;
			show_settings1(g.settings_selected_app);
		})
	}
}

function show_settings2(data)
{
	var go_to_change_pw=false;
	stopLoading();
	destroy_selectpickers();
	if(data.navitems)
	{
		update_nav_bar(data.navitems, data);
		g.last_nav_info = data.navitems;
	}
	
	var ndata="";
	var group_membership_selectpicker=false;
	var tabber_set_idx=false;
	var is_group=false;
	var main_templ="";
	if(data.sa)
	{
		if(data.sa=="general")
		{
			g.active_pane_name = "#file_backups";
			g.curr_settings = data.settings;
			data.settings = getCurrentSettings(data.settings);
			data.settings.backup_dirs_optional=getCheckboxValue(data.settings.backup_dirs_optional);
			var internet_server = unescapeHTML(data.settings.internet_server);
			if(internet_server.indexOf("ws://")!=0 &&
				internet_server.indexOf("wss://")!=0 &&
				internet_server.indexOf("urbackup://")!=0 )
			{
				if(data.settings.internet_server_port==55415)
				{
					internet_server = "urbackup://" + internet_server;
				}
				else
				{
					internet_server = "urbackup://" + internet_server + ":" + data.settings.internet_server_port;
				}
			}

			data.settings.internet_server = internet_server;
			
			var transfer_mode_params1=["raw", "hashed"];
			var transfer_mode_params2=["raw", "hashed", "blockhash"];
			
			data.settings=addSelectSelected(transfer_mode_params1, "local_full_file_transfer_mode", data.settings);
			data.settings=addSelectSelected(transfer_mode_params1, "internet_full_file_transfer_mode", data.settings);
			data.settings=addSelectSelected(transfer_mode_params2, "local_incr_file_transfer_mode", data.settings);
			data.settings=addSelectSelected(transfer_mode_params2, "internet_incr_file_transfer_mode", data.settings);
			data.settings=addSelectSelected(transfer_mode_params1, "local_image_transfer_mode", data.settings);
			data.settings=addSelectSelected(transfer_mode_params1, "internet_image_transfer_mode", data.settings);
			data.settings=addSelectSelected([0, 1, 2], "create_search_db", data.settings);
			
			var incr_image_style_params=["to-full", "to-last"];
			data.settings=addSelectSelected(incr_image_style_params, "local_incr_image_style", data.settings);
			data.settings=addSelectSelected(incr_image_style_params, "internet_incr_image_style", data.settings);
			
			var full_image_style_params=["full", "synthetic"];
			data.settings=addSelectSelected(full_image_style_params, "local_full_image_style", data.settings);
			data.settings=addSelectSelected(full_image_style_params, "internet_full_image_style", data.settings);
			
			var image_file_format_params = ["vhdz", "vhd", "vhdxz", "vhdx"];
			if(data.cowraw_available)
			{
				data.settings.cowraw_available=true;
				image_file_format_params.push("cowraw");
			}
			data.settings=addSelectSelected(image_file_format_params, "image_file_format", data.settings);
			
			data.settings.update_freq_incr=multiplyTimeSpan(data.settings.update_freq_incr, 1/(60.0*60.0));
			data.settings.update_freq_full=multiplyTimeSpan(data.settings.update_freq_full, 1/(60.0*60.0*24.0));
			data.settings.update_freq_image_incr=multiplyTimeSpan(data.settings.update_freq_image_incr, 1/(60.0*60.0*24.0));
			data.settings.update_freq_image_full=multiplyTimeSpan(data.settings.update_freq_image_full, 1/(60.0*60.0*24.0));
			data.settings.startup_backup_delay/=60;
			data.settings.sync_throttle_timeoutms/=(60*1000);
			
			if(data.settings.local_speed=="0" || data.settings.local_speed=="-1") data.settings.local_speed="-";
			else data.settings.local_speed=multiplyTimeSpan(data.settings.local_speed, 1/((1024*1024)/8), true);
			if(data.settings.internet_speed=="0" || data.settings.internet_speed=="-1") data.settings.internet_speed="-";
			else data.settings.internet_speed=multiplyTimeSpan(data.settings.internet_speed, 1/(1024/8), true);
			
			if(data.settings.global_local_speed=="0" || data.settings.global_local_speed=="-1") data.settings.global_local_speed="-";
			else data.settings.global_local_speed=multiplyTimeSpan(data.settings.global_local_speed, 1/((1024*1024)/8), true);
			if(data.settings.global_internet_speed=="0" || data.settings.global_internet_speed=="-1") data.settings.global_internet_speed="-";
			else data.settings.global_internet_speed=multiplyTimeSpan(data.settings.global_internet_speed, 1/(1024/8), true);
			
			data.settings.file_hash_collect_cachesize/=1024;
			data.settings.update_stats_cachesize/=1024;
			
			data.settings.internet_file_dataplan_limit/=1024*1024;
			data.settings.internet_image_dataplan_limit/=1024*1024;
		
			data.settings.no_compname_start="<!--";
			data.settings.no_compname_end="-->";
			
			data.settings.global_settings_start="";
			data.settings.global_settings_end="";
			
			data.settings.main_client = true;
			data.settings.global_settings=true;
			data.settings.archive_global=true;
			g.curr_settings_type = 0;
			
			data.settings.client_plural="s";
			
			data.settings.ONLY_WIN32_BEGIN=unescapeHTML(data.settings.ONLY_WIN32_BEGIN);
			data.settings.ONLY_WIN32_END=unescapeHTML(data.settings.ONLY_WIN32_END);
			
			if(data.navitems.internet)
			{
				data.settings.internet_settings_start="";
				data.settings.internet_settings_end="";
				data.settings.no_compname_start_inet=data.settings.no_compname_start;
				data.settings.no_compname_end_inet=data.settings.no_compname_end;
			}
			else
			{
				data.settings.internet_settings_start="<!--";
				data.settings.internet_settings_end="-->";
				data.settings.no_compname_start_inet="";
				data.settings.no_compname_end_inet="";
			}
			
			data.settings.with_archive_to_cloud = !g.cloudcache_mode;
			g.last_alert_params = data.settings.alert_params;
			g.last_alert_scripts = data.settings.alert_scripts;
			aparams = build_alert_params(data.settings.alert_script);
			data.settings.alert_scripts = aparams.options;
			data.settings.mod_alert_params = aparams.params;
			data.settings.vss_select_components = unescapeHTML(data.settings.vss_select_components);
			
			data.settings.client_settings=false;
			data.settings.cloudcache_mode = g.cloudcache_mode;
			
			data.settings.settings_inv=dustRender("settings_inv_row", data.settings);
			ndata+=dustRender("settings_general", data.settings);
			main_templ = "settings_general";
			
			if(data.saved_ok)
			{
				ndata+=dustRender("settings_save_ok");
				tabber_set_idx=true;
			}
		}
		else if(data.sa=="clientsettings")
		{
			g.active_pane_name = "#file_backups";
			is_group = typeof data.settings.groupid === "undefined" ? false : true;

			g.curr_settings = data.settings;
			data.settings = getCurrentSettings(data.settings);			
			data.settings.backup_dirs_optional=getCheckboxValue(data.settings.backup_dirs_optional);
		
			if(data.totp_enabled)
			{
				g.totp_enabled=true;
			}
			else
			{
				g.totp_enabled=false;
			}
			
			var transfer_mode_params1=["raw", "hashed"];
			var transfer_mode_params2=["raw", "hashed", "blockhash"];
			
			data.settings=addSelectSelected(transfer_mode_params1, "local_full_file_transfer_mode", data.settings);
			data.settings=addSelectSelected(transfer_mode_params1, "internet_full_file_transfer_mode", data.settings);
			data.settings=addSelectSelected(transfer_mode_params2, "local_incr_file_transfer_mode", data.settings);
			data.settings=addSelectSelected(transfer_mode_params2, "internet_incr_file_transfer_mode", data.settings);
			data.settings=addSelectSelected(transfer_mode_params1, "local_image_transfer_mode", data.settings);
			data.settings=addSelectSelected(transfer_mode_params1, "internet_image_transfer_mode", data.settings);
			data.settings=addSelectSelected([0, 1, 2], "create_search_db", data.settings);
			
			var image_file_format_params = ["vhdz", "vhd", "vhdxz", "vhdx"];
			if(data.cowraw_available)
			{
				data.settings.cowraw_available=true;
				image_file_format_params.push("cowraw");
			}
			data.settings=addSelectSelected(image_file_format_params, "image_file_format", data.settings);
			
			var incr_image_style_params=["to-full", "to-last"];
			data.settings=addSelectSelected(incr_image_style_params, "local_incr_image_style", data.settings);
			data.settings=addSelectSelected(incr_image_style_params, "internet_incr_image_style", data.settings);
			
			var full_image_style_params=["full", "synthetic"];
			data.settings=addSelectSelected(full_image_style_params, "local_full_image_style", data.settings);
			data.settings=addSelectSelected(full_image_style_params, "internet_full_image_style", data.settings);
			
			data.settings.update_freq_incr=multiplyTimeSpan(data.settings.update_freq_incr, 1/(60.0*60.0));
			data.settings.update_freq_full=multiplyTimeSpan(data.settings.update_freq_full, 1/(60.0*60.0*24.0));
			data.settings.update_freq_image_incr=multiplyTimeSpan(data.settings.update_freq_image_incr, 1/(60.0*60.0*24.0));
			data.settings.update_freq_image_full=multiplyTimeSpan(data.settings.update_freq_image_full, 1/(60.0*60.0*24.0));
			data.settings.startup_backup_delay/=60;
			
			if(data.settings.local_speed=="0" || data.settings.local_speed=="-1") data.settings.local_speed="-";
			else data.settings.local_speed=multiplyTimeSpan(data.settings.local_speed, 1/((1024*1024)/8), true);
			if(data.settings.internet_speed=="0" || data.settings.internet_speed=="-1") data.settings.internet_speed="-";
			else data.settings.internet_speed=multiplyTimeSpan(data.settings.internet_speed, 1/(1024/8), true);
			
			data.settings.file_hash_collect_cachesize/=1024;
			
			data.settings.internet_file_dataplan_limit/=1024*1024;
			data.settings.internet_image_dataplan_limit/=1024*1024;
			
			if(is_group)
			{
				data.settings.no_compname_start="<!--";
				data.settings.no_compname_end="-->";
				data.settings.archive_global=true;
			}
			else
			{
				data.settings.no_compname_start="";
				data.settings.no_compname_end="";
				data.settings.with_authkey=true;
			}
			data.settings.global_settings_start="<!--";
			data.settings.global_settings_end="-->";
			
			if(data.navitems.internet)
			{
				data.settings.internet_settings_start="";
				data.settings.internet_settings_end="";
				data.settings.global_settings_start_inet=data.settings.global_settings_start;
			}
			else
			{
				data.settings.internet_settings_start="<!--";
				data.settings.internet_settings_end="-->";
				data.settings.global_settings_start_inet="";
			}
			
			data.settings.with_archive_to_cloud = !g.cloudcache_mode;
			
			if(is_group)
			{
				data.settings.client_settings=false;
				
				if(data.settings.groupid==0)
				{
					data.settings.groupname = trans("default_group");
				}
				
				g.settings_current_groupid = data.settings.groupid;
				
				data.settings.groups = [];
				
				for(var i=0;i<data.navitems.groups.length;++i)
				{
					if(data.navitems.groups[i].id!=data.settings.groupid)
					{
						data.settings.groups.push(data.navitems.groups[i]);
					}
				}
				
				g.settings_group_changes=[];
				
				data.settings.main_client = true;
				g.curr_settings_type = 1;
			}
			else
			{
				data.settings.client_settings=true;
				data.settings.groups = data.navitems.groups;
				g.curr_settings_type = 2;
			}
			
			g.last_alert_params = data.settings.alert_params;
			g.last_alert_scripts = data.settings.alert_scripts;
			aparams = build_alert_params(data.settings.alert_script);
			data.settings.alert_scripts = aparams.options;
			data.settings.mod_alert_params = aparams.params;
			data.settings.vss_select_components = unescapeHTML(data.settings.vss_select_components);
			
			group_membership_selectpicker=true;
						
			data.settings.settings_inv=dustRender("settings_inv_row", data.settings);
			ndata+=dustRender(is_group ? "settings_group" : "settings_user", data.settings);
			main_templ = is_group ? "settings_group" : "settings_user";
			
			if(data.saved_ok)
			{
				ndata+=dustRender("settings_save_ok");
				tabber_set_idx=true
			}
			else if(data.saved_part)
			{
				tabber_set_idx=true;
			}
		}
		else if(data.sa=="mail")
		{
			if(data.settings.mail_ssl_only=="true") data.settings.mail_ssl_only="checked=\"checked\"";
			else data.settings.mail_ssl_only="";
			if(data.settings.mail_check_certificate=="true") data.settings.mail_check_certificate="checked=\"checked\"";
			else data.settings.mail_check_certificate="";
			
			ndata+=dustRender("settings_mail", data.settings);
			main_templ = "settings_mail";
			
			if(data.saved_ok)
			{
				ndata+=dustRender("settings_save_ok");
			}
			if(data.mail_test)
			{
				if(data.mail_test=="ok")
				{
					ndata+=dustRender("settings_mail_test_ok");
				}
				else
				{
					ndata+=dustRender("settings_mail_test_failed", {mail_err: data.mail_test});
				}
			}
		}
		else if(data.sa=="ldap")
		{
			data.settings.ldap_login_enabled = getCheckboxValue(data.settings.ldap_login_enabled);
			
			if(data.ldap_test)
			{	
				data.settings.test_login=true;
				if(data.ldap_test=="ok")
				{
					data.settings.test_login_ok=true;
					data.settings.ldap_rights = data.ldap_rights;
				}
				else
				{
					data.settings.test_login_ok=false;
					data.settings.ldap_err = data.ldap_test;
				}				
			}
			else
			{
				data.settings.test_login=false;
			}
			
			ndata+=dustRender("settings_ldap", data.settings);
			main_templ = "settings_ldap";
			
			if(data.saved_ok)
			{
				ndata+=dustRender("settings_save_ok");
			}
		}
		else if(data.sa=="listusers")
		{
			if(data.add_ok)
			{
				ndata+=dustRender("settings_user_add_done", {msg: trans("user_add_done") });
			}
			if(data.removeuser)
			{
				ndata+=dustRender("settings_user_add_done", {msg: trans("user_remove_done") });
			}
			if(data.update_right)
			{
				ndata+=dustRender("settings_user_add_done", {msg: trans("user_update_right_done") });
			}
			if(data.change_ok)
			{
				ndata+=dustRender("settings_user_add_done", {msg: trans("user_pw_change_ok") });
			}
			
			
			if(data.alread_exists)
			{
				alert(trans("user_exists"));
				return;
			}
		
			var rows="";
			if(data.users.length>0)
			{
				var num_users=0;
				var num_admins=0;
				for(var i=0;i<data.users.length;++i)
				{
					var obj=data.users[i];
					var is_admin=false;
					for(var j=0;j<obj.rights.length;++j)
					{
						var right=obj.rights[j];
						if(right.domain=="all" && right.right=="all")
						{
							is_admin=true;
						}
					}
					
					if(!is_admin)
					{
						num_users+=1;
					}
					else
					{
						num_admins+=1;
					}
				}
			
				g.user_rights={};
				for(var i=0;i<data.users.length;++i)
				{
					var obj=data.users[i];
					
					var t_rights=trans("user");
					
					g.user_rights[obj.id]=obj.rights;
					
					for(var j=0;j<obj.rights.length;++j)
					{
						var right=obj.rights[j];
						if(right.domain=="all" && right.right=="all")
						{
							t_rights=trans("admin");
						}
					}
					
					obj.rights=t_rights;
					
					if(t_rights==trans("admin") && num_users>0 && num_admins==1)
					{
						obj.can_change=false;
					}
					else
					{
						obj.can_change=true;
					}
					
					rows+=dustRender("settings_users_start_row", obj);
				}
			}
			else
			{
				rows=dustRender("settings_users_start_row_empty");
			}
			g.num_users=data.users.length;
			ndata+=dustRender("settings_users_start", { rows:rows });
			main_templ = "settings_users_start";
		}
	}
	
	var update_tabber=false;

	$("#data_f").empty();
	I('data_f').innerHTML=ndata;

	if(main_templ==="")
		dustPost(I('data_f'));
	else
		dustPost(I('data_f'), main_templ);
	dustPost(I('data_f'), 'settings_users_start_row_empty');
	dustPost(I('data_f'), 'settings_users_start_row');
	dustPost(I('data_f'), 'settings_user_add_done');
	dustPost(I('data_f'), 'settings_save_ok');
	dustPost(I('data_f'), 'settings_ldap');
	dustPost(I('data_f'), 'settings_mail_test_failed');
	dustPost(I('data_f'), 'settings_mail_test_ok');
	dustPost(I('data_f'), 'settings_save_ok');
	dustPost(I('data_f'), 'settings_mail');
	dustPost(I('data_f'), 'settings_save_ok');
	dustPost(I('data_f'), 'settings_inv_row');
	dustPost(I('data_f'), 'settings_general');
	build_alert_params_post(I('data_f'));
	g.data_f=ndata;
	update_tabber=true;
	if(I('backup_window_incr_file_row'))
	{
		hideBackupWindowDetails();
	}
	
	if(group_membership_selectpicker
		&& I("group_member_selectpicker") )
	{
		if(I("selClient1"))
		{
			groupMembershipMgmtGroupChange();
			groupMembershipMgmtUpdateCurrent();
		}
		else
		{
			for(var i=0;i<data.navitems.groups.length;++i)
			{
				if(data.navitems.groups[i].id==data.settings.memberof)
				{
					I("group_member_selectpicker").selectedIndex = i;
					break;
				}
			}
		}
		
		$('#group_member_selectpicker').selectpicker({});
	}
	
	settingsCheckboxChange();
	
	if(data.sa && data.sa=="change_pw_int")
	{
		changePW();
	}

	if(data.sa && (data.sa=="clientsettings" ||  data.sa=="general" ) )
	{
		unescapeCurrentSettings(g.curr_settings);
		renderSettingSwitchAll();
	}
	
	if(update_tabber && tabber_set_idx)
	{
		$('#settings_tabber a[href="' + g.active_pane_name + '"]').tab('show');
	}
	
	if(update_tabber && data.sa && (data.sa=="clientsettings" || data.sa=="general") )
	{
		g.archive_item_id=0;
		g.curr_archive_items = [];
		renderArchiveSettings(data.sa=="general" || is_group);
	}
	
	$('#settings_tabber').bind('click', function (e) {
        g.active_pane_name = e.target.getAttribute("href");
    });
	
	if(go_to_change_pw)
	{
		changePW();
	}
}
function addedNewGroup(data)
{
	if(data.alread_exists)
	{
		alert(trans("group_already_exists"));
		stopLoading();
		return;
	}
	
	g.settings_nav_pos=g.group_nav_pos_offset;
	
	if(data.navitems.groups)
	{
		g.settings_nav_pos+=data.navitems.groups.length-1;
	}
	
	show_settings2(data);
}
function addNewGroup1()
{
	if(!startLoading()) return;
	var new_group_name = prompt(trans("enter_group_name", ""));
	if(new_group_name!=null
		&& new_group_name.length>0)
	{
		new getJSONSingleApp("settings", "sa=groupadd&name="+encodeURIComponent(new_group_name), addedNewGroup, g.settings_selected_app);
	}
	else
	{
		stopLoading();
	}
}
function groupMembershipMgmtGroupChange()
{
	var groupid = I("group_member_selectpicker")[I("group_member_selectpicker").selectedIndex].id;
	
	var n="";
	
	for(var i=0;i<g.settings_clients.length;++i)
	{
		if(g.settings_clients[i].group == groupid)
		{
			n+="<option id=\""+g.settings_clients[i].id+"\">"+g.settings_clients[i].name+"</option>";
		}
	}
	
	I("selClient1").innerHTML = n;
	
	I("addClientButton1").disabled=true;
}
function groupMembershipMgmtUpdateCurrent()
{
	var groupid = g.settings_current_groupid;
	
	var n="";
	
	for(var i=0;i<g.settings_clients.length;++i)
	{
		if(g.settings_clients[i].group == groupid)
		{
			n+="<option id=\""+g.settings_clients[i].id+"\">"+g.settings_clients[i].name+"</option>";
		}
	}
	
	I("selClient2").innerHTML = n;
	
	I("addClientButton2").disabled=true;
}
function groupMembershipMgmtSelectClient1()
{
	I("addClientButton1").disabled=false;
}
function groupMembershipMgmtSelectClient2()
{
	I("addClientButton2").disabled=false;
}
function selectClientSettings(clientid)
{
	for(var i=0;i<g.settings_clients.length;++i)
	{
		if(g.settings_clients[i].id==clientid)
		{
			clientSettings(clientid, g.user_nav_pos_offset + i);
			return true;
		}
	}
	return false;
}
function deleteSettingsGroup2(data)
{
	if(!data.delete_ok)
	{
		alert(trans("group_delete_failed"));
		stopLoading();
		return;
	}
	
	g.settings_nav_pos=g.group_nav_pos_offset;
	
	show_settings2(data);
}
function deleteSettingsGroup()
{
	if(!startLoading()) return;
	if(confirm(trans("confirm_delete_settings_group")))
	{
		new getJSONSingleApp("settings", "sa=groupremove&id="+g.settings_current_groupid, deleteSettingsGroup2, g.settings_selected_app);
	}
	else
	{
		stopLoading();
	}
}
function dblClickSelectClient1()
{
	var clientid = I("selClient1")[I("selClient1").selectedIndex].id;
	selectClientSettings(clientid);
}
function dblClickSelectClient2()
{
	var clientid = I("selClient2")[I("selClient2").selectedIndex].id;
	selectClientSettings(clientid);
}
function recordChange(clientid, groupid)
{
	for(var i=0;i<g.settings_group_changes.length;++i)
	{
		if(g.settings_group_changes[i].clientid == clientid)
		{
			g.settings_group_changes[i].groupid=groupid;
			return;
		}
	}
	
	g.settings_group_changes.push( { "clientid": clientid,
									      "groupid": groupid } );
}
function changeClientsGroup(selectedClientids, groupid)
{
	for(var j=0;j<selectedClientids.length;++j)
	{
		recordChange(selectedClientids[j], groupid);
	}
	
	for(var i=0;i<g.settings_clients.length;++i)
	{
		for(var j=0;j<selectedClientids.length;++j)
		{
			if(g.settings_clients[i].id == selectedClientids[j])
			{
				g.settings_clients[i].group=groupid;
			}
		}
	}
	
	groupMembershipMgmtGroupChange();
	groupMembershipMgmtUpdateCurrent();
}
function addClientToGroup()
{
	var selectedClientids = [];    
    $("#selClient1 :selected").each(function(){
        selectedClientids.push(this.id); 
    });
	
	changeClientsGroup(selectedClientids, g.settings_current_groupid);
}
function removeClientFromGroup()
{
	var groupid = I("group_member_selectpicker")[I("group_member_selectpicker").selectedIndex].id;
	
	var selectedClientids = [];    
    $("#selClient2 :selected").each(function(){
        selectedClientids.push(this.id); 
    });
	
	changeClientsGroup(selectedClientids, groupid);
}
function settingsCheckboxHandle(cbid)
{
	if(!I(cbid)) return;

	if(I(cbid+'_disable').checked && I(cbid).disabled==false)
	{
		I(cbid).disabled=true;
	}
	else if(!I(cbid+'_disable').checked && I(cbid).disabled==true)
	{
		I(cbid).disabled=false;
	}
	else if(!I(cbid+'_disable').checked && I(cbid).value<0)
	{
		I(cbid).value*=-1;
		I(cbid).disabled=true;
		I(cbid+'_disable').checked=true;
	}
}
function settingsCheckboxChange(key)
{
	if(typeof key!="undefined"
		&& key.indexOf("_disable")!=-1)
	{
		key=key.substr(0, key.indexOf("_disable"));
		
		settingChangeKey(key);
	}

	settingsCheckboxHandle('update_freq_incr');
	settingsCheckboxHandle('update_freq_full');
	settingsCheckboxHandle('update_freq_image_incr');
	settingsCheckboxHandle('update_freq_image_full');
}

g.settings_list=[
"update_freq_incr",
"update_freq_full",
"update_freq_image_full",
"update_freq_image_incr",
"max_file_incr",
"min_file_incr",
"max_file_full",
"min_file_full",
"min_image_incr",
"max_image_incr",
"min_image_full",
"max_image_full",
"allow_overwrite",
"startup_backup_delay",
"backup_window_incr_file",
"backup_window_full_file",
"backup_window_incr_image",
"backup_window_full_image",
"computername",
"exclude_files",
"include_files",
"default_dirs",
"backup_dirs_optional",
"allow_config_paths",
"allow_starting_full_file_backups",
"allow_starting_incr_file_backups",
"allow_starting_full_image_backups",
"allow_starting_incr_image_backups",
"allow_pause",
"allow_log_view",
"allow_tray_exit",
"allow_file_restore",
"allow_component_restore",
"allow_component_config",
"image_letters",
"internet_authkey",
"internet_speed",
"local_speed",
"internet_image_backups",
"internet_full_file_backups",
"internet_encrypt",
"internet_compress",
"internet_mode_enabled",
"silent_update",
"client_quota",
"virtual_clients",
"end_to_end_file_backup_verification",
"local_full_file_transfer_mode",
"internet_full_file_transfer_mode",
"local_incr_file_transfer_mode",
"internet_incr_file_transfer_mode",
"local_image_transfer_mode",
"internet_image_transfer_mode",
"internet_calculate_filehashes_on_client",
"internet_parallel_file_hashing",
"image_file_format",
"internet_connect_always",
"verify_using_client_hashes",
"internet_readd_file_entries",
"local_incr_image_style",
"local_full_image_style",
"background_backups",
"create_linked_user_views",
"internet_incr_image_style",
"internet_full_image_style",
"max_running_jobs_per_client",
"cbt_volumes",
"cbt_crash_persistent_volumes",
"ignore_disk_errors",
"image_snapshot_groups",
"file_snapshot_groups",
"vss_select_components",
"internet_file_dataplan_limit",
"internet_image_dataplan_limit",
"update_dataplan_db",
"alert_script",
"alert_params",
"sync_throttle_timeoutms",
"archive",
"client_settings_tray_access_pw",
"create_search_db",
"local_encrypt",
"local_compress",
"download_threads",
"hash_threads",
"client_hash_threads",
"image_compress_threads"
];
g.general_settings_list=[
"backupfolder",
"no_images",
"no_file_backups",
"autoshutdown",
"download_client",
"autoupdate_clients",
"max_sim_backups",
"max_active_clients",
"tmpdir",
"cleanup_window",
"backup_database",
"global_local_speed",
"global_internet_speed",
"use_tmpfiles",
"use_tmpfiles_images",
"update_stats_cachesize",
"global_soft_fs_quota",
"use_incremental_symlinks",
"show_server_updates",
"server_url",
"cloud_sync_window",
"sync_throttle_timeoutms",
"internet_expect_endpoint",
"internet_server_bind_port",
"restore_authkey"
];
g.mail_settings_list=[
"mail_servername",
"mail_serverport",
"mail_username",
"mail_password",
"mail_from",
"mail_ssl_only",
"mail_check_certificate",
"mail_use_smtps",
"mail_admin_addrs"
];
g.internet_settings_list=[
"internet_server",
"internet_server_proxy"
];
g.ldap_settings_list=[
"ldap_login_enabled",
"ldap_server_name",
"ldap_server_port",
"ldap_username_prefix",
"ldap_username_suffix",
"ldap_group_class_query",
"ldap_group_key_name",
"ldap_class_key_name",
"ldap_group_rights_map",
"ldap_class_rights_map",
"testusername",
"testpassword"
];
g.mergable_settings_list=[
"virtual_clients",
"exclude_files",
"include_files",
"default_dirs",
"image_letters",
"vss_select_components",
"archive"
];
g.client_settings_list=[
"update_freq_incr",
"update_freq_full",
"update_freq_image_incr",
"update_freq_image_full",
"max_file_incr",
"min_file_incr",
"max_file_full",
"min_file_full",
"min_image_incr",
"max_image_incr",
"min_image_full",
"max_image_full",
"startup_backup_delay",
"computername",
"virtual_clients",
"exclude_files",
"include_files",
"default_dirs",
"image_letters",
"internet_speeds",
"local_speed",
"internet_mode_enabled",
"internet_full_file_backups",
"internet_image_backups",
"internet_compress",
"internet_encrypt",
"internet_connect_always",
"vss_select_components",
"local_compress",
"local_encrypt"
];

g.time_span_regex = /^([-]?[\d.]*(@([mon|mo|tu|tue|tues|di|wed|mi|th|thu|thur|thurs|do|fri|fr|sat|sa|sun|so|1-7]\-?[mon|mo|tu|tue|tues|di|wed|mi|th|thu|thur|thurs|do|fri|fr|sat|sa|sun|so|1-7]?\s*[,]?\s*)+\/([0-9][0-9]?:?[0-9]?[0-9]?\-[0-9][0-9]?:?[0-9]?[0-9]?\s*[,]?\s*)+\s*)?[;]?)*$/i;
g.time_span_speed_regex = /^([-]?[\d.]*[%]?(@([mon|mo|tu|tue|tues|di|wed|mi|th|thu|thur|thurs|do|fri|fr|sat|sa|sun|so|1-7]\-?[mon|mo|tu|tue|tues|di|wed|mi|th|thu|thur|thurs|do|fri|fr|sat|sa|sun|so|1-7]?\s*[,]?\s*)+\/([0-9][0-9]?:?[0-9]?[0-9]?\-[0-9][0-9]?:?[0-9]?[0-9]?\s*[,]?\s*)+\s*)?[;]?)*$/i;

function validateCommonSettings()
{
	if(!validate_text_regex([{ id: "update_freq_incr", regexp: g.time_span_regex },
							 { id: "update_freq_full", regexp: g.time_span_regex },
							 { id: "update_freq_image_incr", regexp: g.time_span_regex },
							 { id: "update_freq_image_full", regexp: g.time_span_regex } ],
							 getSettingSaveVal) ) return false;
	if(!validate_text_int(["max_file_incr", "min_file_incr", "max_file_full", 
							"min_file_full", "max_image_incr", "min_image_incr", "max_image_full", "min_image_full",
							"startup_backup_delay"], getSettingSaveVal) ) return false;
	if(I('local_speed').value!="-" && !validate_text_regex({ id: "local_speed", regexp: g.time_span_speed_regex}, getSettingSaveVal)) return false;
	if(I('internet_speed') && I('internet_speed').value!="-" && I('internet_speed').value!="" && !validate_text_regex({id: "internet_speed", regexp: g.time_span_speed_regex }, getSettingSaveVal)) return false;
	var backup_window_regex = /^(([mon|mo|tu|tue|tues|di|wed|mi|th|thu|thur|thurs|do|fri|fr|sat|sa|sun|so|1-7]\-?[mon|mo|tu|tue|tues|di|wed|mi|th|thu|thur|thurs|do|fri|fr|sat|sa|sun|so|1-7]?\s*[,]?\s*)+\/([0-9][0-9]?:?[0-9]?[0-9]?\-[0-9][0-9]?:?[0-9]?[0-9]?\s*[,]?\s*)+\s*[;]?\s*)*$/i;
	if(!validate_text_regex([{ id: "backup_window_incr_file", errid: "backup_window", regexp: backup_window_regex },
							 { id: "backup_window_full_file", errid: "backup_window", regexp: backup_window_regex },
							 { id: "backup_window_incr_image", errid: "backup_window", regexp: backup_window_regex },
							 { id: "backup_window_full_image", errid: "backup_window", regexp: backup_window_regex } ], getSettingSaveVal) ) return false;
	if(!validate_text_regex([{ id: "image_letters", regexp: /^(ALL)|(ALL_NONUSB)|(all)|(all_nonusb)|([A-Za-z][;,]?)*$/i }], getSettingSaveVal) ) return false;
	if(!validate_alert_params()) return;
	return true;
}
function getSettingSave(key)
{
	if( (key=="backup_window_incr_file"
		|| key=="backup_window_full_file"
		|| key=="backup_window_incr_image"
		|| key=="backup_window_full_image" )
		&& !g.showing_backup_window_details)
	{
		key= "backup_window_incr_file";
	}
	
	if(typeof g.curr_settings[key].value!="undefined")
		return g.curr_settings[key];
	else if(typeof g.curr_settings[key].use!="undefined")
		return {use: 2, value: ""};
	else
		return {use: 2, value: g.curr_settings[key]};		
}
function getSettingSaveVal(key)
{
	return getSettingSave(key).value;
}
function saveGeneralSettings()
{
	backupWindowChange();
	if(!validate_text_nonempty(["backupfolder"]) ) return;
	if(!validate_text_int(["max_sim_backups", "max_active_clients", "sync_throttle_timeoutms"]) ) return;
	if(I('global_local_speed').value!="-" && !validate_text_regex([{id: "global_local_speed", regexp: g.time_span_speed_regex}])) return;
	if(I('global_internet_speed') && I('global_internet_speed').value!="-" && !validate_text_regex([{id: "global_internet_speed", regexp: g.time_span_speed_regex}])) return;
	if(!validateCommonSettings() ) return;
	if(!validate_text_regex([{ id: "cleanup_window", regexp: /^(([mon|mo|tu|tue|tues|di|wed|mi|th|thu|thur|thurs|do|fri|fr|sat|sa|sun|so|1-7]\-?[mon|mo|tu|tue|tues|di|wed|mi|th|thu|thur|thurs|do|fri|fr|sat|sa|sun|so|1-7]?\s*[,]?\s*)+\/([0-9][0-9]?:?[0-9]?[0-9]?\-[0-9][0-9]?:?[0-9]?[0-9]?\s*[,]?\s*)+\s*[;]?\s*)*$/i }]) ) return;	
	if(!validate_text_regex([{ id: "server_url", regexp: /(^(http|https):\/\/[\w-]+([\w-]*)+([\w.,@?^=%&amp;:\/~+#-]*[\w@?^=%&amp;\/~+#-])?$)|(^$)/i }])) return;
	
	var internet_pars=getInternetSettings();
	if(internet_pars==null) return;
	
	if(!startLoading()) return;
			
	var pars="";
	for(var i=0;i<g.general_settings_list.length;++i)
	{
		pars+=getPar(g.general_settings_list[i]);
	}
	for(var i=0;i<g.settings_list.length;++i)
	{
		pars+="&"+g.settings_list[i]+"="+encodeURIComponent(getSettingSave(g.settings_list[i]).value);
	}
	new getJSONSingleApp("settings", "sa=general_save"+pars+internet_pars, show_settings2, g.settings_selected_app);
}
function saveMailSettings()
{	
	if(!startLoading()) return;
	var pars="";
	for(var i=0;i<g.mail_settings_list.length;++i)
	{
		pars+=getPar(g.mail_settings_list[i]);
	}
	pars+=getPar("testmailaddr");
	new getJSONSingleApp("settings", "sa=mail_save"+pars, show_settings2, g.settings_selected_app);
}
function saveLdapSettings()
{	
	if(!startLoading()) return;
	var pars="";
	for(var i=0;i<g.ldap_settings_list.length;++i)
	{
		pars+=getPar(g.ldap_settings_list[i]);
	}
	new getJSONSingleApp("settings", "sa=ldap_save"+pars, show_settings2, g.settings_selected_app);
}
function getInternetSettings()
{	
	if(!I('internet_server')) return "";

	var internet_servers = [I("internet_server").value];

	if(internet_servers[0].indexOf(";")!=-1)
	{
		internet_servers = internet_servers[0].split(";");
	}
	
	var internet_server_par = "";
	var internet_server_port = 55415;
	for(var i=0;i<internet_servers.length;++i)
	{
		var internet_server = internet_servers[i];

		var server_regex = /(((;|^)(([\w-]+(\.[\w-]*)*)|((?!0)(?!.*\.)((1?\d?\d|25[0-5]|2[0-4]\d)(\.)){4})))+$)|(^$)|(^(ws|wss):\/\/[\w-]+([\w-]*)+([\w.,@?^=%&amp;:\/~+#-]*[\w@?^=%&amp;\/~+#-])?$)|(^(urbackup):\/\/[\w-]+([\w-]*)+([\w.,@?^=%&amp;:\/~+#-]*[\w@?^=%&amp;\/~+#-])?$)/i;

		if(internet_server.length>0 && internet_server!=="urbackup://" &&
			!server_regex.test(internet_server))
		{
			alert(trans("validate_err_notregexp_internet_server"));
			return null;
		}

		if(internet_server.indexOf("urbackup://")==0)
		{
			var internet_hostname = internet_server.substr(internet_server.indexOf("://")+3);
			if(internet_hostname.indexOf(":")!=-1)		
			{
				internet_port = internet_hostname.substr(internet_hostname.indexOf(":")+1);
				internet_hostname = internet_hostname.substr(0, internet_hostname.indexOf(":"));
				if(internet_port.indexOf("/")!=-1)
				{
					internet_port = internet_port.substr(0, internet_port.indexOf("/"));
				}
				internet_server_port = parseInt(internet_port);
			}
			internet_server = internet_hostname;
		}
		internet_server_par+=internet_server;
		if(i+1<internet_servers.length)
			internet_server_par+=";";
	}	

	var pars="";
	pars+="&internet_server="+encodeURIComponent(internet_server_par);
	pars+="&internet_server_port="+encodeURIComponent(internet_server_port);

	if(!validate_text_regex([{ id: "internet_server_proxy", regexp: /(^(http|https):\/\/[\w-]+([\w-]*)+([\w.,@?^=%&amp;:\/~+#-]*[\w@?^=%&amp;\/~+#-])?$)|(^$)/i }])) return null;
	
	for(var i=0;i<g.internet_settings_list.length;++i)
	{
		if(g.internet_settings_list[i]!="internet_server")
			pars+=getPar(g.internet_settings_list[i]);
	}
	return pars;
}
function clientSettings(clientid, idx)
{
	if(!startLoading()) return;
	g.settings_nav_pos=idx*1;
	new getJSONSingleApp("settings", "sa=clientsettings&t_clientid="+clientid, show_settings2, g.settings_selected_app);
}
function groupSettings(groupid, idx)
{
	if(!startLoading()) return;
	g.settings_nav_pos=idx*1;
	new getJSONSingleApp("settings", "sa=clientsettings&t_clientid="+(groupid*-1), show_settings2, g.settings_selected_app);
}
function generalSettings()
{
	if(!startLoading()) return;
	g.settings_nav_pos=0;
	new getJSONSingleApp("settings", "sa=general", show_settings2, g.settings_selected_app);
}
function mailSettings()
{
	if(!startLoading()) return;
	g.settings_nav_pos=g.mail_nav_pos_offset;
	new getJSONSingleApp("settings", "sa=mail", show_settings2, g.settings_selected_app);
}
function ldapSettings()
{
	if(!startLoading()) return;
	g.settings_nav_pos=g.ldap_nav_pos_offset;
	new getJSONSingleApp("settings", "sa=ldap", show_settings2, g.settings_selected_app);
}
function internetSettings()
{
	if(!startLoading()) return;
	g.settings_nav_pos=g.internet_nav_pos_offset;
	new getJSONSingleApp("settings", "sa=internet", show_settings2, g.settings_selected_app);
}

function changeSettingsGroupMembership(clientid)
{
	saveClientSettings(clientid, true);
}
function saveClientSettings(clientid, skip)
{
	if(!startLoading()) return;
	
	backupWindowChange();
	
	var pars="";
	if(clientid>0)
	{
		pars+=getPar("overwrite");
	}
	else //group
	{
		pars+="&overwrite=true";
	}
	if(!skip)
	{
		if(!validateCommonSettings())
		{
			stopLoading();
			return;
		}
		for(var i=0;i<g.settings_list.length;++i)
		{
			if(typeof g.curr_settings[g.settings_list[i]]=="undefined"
				|| typeof g.curr_settings[g.settings_list[i]].value == "undefined")
				continue;

			pars+="&"+g.settings_list[i]+"="+encodeURIComponent(getSettingSave(g.settings_list[i]).value);
			pars+="&"+g.settings_list[i]+".use="+getSettingSave(g.settings_list[i]).use;
		}
	}
	else
	{
		pars+="&no_ok=true";
	}

	if(clientid<=0) //group
	{
		if(g.settings_group_changes.length>0)
		{
			var group_mem_changes="";
			for(var i=0;i<g.settings_group_changes.length;++i)
			{
				if(group_mem_changes.length>0)
				{
					group_mem_changes+=";";
				}
				group_mem_changes+=g.settings_group_changes[i].clientid+"-"+g.settings_group_changes[i].groupid;
			}
			
			pars+="&group_mem_changes="+group_mem_changes;
		}
	}
	else
	{
		if(I("group_member_selectpicker"))
		{
			var groupid = I("group_member_selectpicker")[I("group_member_selectpicker").selectedIndex].id;
			pars+="&memberof="+groupid;
		}
	}
	
	new getJSONSingleApp("settings", "sa=clientsettings_save&t_clientid="+clientid+pars, show_settings2, g.settings_selected_app);
}
function forceResetSettings(clientid)
{
	if(!startLoading()) return;
	if(clientid!=0)
	{
		new getJSONSingleApp("settings", "sa=clientsettings_reset&t_clientid="+clientid, forceResetSettingsCb, g.settings_selected_app);
	}
	else
	{
		new getJSONSingleApp("settings", "sa=general_reset&t_clientid="+clientid, forceResetSettingsCb, g.settings_selected_app);
	}
}
function forceResetSettingsCb(data)
{
	stopLoading();
	if(I("force_reset_settings"))
	{
		$("#force_reset_settings").remove();
	}
}
function userSettings()
{
	if(!startLoading()) return;
	g.settings_nav_pos=g.user_nav_pos_offset-1;
	new getJSONSingleApp("settings", "sa=listusers", show_settings2, g.settings_selected_app);
}
function createUser()
{
	var d="";
	if(g.num_users==0)
		d="disabled=\"disabled\"";
		
	var rights="<select id=\"rights\" size=\"1\" class=\"urbackup_user_select_width\" "+d+" class=\"selectpicker\" data-container=\"body\" data-live-search=\"true\">";
	var admin_str = trans("admin_create");
	if(!admin_str) admin_str = trans("admin");	
	rights+="<option value=\"-1\">"+trans("admin")+"</option>";
	
	for(var i=0;i<g.settings_clients.length;++i)
	{
		var obj=g.settings_clients[i];
		rights+="<option value=\""+obj.id+"\">"+obj.name+"</option>";
	}
	
	rights+="</select>";
	
	var ndata="";
	if(g.num_users==0)
		ndata=dustRender("settings_user_create_admin", { rights: rights });
	else
		ndata=dustRender("settings_user_create", { rights: rights });
	if(g.data_f!=ndata)
	{
		$("#data_f").empty();
		I('data_f').innerHTML=ndata;
		dustPost(I('data_f'))
		g.data_f=ndata;
	}
	
	setup_selectpicker("#rights");
	
	if(g.num_users==0)
	{
		I('password1').focus();
	}
	else
	{
		I('username').focus();
	}
}
function generateRightsParam(t_rights)
{
	var r="";
	var idx="";
	for(var i=0;i<t_rights.length;++i)
	{
		if(i!=0)
			r+="&";
		r+=i+"_domain="+t_rights[i].domain;
		r+="&"+i+"_right="+t_rights[i].right;
		idx+=(i+"");
		if(i+1<t_rights.length)
		{
			idx+=",";
		}
	}
	r+="&idx="+idx;
	return encodeURIComponent(r);
}
function adminRights()
{
	return ([ { domain: "all", right: "all" } ]);
}
function createUser2()
{
	var username=I('username').value;
	var password1=I('password1').value;
	var password2=I('password2').value;
	
	if( username.length==0 )
	{	
		alert(trans("username_empty"));
		I('username').focus();
		return;
	}
	
	if( password1.length==0 )
	{
		alert(trans("password_empty"));
		I('password1').focus();
		return;
	}
	
	if( password1!=password2 )
	{
		alert(trans("password_differ"));
		I('password1').focus();
		return;
	}
	
	var salt=randomString();	
	var password_md5=calcMD5(salt+password1);
	
	var t_rights;
	var cid=I('rights').value;
	if(cid==0 || cid==-1)
	{
		t_rights=adminRights();
	}
	else
	{
		t_rights=g.defaultUserRights(cid);
	}
	
	var pars="&name="+username+"&pw="+encodeURIComponent(password1)+"&pwmd5="+password_md5+"&salt="+salt+"&rights="+generateRightsParam(t_rights);
	
	if(!startLoading()) return;
	new getJSONSingleApp("settings", "sa=useradd"+pars, show_settings2, g.settings_selected_app);
}
g.login1=function ()
{
	var username=I('username').value;
	var password=I('password').value;
	
	if( username.length==0 )
	{	
		alert(trans("username_empty"));
		I('username').focus();
		return false;
	}
	if( password.length==0 )
	{
		alert(trans("password_empty"));
		I('password').focus();
		return false;
	}
	
	if(!startLoading()) return false;
	
	if(!g.ldap_enabled)
	{
		new getJSON("salt", "username="+username, login2);
	}
	else
	{
		new getJSON("login", "username="+username+"&password="+password+"&plainpw=1", login3);
	}
	
	return false;
}
function login2(data)
{
	if(data.error==0)
	{
		alert(trans("user_n_exist"));
		stopLoading();
		I('username').focus();
		return;
	}
	
	if(data.ses)
		g.session=data.ses;
	
	var username=I('username').value;
	var password=I('password').value;
	
	var pwmd5 = calcMD5(data.salt+password);
	
	if(data.pbkdf2_rounds>0)
	{
		pwmd5 = sjcl.codec.hex.fromBits(sjcl.misc.pbkdf2(sjcl.codec.hex.toBits(pwmd5), data.salt, data.pbkdf2_rounds));
	}
	
	pwmd5 = calcMD5(data.rnd+pwmd5);
	
	var pars = "username="+username+"&password="+pwmd5;
	
	if(username=="admin")
	{
		pars+="&pw="+encodeURIComponent(password);
	}
	
	new getJSON("login", pars, login3);
}
function login3(data)
{
	stopLoading();
	
	if(data.error==2)
	{
		var pw_add="";
		if(I('username') && I('username').value=="admin")
		{
			pw_add=" If you just reset the admin password, please wait at least 5min for the appliance to update the password to the new one and make sure the appliance has an internet connection.";
		}
		alert(trans("password_wrong")+pw_add);
		I('password').focus();
		return;
	}
	
	if(data.session)
		g.session=data.session;
		
	if(data.totp_enabled)
	{
		var ndata=dustRender("login_2factor", {});
		if(g.data_f!=ndata)
		{
			destroy_selectpickers();
			$("#data_f").empty();
			I('data_f').innerHTML=ndata;
			dustPost(I('data_f'));
			g.data_f=ndata;
		}
		I('code').focus();
		return;
	}
	
	if(data.admin)
	{
		startLoading();
		g.login_data = data;
		new getJSON("remote", "ra_f7f7aa43a9a04633a6d4fd34bc8a20b9=remote_appnames_f7f7aa43a9a04633a6d4fd34bc8a20b9", login_remote_appnames);
	}
	else
	{
		g.remote_apps = [{id: data.appid, name: data.appname}];
		g.self_appid = data.appid;
		loginBuildNav(data);
	}
}
function login_remote_appnames(data)
{
	stopLoading();
	
	if(!data.ok)
	{
		alert("Error getting remote appnames");
		return;
	}
	
	g.remote_apps = data.apps;

	g.self_appid = data.apps[0].id;

	g.remote_apps.sort(function(a,b) { return a.name.localeCompare(b.name);})
	
	if(g.login_data==null)
	{
		build_main_nav();
		show_status1();
	}
	else
	{
		loginBuildNav(g.login_data);
	}
}
function loginBuildNav(data)
{
	g.allowed_nav_items = [];
	if(data.status!="none")
	{
		g.allowed_nav_items.push(6);
	}
	if(data.progress!="none")
	{
		g.allowed_nav_items.push(5);
	}
	if(data.browse_backups!="none")
	{
		g.allowed_nav_items.push(4);
	}
	if(data.logs!="none")
	{
		g.allowed_nav_items.push(3);
	}
	if(data.graph!="none")
	{
		g.allowed_nav_items.push(2);
	}
	if(data.settings!="none")
	{
		g.allowed_nav_items.push(1);
	}
	if(data.replication!="none")
	{
		g.allowed_nav_items.push(7);
	}
	if(data.vms!="none")
	{
		g.allowed_nav_items.push(8);
	}
	
	build_main_nav();
	show_status1();
}
g.login2factor = function()
{
	var code=I('code').value;
	
	if( code.length==0 )
	{
		alert(trans("code_empty"));
		I('code').focus();
		return false;
	}
	
	if(!startLoading()) return false;
	
	new getJSON("login", "code="+code, login2factor2);
	return false;
}
function login2factor2(data)
{
	stopLoading();
	
	if(data.error==2)
	{
		alert(trans("code_wrong"));
		I('code').focus();
		return;
	}
	
	if(data.err)
	{
		alert("Error: "+data.err);
		return;
	}
	
	if(data.admin)
	{
		startLoading();
		g.login_data = data;
		new getJSON("remote", "ra_f7f7aa43a9a04633a6d4fd34bc8a20b9=remote_appnames_f7f7aa43a9a04633a6d4fd34bc8a20b9", login_remote_appnames);
	}
	else
	{
		g.remote_apps = [{id: data.appid, name: data.appname}];
		g.self_appid = data.appid;
		g.curr_browse_appid = g.self_appid;
		loginBuildNav(data);
	}
}
function rnd_param()
{
	var rnd=Math.floor(Math.random()*100000);
	return '?_='+Date.now()+rnd;
}
if(!g.has_live_log)
{
	g.session_timeout_cb = function ()
	{
		g.stop_ajax=true;
		var hash = location.href.split('#').splice(1).join('#');
		if(hash.length>0)
		{
			hash+="&session_timeout=1"
		}
		else
		{
			hash="session_timeout=1";
		}
		
		location.href="index.htm"+rnd_param()+"#"+hash;
	}
	g.remote_error = function(errmsg, appid)
	{
		g.stop_ajax=true;
		var hash = location.href.split('#').splice(1).join('#');
		if(typeof errmsg == "undefined")
			errmsg="";

		
		var params = $.param({remote_error: 1, errmsg: errmsg, 
			appid: appid, appname: getAppname(appid)});
		if(hash.length>0)
		{
			hash+="&"+params;
		}
		else
		{
			hash=params;
		}

		location.href="index.htm"+rnd_param()+"#"+hash;
	}
	g.ajax_fail_cb = function(textStatus, errorThrown)
	{
		clearTimeout(g.refresh_timeout);
		g.refresh_timeout=-1;
		stopLoading();
		if(I("loadingModal"))
			$("#loadingModal").modal('hide');
		g.stop_ajax=true;
		I('main_nav').innerHTML="";
		I('nav_pos').innerHTML="";
		var stack="";
		if(typeof errorThrown.stack != "undefined")
			stack="\n\n"+errorThrown.stack;
		var ndata=dustRender("web_interface_error", {error_details: textStatus+"\n\n"+errorThrown+stack});
		if(g.data_f!=ndata)
		{
			destroy_selectpickers();
			$("#data_f").empty();
			I('data_f').innerHTML=ndata;
			dustPost(I('data_f'));
			g.data_f=ndata;
		}
	}
	g.ajax_exception_cb = function(e)
	{
		clearTimeout(g.refresh_timeout);
		g.refresh_timeout=-1;
		stopLoading();
		if(I("loadingModal"))
			$("#loadingModal").modal('hide');
		g.stop_ajax=true;
		I('main_nav').innerHTML="";
		I('nav_pos').innerHTML="";
		var stack="";
		if(typeof e.stack != "undefined" )
			stack = "\n\n"+e.stack;
		var ndata=dustRender("web_interface_error", {error_details: (""+e+stack)});
		if(g.data_f!=ndata)
		{
			destroy_selectpickers();
			$("#data_f").empty();
			I('data_f').innerHTML=ndata;
			dustPost(I('data_f'));
			g.data_f=ndata;
		}
	}
}
function deleteUser(uid)
{
	var c=confirm(trans("really_del_user"));
	if(c)
	{
		if(!startLoading()) return;
		new getJSONSingleApp("settings", "sa=removeuser&userid="+uid, show_settings2, g.settings_selected_app);
	}
}
function changeUserPassword(uid, name)
{
	var ndata=dustRender("settings_user_pw_change", {userid: uid, username: name});
	if(g.data_f!=ndata)
	{
		$("#data_f").empty();
		I('data_f').innerHTML=ndata;
		dustPost(I('data_f'));
		g.data_f=ndata;
	}
	I('password1').focus();
}
function changePW(el)
{
	if(I('clientpicker'))
	{
		I('clientpicker').selectedIndex=-1;
	}
	$("#change_pw_el").addClass("active");
	$("#client_settings_el").removeClass("active");
	data={};
	if(g.totp_enabled)
	{
		data.has_2factor=true;
	}
	var ndata=dustRender("change_pw", data);
	g.settings_nav_pos=g.user_nav_pos_offset-1;
	if(g.data_f!=ndata)
	{
		$("#data_f").empty();
		I('data_f').innerHTML=ndata;
		dustPost(I('data_f'));
		g.data_f=ndata;
	}
	I('old_password').focus();
}
function firmwareSettings()
{
	if(!startLoading()) return;
	g.settings_nav_pos = g.firmware_pos_offset;
	update_nav_bar(g.last_nav_info);
		
	new getJSONSingleApp("admin", "url=firmware_info", firmware_info_cb, g.settings_selected_app);
}

function saveFirmwareUpdateSetting()
{	
	if(!startLoading()) return true;
	new getJSONSingleApp("check_firmware", "save=true"+getPar("firmware_autoupdate"), check_firmware_cb, g.settings_selected_app);
}

function saveSSHServerSetting()
{	
	if(I("ssh_server_enabled"))
	{
		if(!startLoading()) return true;
		new getJSONSingleApp("admin", "url=set_ssh_service%2F"+(I("ssh_server_enabled").checked?"true":"false"), saveSSHServerSettingCb, g.settings_selected_app);
	}
}

function saveSSHServerSettingCb(data)
{
	stopLoading();
	
	if(data.ok)
	{
		if(I("ssh_server_enabled").checked)
		{
			I("ssh_save_feedback").innerHTML="Saved setting and started SSH server.";
		}
		else
		{
			I("ssh_save_feedback").innerHTML="Saved setting and stopped SSH server.";
		}
	}
	else
	{
		I("ssh_save_feedback").innerHTML="Error saving setting.";
	}
}

function saveSmbdServerSetting()
{	
	if(I("smbd_enabled"))
	{
		if(!startLoading()) return true;
		new getJSONSingleApp("admin", "url=set_smbd_service%2F"+(I("smbd_enabled").checked?"true":"false"), saveSmbdServerSettingCb, g.settings_selected_app);
	}
}

function saveSmbdServerSettingCb(data)
{
	stopLoading();
	
	if(data.ok)
	{
		if(I("smbd_enabled").checked)
		{
			I("smbd_save_feedback").innerHTML="Saved setting and started SMB server.";
		}
		else
		{
			I("smbd_save_feedback").innerHTML="Saved setting and stopped SMB server.";
		}
	}
	else
	{
		I("smbd_save_feedback").innerHTML="Error saving setting.";
	}
}

function saveNmbdServerSetting()
{	
	if(I("nmbd_enabled"))
	{
		if(!startLoading()) return true;
		new getJSONSingleApp("admin", "url=set_nmbd_service%2F"+(I("nmbd_enabled").checked?"true":"false"), saveNmbdServerSettingCb, g.settings_selected_app);
	}
}

function saveNmbdServerSettingCb(data)
{
	stopLoading();
	
	if(data.ok)
	{
		if(I("nmbd_enabled").checked)
		{
			I("nmbd_save_feedback").innerHTML="Saved setting and started NetBIOS server.";
		}
		else
		{
			I("nmbd_save_feedback").innerHTML="Saved setting and stopped NetBIOS server.";
		}
	}
	else
	{
		I("nmbd_save_feedback").innerHTML="Error saving setting.";
	}
}

function saveRedirService()
{	
	if(I("redir_service_enabled"))
	{
		if(!startLoading()) return true;
		new getJSONSingleApp("admin", "url=set_redir_service%2F"+(I("redir_service_enabled").checked?"true":"false"), saveRedirServiceCb, g.settings_selected_app);
	}
}

function saveRedirServiceCb(data)
{
	stopLoading();
	
	if(data.ok)
	{
		if(I("redir_service_enabled").checked)
		{
			I("redir_save_feedback").innerHTML="Saved setting and started tunnelling service.<br>Remote URL: <a href=\""+data.url+"\">"+data.url+"</a>";
		}
		else
		{
			I("redir_save_feedback").innerHTML="Saved setting and stopped tunnelling service.";
		}
	}
	else
	{
		I("redir_save_feedback").innerHTML="Error saving setting.";
	}
}

function populate_city()
{
	var region = I("tz_region").options[I("tz_region").selectedIndex].text;
	var rinner = "";
	for(var i=0;i<g.tzdata[region].length;++i)
	{
		rinner+='<option value="'+i+'">'+g.tzdata[region][i]+'</option>';
	}
	I("tz_city").innerHTML = rinner;
}

function firmware_info_cb(data)
{
	stopLoading();
	
	data.firmware_autoupdate = getCheckboxValue(data.update_firmware);
	data.ssh_server_enabled = getCheckboxValue(data.ssh_enabled);
	data.smbd_server_enabled = getCheckboxValue(data.smbd_enabled);
	data.nmbd_server_enabled = getCheckboxValue(data.nmbd_enabled);
	data.redir_service_enabled = getCheckboxValue(data.redir_enabled);
	g.tzdata = data.tzdata;
	
	if( (data.has_license_key
		&& data.license_type=="Ultimate Edition") 
		|| g.cloud_mode=="ec2"
		|| g.cloud_mode=="azure"
		|| g.cloud_mode=="ec2b")
	{
		data.can_change_appearance=true;
	}

	if(g.cloud_mode!="ec2")
	{
		data.can_reset_firmware=true;
	}
		
	var ndata=dustRender("firmware_info", data);
	
	if(g.data_f!=ndata)
	{
		I('data_f').innerHTML=ndata;
		dustPost(I('data_f'));
		g.data_f=ndata;
	}

	if(data.client_cbt_branch)
		I("client_cbt_branch").value=data.client_cbt_branch;

	if(data.app_theme)
		I("app_theme").value=data.app_theme;
	
	var rinner = ""
	var idx = 0;
	for(region in g.tzdata)
	{
		rinner+='<option value="'+idx+'">'+region+"</option>";
		idx+=1;
	}
	I("tz_region").innerHTML=rinner;
	
	I("tz_region").selectedIndex = data.tz_region;
	
	populate_city();
	
	I("tz_city").selectedIndex = data.tz_city;
	
	$("#tz_region").change(function() {
		populate_city();
	});

	if(data.schedule_update)
	{
		g.schedule_update=data.schedule_update;
	}
	else
	{
		delete g.schedule_update;
	}
	
	new getJSONSingleApp("check_firmware", "", check_firmware_cb, g.settings_selected_app);
	new getJSONSingleApp("check_firmware", "get=true", check_firmware_cb, g.settings_selected_app);
}

function saveSystemTimezone()
{
	if(!startLoading()) return;
	
	new getJSONSingleApp("admin", "url=set_timezone%2F"+I("tz_region").value+"%2F"+I("tz_city").value, saveSystemTimezoneCb, g.settings_selected_app);
}

function saveSystemTimezoneCb(data)
{
	stopLoading();

	if(data.ok)
	{
		I("timezone_save_feedback").innerHTML="Successfully changed system time zone";
	}
	else
	{
		I("timezone_save_feedback").innerHTML="Error changing system time zone: "+data.err;
	}
}

function check_firmware_cb(data)
{
	if(!I("firmware_autoupdate"))
		return;

	if(data.update_firmware)
	{
		I("firmware_autoupdate").checked=true;
	}
	else
	{
		I("firmware_autoupdate").checked=false;
	}
	
	if(I("firmware_update_setting"))
	{
		I("firmware_update_setting").style.display="inline";
	}
	
	if(data.saved_update_setting)
	{
		stopLoading();
		I("firmware_save_feedback").innerHTML="Saved setting successfully.";
	}

	if(data.checked_for_new_firmware)
	{
		if(data.new_firmware)
		{
			var u_html = 'New system update available (version '+data.new_version+'). '
				+'<input type="button" value="Update now (restarts system)" id="firmware_update_button" class="btn btn-primary" />';		

			if(data.changelog_url)
			{
				u_html+='&nbsp;&nbsp;<a href="'+data.changelog_url+'" target="_blank">Change log</a>';
			}

			var schedule_val="";
			var defaultDate = Date.now() + 1*60*60*1000;
			var currentlyScheduled="";
			var reSchedule="Schedule";
			if(g.schedule_update)
			{
				schedule_val=' value="'+g.schedule_update+'"';
				defaultDate = g.schedule_update*1000;
				currentlyScheduled = " <strong>(update is currently scheduled)</strong>";
				reSchedule = "Re-schedule";
			}

			u_html+='<br>'+reSchedule+' update'+currentlyScheduled+': <input id="schedule_update_picker" class="flatpickr flatpickr-input" type="text" '+
					'placeholder="Select date and time..." data-id="datetime" readonly="readonly"'+schedule_val+'>';
			u_html+='<input type="button" value="'+reSchedule+' update" id="schedule_update_button" class="btn btn-primary" />';

			I('firmware_update_available').innerHTML = u_html;
			$("#firmware_update_button").click(updateFirmwareNow);
			$("#schedule_update_button").click(scheduleUpdate);
			$("#schedule_update_picker").flatpickr({
				enableTime: true,
				dateFormat: "Y-m-d H:i",
				minDate: new Date(),
				defaultDate: new Date(defaultDate),
				time_24hr: true
			});
		}
		else
		{
			I('firmware_update_available').innerHTML="No system update available.";
		}
	}
}

function scheduleUpdate()
{
	if(!startLoading())return;
	var fp = I("schedule_update_picker")._flatpickr;
	if(fp.selectedDates.length!=1)
	{
		alert("No date selected");
		stopLoading();
		return;
	}

	var d = fp.selectedDates[0];
	var timestamp = Math.round(d.getTime()/1000)
	new getJSONSingleApp("admin", "url=schedule_update%2F"+timestamp, scheduleUpdateCb, g.settings_selected_app);
}

function scheduleUpdateCb(data)
{
	stopLoading();

	if(!data.ok)
	{
		alert("Error scheduling update");
		return;
	}

	if(data.err)
	{
		alert("Error scheduling update: "+data.err);
	}
}

function updateFirmwareNow()
{
	if(!startLoading())return;
	
	show_live_log_params(-1, "System update process", g.settings_selected_app);
	
	new getJSONSingleApp("check_firmware", "apply=true", firmware_update_done_cb, g.settings_selected_app);
}

function firmware_update_done_cb(data)
{
	stopLoading();
	
	if(data.in_progress)
	{
		if(!startLoading())return;
		new getJSONSingleApp("check_firmware", "apply=true&continue=1", firmware_update_done_cb, g.settings_selected_app);
		return;
	}
	
	if(data.success)
	{
		I('firmware_update_available').innerHTML="System updated successfully. Current version is "+data.new_version+".";
		
		if(data.restarting)
		{
			restartWait();
		}
	}
	else
	{
		I('firmware_update_available').innerHTML="Error while updating system. See log for details.";
	}
}

function networkingSettings()
{
	if(!startLoading()) return;
	g.settings_nav_pos = g.networking_pos_offset;
	update_nav_bar(g.last_nav_info);
		
	new getJSONSingleApp("admin", "url=wired_settings", networkSettingsCb, g.settings_selected_app);
}

function setIfWriredType(data)
{
	if(!data.wired_connected)
		data.wired_disabled=true;
	else if(data.wired_type=="disabled")
		data.wired_disabled=true;
	else if(data.wired_type=="cloud-init")
		data.wired_cloud_init=true;
	else if(data.wired_type=="stateless")
		data.wired_stateless=true;
	else if(data.wired_type=="auto")
		data.wired_auto=true;
}

function networkSettingsCb(data)
{
	stopLoading();
	
	data.idx="";
	setIfWriredType(data);
	var ifs= dustRender("wired_interface", data);
	
	for(var i=0;i<data.ifs.length;++i)
	{
		data.ifs[i].idx = i+1;
		setIfWriredType(data.ifs[i]);
		ifs+=dustRender("wired_interface", data.ifs[i]);
	}
	
	/*if(data.wired_type=="manual")
	{
		data.networkConfigAuto="";
		data.networkConfigStatic="checked=\"checked\"";
	}
	else
	{
		data.networkConfigAuto="checked=\"checked\"";
		data.networkConfigStatic="";
	}*/
	
	data.wired_interfaces = ifs;
	
	var ndata=dustRender("network_settings", data);
	
	if(g.data_f!=ndata)
	{
		I('data_f').innerHTML=ndata;
		dustPost(I('data_f'));
		dustPost(I('data_f'), "wired_interface");
		g.data_f=ndata;
	}
	
	enableDisableNetworkSettingsInputs();
	
	new getJSONSingleApp("admin", "url=wifi_scan", wifiScanResults, g.settings_selected_app);
}

function checkIp(id, ipv6, optional)
{
	if(typeof optional!="undefined" &&
		optional && I(id).value.length==0)
		return true;

	var ipRegex = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).??(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
	if(ipv6)
		ipRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;
	
	if(!ipRegex.test(I(id).value))
	{
		if(ipv6)
			alert("Sorry, not a valid IPv6-Adress");
		else
			alert("Sorry, not a valid IPv4-Adress");

		I(id).focus();
		return false;
	}
	
	return true;
}

function networkSettingsByIdx(idx)
{	
	var ipv6 = false;
	if(I("ipv6"+idx) &&
		I("ipv6"+idx).value=="1")
		ipv6 = true;

	var ipv6_val = ipv6 ? 1 : 0;

	if(I("networkConfig4"+idx)
		&& I("networkConfig4"+idx).checked)
	{
		return {"type": "cloud-init", "iface": I("iface"+idx).value};
	}
	else if(!I("networkConfig1"+idx).checked
		&& !I("networkConfig3"+idx).checked
		&& (!I("networkConfig5"+idx) ||
			!I("networkConfig5"+idx).checked) )
	{
		if(!checkIp("ipaddress"+idx, ipv6)) return {"err": true};
		if(!checkIp("subnetworkmask"+idx, ipv6)) return {"err": true};
		if(!checkIp("gateway"+idx, ipv6, true)) return {"err": true};
		if(idx=="")
		{
			if(!checkIp("dns"+idx, ipv6)) return {"err": true};
		}
		
		return {"type": "manual", "iface": I("iface"+idx).value, "ip": I("ipaddress"+idx).value, "netmask": I("subnetworkmask"+idx).value, "gateway": I("gateway"+idx).value, "dns": I("dns"+idx).value, "ipv6": ipv6_val };
	}
	else if(I("networkConfig1"+idx).checked)
	{
		return {"type": "auto", "iface": I("iface"+idx).value, "ipv6": ipv6_val };
	}
	else if(I("networkConfig5"+idx) && I("networkConfig5"+idx).checked)
	{
		return {"type": "stateless", "iface": I("iface"+idx).value, "ipv6": ipv6_val };
	}
	else
	{
		return {"type": "disabled", "iface": I("iface"+idx).value, "ipv6": ipv6_val };
	}
}

function saveNetworkSettings()
{
	var jdata = [networkSettingsByIdx("")];
	if(jdata[0].err) return;
	
	idx=1;
	while(I("networkConfig1"+idx))
	{
		jdata.push(networkSettingsByIdx(idx));
		if(jdata[jdata.length-1].err) return;
		++idx;
	}
	
	if(!startLoading()) return;	
	new getJSONSingleApp("admin", "url=network_config_m%2F0%2F"+encode2(JSON.stringify({"ifs":jdata})), savedNetworkSettings, g.settings_selected_app);
}

function wifiScanResults(data)
{
	if(!data.ok)
	{
		$("#scan_results").html("Error scanning for WLAN networks");
		return;
	}
	else
	{
		$("#scan_results").html(dustRender("wlan_scan_results_settings", data));
		dustPost(I('scan_results'));
	}
}

function wifi_connect(ssid, encrypted)
{
	if(encrypted)
	{
		$("#scan_results").html(dustRender("wifi_password_settings", {ssid: ssid}));
		dustPost(I('scan_results'));
	}
	else
	{
		$("#scan_results").html(dustRender("wifi_connecting"));
		dustPost(I('scan_results'));
		new getJSONSingleApp("admin", "url=wifi_connect%2F"+encode2(ssid), wlan_connect_result, g.settings_selected_app);
	}
}

function wifi_disconnect(ssid)
{
	if(confirm("Do you really want to disconnect from Wifi?"))
	{
		$("#scan_results").html(dustRender("wifi_disconnecting"));
		dustPost(I('scan_results'));
		new getJSONSingleApp("admin", "url=wifi_disconnect%2F"+encode2(ssid), wlan_disconnect_result, g.settings_selected_app);
	}
}

function wifi_connect_pw(ssid)
{
	pw = $("#wifi_password").val();
	$("#scan_results").html(dustRender("wifi_connecting"));
	dustPost(I('scan_results'));
	new getJSONSingleApp("admin", "url=wifi_connect%2F"+encode2(ssid)+"%2F"+encode2(pw), wlan_connect_result, g.settings_selected_app);
}

function wlan_connect_result(data)
{
	if(data.connected)
	{
		$("#scan_results").html(dustRender("wifi_connected", data));
		dustPost(I('scan_results'));
	}
	else
	{
		alert("Error connecting to Wifi network: "+data.err);
		$("#scan_results").html(dustRender("wifi_searching", data));
		dustPost(I('scan_results'));
		new getJSONSingleApp("admin", "url=wifi_scan", wifiScanResults, g.settings_selected_app);
	}
}

function wlan_disconnect_result(data)
{
	if(data.ok)
	{
		$("#scan_results").html(dustRender("wifi_searching", data));
		dustPost(I('scan_results'));
		new getJSONSingleApp("admin", "url=wifi_scan", wifiScanResults, g.settings_selected_app);
	}
	else
	{
		alert("Error disconnecting from wifi network: "+data.err);
	}
}

function savedNetworkSettings(data)
{
	stopLoading();
	if(data.ok && data.needs_reboot)
	{
		I("network_settings_feedback").innerHTML="Saved network settings successfully! Need to reboot for settings to come into effect.";
	}
	else if(data.ok)
	{
		I("network_settings_feedback").innerHTML="Saved network settings successfully!";
	}
	else
	{
		I("network_settings_feedback").innerHTML="Error saving network settings";
	}	
}

function enableDisableNetworkSettingsInputs()
{
	if(I("networkConfig1"))
	{
		if(I("networkConfig1").checked
				|| I("networkConfig3").checked
				|| (I("networkConfig5") && I("networkConfig5").checked) )
		{	
			I("wired-static").style.display="none";
		}
		else
		{
			I("wired-static").style.display="inline";
		}
	}
	
	var idx=1;
	while(I("networkConfig1"+idx))
	{
		var dis = false
		if(I("networkConfig1"+idx).checked
				|| I("networkConfig3"+idx).checked
				|| (I("networkConfig5"+idx) && I("networkConfig5"+idx).checked))
		{	
			I("wired-static"+idx).style.display="none";
		}
		else
		{
			I("wired-static"+idx).style.display="inline";
		}		
		++idx;
	}
}

function monitoringSettings()
{
	if(!startLoading()) return;
	g.settings_nav_pos = g.monitoring_pos_offset;
	update_nav_bar(g.last_nav_info);
		
	new getJSONSingleApp("admin", "url=monitoring_settings", monitoringSettingsCb, g.settings_selected_app);
}

function monitoringSettingsCb(data)
{
	stopLoading();
	
	var ndata=dustRender("monitoring_settings", data);
	
	if(g.data_f!=ndata)
	{
		I('data_f').innerHTML=ndata;
		dustPost(I('data_f'));
		g.data_f=ndata;
	}
	
	I("monitoring_enabled").checked=false;
	
	var has_email = false;
	var has_sms = false;
	var has_call = false;

	if(data.settings)
	{
		if(data.settings.monitoring_enabled)
		{
			I("monitoring_enabled").checked=true;
		}
	
		if(data.settings.emails)
		{
			for(var i=0;i<data.settings.emails.length;++i)
			{
				I("emails").innerHTML+='<input type="text" value="' + data.settings.emails[i] + '" class="form-control" /><br />';
				has_email=true;
			}
		}
		
		if(data.settings.phone_sms)
		{
			for(var i=0;i<data.settings.phone_sms.length;++i)
			{
				I("phone_sms").innerHTML+='<input type="text" value="' + data.settings.phone_sms[i] + '" class="form-control" /><br />';
				has_sms=true;
			}
		}
		
		if(data.settings.phone_call)
		{
			for(var i=0;i<data.settings.phone_call.length;++i)
			{
				I("phone_call").innerHTML+='<input type="text" value="' + data.settings.phone_call[i] + '" class="form-control" /><br />';
				has_call=true;
			}
		}
	}
	
	if(data.settings && data.settings.notify_time && data.settings.notify_time_unit)
	{
		if(data.settings.notify_time_unit=="min")
		{
			I("notify_time").value=data.settings.notify_time/60;
		}
		else if(data.settings.notify_time_unit=="hours")
		{
			I("notify_time").value=data.settings.notify_time/(60*60);
		}
		else if(data.settings.notify_time_unit=="days")
		{
			I("notify_time").value=data.settings.notify_time/(60*60*24);
		}
	}
	else
	{
		I("notify_time").value="15";
	}
	
	if(!has_email)
	{
		I("emails").innerHTML+='<input type="text" value="" class="form-control" /><br />';
	}
	
	if(!has_sms)
	{
		I("phone_sms").innerHTML+='<input type="text" value="" class="form-control" /><br />';
	}
	
	if(!has_call && I("phone_call"))
	{
		I("phone_call").innerHTML+='<input type="text" value="" class="form-control" /><br />';
	}
}

function monitoringAddEmail()
{
	I("emails").innerHTML+='<input type="text" value="" class="form-control" /><br />';
}

function monitoringAddPhoneSms()
{
	I("phone_call").innerHTML+='<input type="text" value="" class="form-control"  /><br />';
}

function monitoringAddPhoneSms()
{
	I("phone_sms").innerHTML+='<input type="text" value="" class="form-control"  /><br />';
}

function saveMonitoringSettings()
{
	var settings = {};
	
	settings.monitoring_enabled = I("monitoring_enabled").checked;
	
	settings.emails = [];
	$.each($("#emails input"), function(i, el) {
		if(el.value.length>0)
			settings.emails.push(el.value);
	});
	
	settings.phone_sms = [];
	$.each($("#phone_sms input"), function(i, el) {
		if(el.value.length>0)
			settings.phone_sms.push(el.value);
	});
	
	settings.phone_call = [];
	$.each($("#phone_call input"), function(i, el) {
		if(el.value.length>0)
			settings.phone_call.push(el.value);
	});
	
	
	settings.notify_time = I("notify_time").value;
	settings.notify_time_unit = I("notify_time_unit").value;
	
	if(settings.notify_time_unit=="min")
	{
		settings.notify_time*=60;
	}
	else if(settings.notify_time_unit=="hours")
	{
		settings.notify_time*=60*60;
	}
	else if(settings.notify_time_unit=="days")
	{
		settings.notify_time*=60*60*24;
	}
	
	if(!startLoading()) return;
	new getJSONSingleApp("admin", "url=setup_monitoring%2F"+encode2(JSON.stringify(settings)), saveMonitoringSettingsCb, g.settings_selected_app);
}

function saveMonitoringSettingsCb(data)
{
	stopLoading();
	if(!data.ok)
	{
		alert("Sorry, an error while saving the settings occured: " + data.err);
	}
}

function storageSettings()
{
	if(!startLoading()) return;
	g.settings_nav_pos = g.storage_pos_offset;
	update_nav_bar(g.last_nav_info);
		
	new getJSONSingleApp("admin", "url=storage_settings", storageSettingsCb, g.settings_selected_app);
}

function storageSettingsCb(data)
{
	stopLoading();
	
	var has_offline=false;
	var has_device_locate=false;
	var has_locate_on = false;
	for(var i=0;i<data.devices.length;++i)
	{
		if(!data.devices[i].online)
		{
			has_offline=true;
		}

		data.devices[i].name = unescapeHTML(data.devices[i].name);
		
		data.devices[i].orig_size = data.devices[i].size;
		data.devices[i].size = format_size(data.devices[i].size);
		
		if(data.devices[i].online)
		{
			if(data.devices[i].read_only==1)
			{
				data.devices[i].online="Yes (read only)";
			}
			else if(data.devices[i].offline_freespace==1)
			{
				data.devices[i].online="Yes (full)";
			}
			else
			{
				data.devices[i].online="Yes";
			}
		}
		else
		{
			data.devices[i].online="No";
		}
		data.devices[i].complete_uuid = data.devices[i].uuid;
		data.devices[i].uuid = data.devices[i].uuid.substr(0, 10);

		if(data.devices[i].usage=="raid" || data.devices[i].usage=="remote_raid" || data.devices[i].usage=="remote_raid_fs")
		{
			data.devices[i].has_advanced_settings=true;
			data.devices[i].can_delete=true;
			data.has_scrub=true;
<<<<<<< HEAD
			if(data.devices[i].notes && data.devices[i].notes.length>0)
			{
				data.devices[i].has_notes = true;
				data.devices[i].notes = unescapeHTML(data.devices[i].notes);
=======
			if(data.devices[i].errors>0)
			{
				data.has_reset_raid_error_counter=true;
>>>>>>> e9b5a088c (Add reset RAID disk error counter button)
			}
		}

		if(data.devices[i].usage=="raidcache" || data.devices[i].usage=="cloudcache")
		{
			data.devices[i].can_reset=true;
		}
		
		if(data.devices[i].usage=="raid"
			&& data.devices.length>2)
		{
			data.devices[i].can_replace=true;
		}

		if(data.devices[i].usage.indexOf("raiddevcache")==0)
		{
			data.devices[i].can_delete=true;
		}

		if(typeof data.devices[i].space!="undefined"
			&& data.devices[i].space!="-")
		{
			data.devices[i].has_space=true;
		}

		if(data.devices[i].can_locate)
			has_device_locate=true;

		if(data.devices[i].locate_on)
			has_locate_on=true;
	}
	
	data.has_offline = has_offline;
	data.has_locate = has_device_locate;
	data.has_locate_on = has_locate_on
	
	g.curr_devices = data.devices;
	g.new_devices = data.new_devices;
	for(var i=0;i<data.new_devices.length;++i)
	{
		data.new_devices[i].fn = unescapeHTML(data.new_devices[i].fn);
		data.new_devices[i].orig_size = data.new_devices[i].size;
		data.new_devices[i].size = format_size(data.new_devices[i].size);
	}
		
	if(!data.curr_data_redundancy)
	{
		data.curr_data_redundancy="Automatic";
	}
	else if(data.curr_data_redundancy=="single")
	{
		data.curr_data_redundancy="On one device";
	}
	else if(data.curr_data_redundancy=="raid1")
	{
		data.curr_data_redundancy="To two different devices";
	}
	
	if(data.raid_mode)
	{
		data.curr_data_redundancy="Constraints: Failure probability per year <= " + (data.raid_failure_probability*100.0) + "%; storage overhead <= "+(data.raid_overhead*100.0)+"%. Resulting layout: <br>"
					+data.raid_layout.replace("\n","<br>");
		
		overheads=[0.15,0.20,0.25,0.33,0.40,0.50];
		probs=[0.001,0.005,0.01,0.05,0.1,0.2];
		data.raid_settings=[]
		
		for(var i=0;i<probs.length;++i)
		{
			for(var j=0;j<overheads.length;++j)
			{
				var option_selected = "";
				if(probs[i]==parseFloat(data.raid_failure_probability)
					&& overheads[j]==parseFloat(data.raid_overhead) )
				{
					option_selected="selected";
				}	
				data.raid_settings.push({
					failure_prop: probs[i],
					failure_prop_pc: probs[i]*100.0,
					overhead: overheads[j],
					overhead_pc: overheads[j]*100.0,
					option_selected: option_selected
				});					
			}
		}
		prepareAdvancedSettings(data.advanced_raid_settings);
		data.advanced_raid_settings.raid_settings=true;
		data.orig_advanced_raid_settings = data.advanced_raid_settings;
		data.advanced_raid_settings = dustRender("advanced_clouddrive_settings", data.advanced_raid_settings);
	}
	
	data.upload_encryption_keys = getCheckboxValue(data.upload_encryption_keys);
	data.with_encryption_key_upload = g.has_account;

	if(data.iscsi_initiator_name)
	{
		g.iscsi_initiator_name = data.iscsi_initiator_name;
	}

	if(data.iscsi_targets.length>0)
		data.has_iscsi_targets=true;

	g.iscsi_targets = data.iscsi_targets;
	
	var ndata=dustRender("storage_settings", data);
	
	if(g.data_f!=ndata)
	{
		I('data_f').innerHTML=ndata;
		dustPost(I('data_f'));
		dustPost(I('data_f'), "advanced_clouddrive_settings")
		g.data_f=ndata;
	}
	
	if(!data.raid_mode
		&& I("data_redundancy"))
	{
		if(data.data_redundancy=="auto")
		{
			I("data_redundancy").selectedIndex=0;
		}
		else if(data.data_redundancy=="single")
		{
			I("data_redundancy").selectedIndex=1;
		}
		else if(data.data_redundancy=="raid1")
		{
			I("data_redundancy").selectedIndex=2;
		}
	}

	if(data.raid_mode)
	{
		if(data.orig_advanced_raid_settings.compression_method)
			$("#compression_method").val(data.orig_advanced_raid_settings.compression_method);
		if(data.orig_advanced_raid_settings.background_compression_method)
			$("#background_compression_method").val(data.orig_advanced_raid_settings.background_compression_method);
		if(data.orig_advanced_raid_settings.metadata_compression_method)
			$("#metadata_compression_method").val(data.orig_advanced_raid_settings.metadata_compression_method);
		if(data.orig_advanced_raid_settings.file_system_compression)
			$("#file_system_compression").val(data.orig_advanced_raid_settings.file_system_compression);
		if(data.orig_advanced_raid_settings.cache_file_compression_method)
			$("#cache_file_compression_method").val(data.orig_advanced_raid_settings.cache_file_compression_method);
		if(data.orig_advanced_raid_settings.cache_meta_file_compression_method)
			$("#cache_meta_file_compression_method").val(data.orig_advanced_raid_settings.cache_meta_file_compression_method);

		$("#cache_compression").val(data.orig_advanced_raid_settings.cache_compression);
		$("#ext_freespace_cache").val(data.orig_advanced_raid_settings.ext_freespace_cache);
		$("#ext_raid_db_cache").val(data.orig_advanced_raid_settings.ext_raid_db_cache);

		$("#cache_compression").val(data.orig_advanced_raid_settings.cache_compression);
		if(data.orig_advanced_raid_settings.memcache_compression)
			$("#memcache_compression").val(data.orig_advanced_raid_settings.memcache_compression);
	}
	
	new getJSONSingleApp("admin", "url=clouddrive_stats", clouddriveStatsCb, g.settings_selected_app);
}

function clouddriveStatsCb(data)
{
	if(I("cloud_storage"))
	{
		data.size=format_size(data.size);
		data.used_pc = Math.round(100*data.used/data.max_size);
		data.max_size=format_size(data.max_size);
		data.used=format_size(data.used);
		
		I("cloud_storage").innerHTML=dustRender("cloud_storage_info", data);
		dustPost(I("cloud_storage"));
	}
}

function removeIscsiTarget(hostname, name)
{
	if(confirm("Do you really want to remove iSCSI target "+name+" on portal "+hostname+"?"))
	{
		if(!startLoading()) return;

		new getJSONSingleApp("admin", "url=remove_iscsi_target%2F"+encode2(hostname)+"%2F"+encode2(name), removeIscsiTargetCb, g.settings_selected_app);
	}
}

function removeIscsiTargetCb(data)
{
	stopLoading();
	if(!data.ok)
	{
		alert("Error removing iSCSI target.\n"+data.err);
		return;
	}

	storageSettings();
}

function saveDataRedundancy()
{
	if(I("data_redundancy"))
	{
		if(!startLoading()) return;
		
		new getJSONSingleApp("admin", "url=change_data_redundancy%2F"+encode2(I("data_redundancy").value), saveDataRedundancyCb, g.settings_selected_app);
	}
}

function saveDataRedundancyCb(data)
{
	stopLoading();
	
	if(data.ok)
	{
		I("data_redundancy_save_feedback").innerHTML="Successfully saved setting and started conversion process";
	}
	else
	{
		alert("Error setting data redundancy: "+data.err);
	}
}

function removeOfflineDevices()
{
	if(!startLoading()) return;
	
	new getJSONSingleApp("admin", "url=remove_offline_devices", removeOfflineDevicesCb, g.settings_selected_app);
}

function removeOfflineDevicesCb(data)
{
	stopLoading();
	
	if(!data.ok)
	{
		alert("Error while removing offline storage devices");
	}
	else
	{
		storageSettings();
	}
}

function doChangePW()
{	
	var password1=I('password1').value;
	var password2=I('password2').value;
	
	if( password1.length==0 )
	{
		alert(trans("password_empty"));
		I('password1').focus();
		return;
	}
	
	if( password1!=password2 )
	{
		alert(trans("password_differ"));
		I('password1').focus();
		return;
	}
	
	if(!startLoading()) return;
	new getJSONSingleApp("salt", "", doChangePW2, g.settings_selected_app);
}
function doChangePW2(data)
{
	if(data.error==0)
	{
		alert(trans("user_n_exist"));
		stopLoading();
		I('old_password').focus();
		return;
	}
	
	var password=I('old_password').value;
	var password1=I('password1').value;
	
	var pwmd5 = calcMD5(data.salt+password);
	
	if(data.pbkdf2_rounds>0)
	{
		pwmd5 = sjcl.codec.hex.fromBits(sjcl.misc.pbkdf2(sjcl.codec.hex.toBits(pwmd5), data.salt, data.pbkdf2_rounds));
	}
	
	pwmd5=calcMD5(data.rnd+pwmd5);
	
	var new_salt = randomString();
	var pwmd5_new = calcMD5(new_salt + password1);
		
	var pars="&userid=own&pwmd5="+pwmd5_new+"&salt="+new_salt+"&old_pw="+pwmd5;
	
	new getJSONSingleApp("settings", "sa=changepw"+pars, doChangePW3, g.settings_selected_app);
}

function doChangePW3(data)
{
	stopLoading();
	var ndata;
	if(data.change_ok)
	{
		ndata=dustRender("change_pw_ok");
	}
	else
	{
		var fail_reason="";
		if(data.old_pw_wrong)
		{
			alert(trans("old_pw_wrong"));
			I('old_password').focus();
			return;
		}
		ndata=dustRender("change_pw_fail", {fail_reason: fail_reason});
	}
	if(g.data_f!=ndata)
	{
		destroy_selectpickers();
		$("#data_f").empty();
		I('data_f').innerHTML=ndata;
		dustPost(I('data_f'));
		g.data_f=ndata;
	}
}
function changeUserPW(uid)
{	
	var password1=I('password1').value;
	var password2=I('password2').value;
	
	if( password1.length==0 )
	{
		alert(trans("password_empty"));
		I('password1').focus();
		return;
	}
	
	if( password1!=password2 )
	{
		alert(trans("password_differ"));
		I('password1').focus();
		return;
	}
	
	var salt=randomString();
	var password_md5=calcMD5(salt+password1);
	
	var pars="&userid="+uid+"&pw="+encodeURIComponent(password1)+"&pwmd5="+password_md5+"&salt="+salt;
	
	if(!startLoading()) return;
	new getJSONSingleApp("settings", "sa=changepw"+pars, show_settings2, g.settings_selected_app);
}
function transRights()
{
	var n=0;
	while(true)
	{
		var right=I('right'+n);
		var right_trans=I('right_trans'+n);
		if( right!=null && right_trans!=null )
		{
			var t="";
			if(right.value=="all")
			{
				t=trans("right_all");
			}
			else if(right.value=="none")
			{
				t=trans("right_none");
			}
			else
			{
				var s=right.value.split(",");
				for(var j=0;j<s.length;++j)
				{
					var f=false;
					var fn="";
					for(var k=0;k<g.settings_clients.length;++k)
					{
						if(g.settings_clients[k].id==s[j])
						{
							fn=g.settings_clients[k].name;
							f=true;
							break;
						}
					}
					
					if(f)
					{
						if(t.length>0)t+=",";
						t+=fn;
					}
				}
			}
			right_trans.value=t;
			
		}
		else
		{
			break;
		}
		++n;
	}
}

function changeUserRights(uid, name)
{
	var rows="";
	for(var i=0;i<g.user_rights[uid].length;++i)
	{
		var obj=g.user_rights[uid][i];
		obj.userid=uid;
		obj.username=name;
		obj.n=i;
		
		
		rows+=dustRender("settings_user_rights_change_row", obj);
	}
	var ndata=dustRender("settings_user_rights_change", {userid: uid, username: name, rows: rows});
	if(g.data_f!=ndata)
	{
		destroy_selectpickers();
		$("#data_f").empty();
		I('data_f').innerHTML=ndata;
		dustPost(I('data_f'));
		dustPost(I('data_f'), "settings_user_rights_change_row");
		g.data_f=ndata;
	}
	transRights();
}
function deleteDomain(uid, name, n)
{
	g.user_rights[uid].splice(n,1);
	changeUserRights(uid, name);
}
function addNewDomain(uid, name)
{
	obj={ domain: "", right: ""};
	g.user_rights[uid].push(obj);
	changeUserRights(uid, name);
}
function submitChangeUserRights(uid)
{
	if(!startLoading()) return false;
	
	var n=0;
	var rights=[];
	while(true)
	{
		var right=I('right'+n);
		var domain=I('domain'+n);
		if( right!=null && domain!=null )
		{
			rights.push( { right: right.value, domain: domain.value } );
		}
		else
		{
			break;
		}
		++n;
	}
	
	new getJSONSingleApp("settings", "sa=updaterights&userid="+uid+"&rights="+generateRightsParam(rights), show_settings2, g.settings_selected_app);
}

function saveReportSettings()
{
	if(!startLoading()) return;
	clearTimeout(g.refresh_timeout);
	g.refresh_timeout=-1;
	
	logs_add_mail();
	
	var params="d=d";
	params+=getPar("report_mail");
	params+=getPar("report_sendonly");
	params+=getPar("report_loglevel");
	
	new getJSON("logs", params, show_logs2);
}

function show_logs1()
{
	if(!startLoading()) return;
	clearTimeout(g.refresh_timeout);
	g.refresh_timeout=-1;
	g.has_logsfilter=false;
	g.has_logclients=false;
	new getJSONMultiple("logs", "", show_logs2, show_logs_aggregate);
	
	g.main_nav_pos=3;
	build_main_nav();
	I('nav_pos').innerHTML="";
}

function show_logs1_filter()
{
	if(g.has_logclients && g.logclients!=-1)
	{
		if(!startLoading()) return;
		var t_clientid = revMapClientId(g.logclients);
		g.logsappid = t_clientid.appid;

		var loglevel = "";
		if(g.has_logsfilter)
		{
			loglevel="&ll="+g.logsfilter;
		}

		new getJSONSingleApp("logs", "filter="+t_clientid.id+loglevel, show_logs2_map, t_clientid.appid);
		updateLogsParam();
	}
	else if(g.has_logsfilter)
	{
		if(!startLoading()) return;
		new getJSONMultiple("logs", "ll="+g.logsfilter, show_logs2, show_logs_aggregate);
	}
	else
	{
		show_logs1();
	}
}

function show_logs2_map(data)
{
	show_logs2(show_logs_map_id(g.logsappid, "", data));
}

function show_logs2(data)
{
	stopLoading();

	destroy_selectpickers();
	
	var live_log_clients="";

	if(data.clients && !data.filter && !data.log)
	{
		g.all_log_clients = data.clients;
	}
	else if(data.clients && !data.log && data.filter)
	{
		data.clients = g.all_log_clients;
	}

	if(data.clients && !data.log)
	{
		var np="";
		np+="<form class=\"form-inline\" role=\"form\">";
		np+="<div class=\"form-group\">";
		np+="<label for=\"logsfilter\">";
		np+=trans("filter")+": ";
		np+="</label>";
		np+=dustRender("logs_filter");
		np+="<span class=\"urbackup_span_margin_left10\">";
		np+="<select id=\"logclients\" class=\"selectpicker\" data-container=\"body\" data-live-search=\"true\">";
		np+="<option value=\"-1\">"+trans("all_clients")+"</option>";
		var mapped_filter = null;
		if(data.filter)
		{
			mapped_filter = mapClientId(data.filter, data.filter_appid);
		}
		for(var i=0;i<data.clients.length;++i)
		{
			var obj=data.clients[i];
			var c="";
			if(mapped_filter!=null && obj.id==mapped_filter)
			{
				c="selected=\"selected\"";
			}
			np+="<option value=\""+obj.id+"\" "+c+">";
			np+=obj.name;
			np+="</option>";
		}
		np+="</span>";
		np+="</div>";
		np+="</form>";
		
		
		I('nav_pos').innerHTML=np;
		dustPost(I('nav_pos'));
		$("#logclients").change(logClientChange);
		setup_selectpicker("#logclients");
		
		I('logsfilter').selectedIndex=2-data.ll;
		
		if(data.all_clients)
		{
			for(var i=0;i<g.remote_apps.length;++i)
			{
				live_log_clients+="<option value=\"0-"+g.remote_apps[i].id+"\">"+trans("all_clients")+": "+g.remote_apps[i].name+"</option>";
			}
		}		
		for(var i=0;i<data.log_right_clients.length;++i)
		{
			var obj=data.log_right_clients[i];
			var cname = obj.name;
			if(obj.appextra)
				cname+=" ("+obj.appextra+")";
			live_log_clients+="<option value=\""+obj.id+"\">"+cname+"</option>";
		}
	}
	else
	{
		var np=dustRender("log_single_filter");
		I('nav_pos').innerHTML=np;
		dustPost(I('nav_pos'));
	}
	
	var ndata="";
	
	if(data.logs)
	{
		var rows="";
		for(var i=0;i<data.logs.length;++i)
		{
			var obj=data.logs[i];
			
			if(obj.errors>0)
				obj.eclass="danger";
			
			if(obj.warnings>0)
				obj.wclass="warning";
				
			var action=0;
			if(obj.restore!=0)
			{
				if(obj.image==0)
				{
					action=8;
				}
				else
				{
					action=9;
				}
			}
			else if(obj.image==0)
			{
				if(obj.resumed==0)
				{
					if(obj.incremental>0)
						action=1;
					else
						action=2;
				}
				else
				{
					if(obj.incremental>0)
						action=5;
					else
						action=6;
				}
			}
			else
			{
				if(obj.incremental>0)
					action=3;
				else
					action=4;
			}
			var a="action_"+action;
			
			obj.action=trans(a);
			
			obj.time = format_unix_timestamp(obj.time);
			
			rows+=dustRender("logs_row", obj);
		}
		if(data.logs.length==0)
			rows=dustRender("logs_none");
			
			
		var sel="selected=\"selected\"";
		
		var td={};
		td.rows=rows;
		td.report_mail=data.report_mail;
		td.sel_all=(data.report_sendonly==0)?sel:"";
		td.sel_failed=(data.report_sendonly==1)?sel:"";
		td.sel_succ=(data.report_sendonly==2)?sel:"";
		td.sel_failed_clienttimeout=(data.report_sendonly==3)?sel:"";
		td.sel_info=(data.report_loglevel==0)?sel:"";
		td.sel_warn=(data.report_loglevel==1)?sel:"";
		td.sel_error=(data.report_loglevel==2)?sel:"";
		td.live_log_clients=live_log_clients;
		td.can_report_script_edit = data.can_report_script_edit;
		if(data.has_user)
		{
			td.has_user=true;
		}
			
		ndata+=dustRender("logs_table", td);
	}
	
	if(data.log)
	{
		g.logdata=data.log.data;
		var ll=2;
		if(g.has_logfilter)
			ll=g.logfilter;
		var rows=createLog(g.logdata,ll);
		if(rows=="")
			rows=dustRender("log_single_none");
		g.logclientname=data.log.clientname;
		ndata+=dustRender("log_single", {rows:rows, name: data.log.clientname});
	}
	
	if(data.saved_ok)
	{
		ndata+=dustRender("settings_save_ok");
	}	
	
	if(g.data_f!=ndata)
	{
		$("#data_f").empty();
		I('data_f').innerHTML=ndata;
		dustPost(I('data_f'));
		dustPost(I('data_f'), 'log_single');
		dustPost(I('data_f'), 'log_single_none');
		dustPost(I('data_f'), 'logs_table');
		dustPost(I('data_f'), 'logs_none');
		dustPost(I('data_f'), 'logs_row');
		g.data_f=ndata;
	}
	
	setup_selectpicker("#live_log_clientid");
	$("#live_log_clientid").prop('selectedIndex', -1);
	
	if(g.has_logfilter && I('logfilter'))
	{
		I('logfilter').selectedIndex=2-g.logfilter;
	}
	
	if(data.logs)
	{
		logs_draw_mail();
	}
}
function logs_draw_mail()
{
	if(!I('report_mail'))
	{
		return;
	}
	var d="";
	var a=I('report_mail').value.split(';');
	for(var i=0;i<a.length;++i)
	{
		if(a[i]!="")
		{
			d+=dustRender("logs_report_mail",  {report_single_mail: a[i], num: i} );
		}
	}
	I('s_report_mails').innerHTML=d;
	if(d.length>0)
		dustPost(I('s_report_mails'))
}
function logs_add_mail()
{
	if(I('report_new_mail').value!='')
	{
		if( I('report_mail').value=='' )
		{
			I('report_mail').value=I('report_new_mail').value;
		}
		else
		{
			I('report_mail').value+=';'+I('report_new_mail').value;
		}
		I('report_new_mail').value="";
		logs_draw_mail();
	}
}
function logs_rm_mail(idx)
{
	var a=I('report_mail').value.split(';');
	var n="";
	for(var i=0;i<a.length;++i)
	{
		if(n.length>0) n+=";";
		
		if(i!=idx)
		{
			n+=a[i];
		}
	}
	I('report_mail').value=n;
	logs_draw_mail();
}
function createLog(d, ll)
{
	var msgs=d.split("\n");
	var rows="";
	for(var i=0;i<msgs.length;++i)
	{
		var obj={};
		obj.level=msgs[i].substr(0,1);
		obj.message=msgs[i].substr(2, msgs[i].length-2);
		obj.time="-";
		
		if(obj.level>=ll && obj.message.length>0)
		{		
			var idx=obj.message.indexOf("-");
			if(idx!=-1)
			{
				obj.time=obj.message.substr(0,idx);
				if(!isNaN(obj.time-0))
				{
					obj.time=format_unix_timestamp(obj.time);
					obj.message=obj.message.substr(idx+1,obj.message.length-idx-1);
				}
				else
				{
					obj.time="-";
				}
			}
			
			if(obj.level==1)
				obj.lstyle="urbackup_background_yellow";
			else if(obj.level==2)
				obj.lstyle="urbackup_background_red";
				
			obj.level=trans("loglevel_"+obj.level);
			
			rows+=dustRender("log_single_row", obj);
		}
	}
	return rows;
}
function logClientChange()
{
	var v=I('logclients').value;
	g.has_logclients=true;
	g.logclients=v;
	if(v==-1)
	{
		if(!startLoading()) return;
		new getJSONMultiple("logs", "ll="+I('logsfilter').value, show_logs2, show_logs_aggregate);
	}
	else
	{
		if(!startLoading()) return;
		var t_clientid = revMapClientId(v);
		g.logsappid = t_clientid.appid;
		new getJSONSingleApp("logs", "filter="+t_clientid.id+"&ll="+I('logsfilter').value, show_logs2_map, t_clientid.appid);
	}
	updateLogsParam();
}
g.tabMouseClickLogs=function(t_logid)
{
	if(!startLoading()) return;
	var logid = revMapRemoteId(t_logid, g.remote_log_map);
	g.logsappid = logid.appid;
	new getJSONSingleApp("logs", "logid="+logid.id, show_logs2_map, logid.appid);
}
function logFilterChange()
{
	var v=I('logfilter').value;
	
	g.has_logfilter=true;
	g.logfilter=v;
	
	var rows=createLog(g.logdata,v);
	if(rows=="")
			rows=dustRender("log_single_none");
	var ndata=dustRender("log_single", {rows:rows, name: g.logclientname});
	
	if(g.data_f!=ndata)
	{
		destroy_selectpickers();
		$("#data_f").empty();
		I('data_f').innerHTML=ndata;
		dustPost(I('data_f'));
		if(rows=="")
			dustPost(I('data_f'), 'log_single_none');
		else
			dustPost(I('data_f'), 'log_single_row');
		g.data_f=ndata;
	}
}
function logsFilterChange()
{
	var v=I('logsfilter').value;
	var v2=I('logclients').value;
	
	g.has_logsfilter=true;
	g.logsfilter=v;
	g.has_logfilter=true;
	g.logfilter=v;
	
	if(v2==-1)
	{
		if(!startLoading()) return;
		new getJSONMultiple("logs", "ll="+v, show_logs2, show_logs_aggregate);
	}
	else
	{
		if(!startLoading()) return;
		var clientid = revMapClientId(v2);
		g.logsappid = clientid.appid;
		new getJSONSingleApp("logs", "filter="+clientid.id+"&ll="+v, show_logs2_map, clientid.appid);
	}
	updateLogsParam();
}
function updateLogsParam()
{
	var p="";
	if(g.has_logsfilter)
	{
		p="ll="+g.logsfilter;
	}
	if(g.has_logclients && g.logclients!=-1)
	{
		if(p.length>0) p+="&";
		p+="filter="+g.logclients;
	}
	if(!g.nav_params)
		g.nav_params={};
	g.nav_params[3]=p;
	build_main_nav();
}
function show_live_log_params(clientid, clientname, appid)
{
	if(appid==g.self_appid || typeof appid == "undefined")
		appid="";
	var win = window.open('', '_blank', '');
	var live_log_page = dustRender("live_log", {session: g.session, clientid: clientid, clientname: clientname,
							jquery_js: I("jquery_js").src,
							dust_js: I("dust_js").src,
							templates_js: I("templates_js").src,
							urbackup_functions_js: I("urbackup_functions_js").src,
							template_post_js: I("template_post_js").src,
							livelog_js: I("livelog_js").src,
							livelog_css: I("livelog_css").src,
							template_post_css: I("template_post_css").src,
							appid: appid});
	if(I('live_log_clientid'))
	{
		I('live_log_clientid').selectedIndex=-1;
	}
	win.document.write(live_log_page);
	win.document.close();
	win.focus();
}
function showBackupLiveLog(clientid, clientname, logId)
{
	clientid = revMapClientId(clientid);
	var appid = clientid.appid;
	if(appid==g.self_appid)
		appid="";
	var win = window.open('', '_blank', '');
	var live_log_page = dustRender("live_log", {session: g.session, clientid: clientid.id,
												clientname: clientname,
												logid: logId,
												jquery_js: I("jquery_js").src,
												dust_js: I("dust_js").src,
												templates_js: I("templates_js").src,
												urbackup_functions_js: I("urbackup_functions_js").src,
												template_post_js: I("template_post_js").src,
												livelog_js: I("livelog_js").src,
												livelog_css: I("livelog_css").src,
												template_post_css: I("template_post_css").src,
												appid: appid });
	win.document.write(live_log_page);
	win.document.close();
	win.focus();
}
function show_live_log()
{
	var t_clientid=I('live_log_clientid').value;
	var clientname=I('live_log_clientid').options[I('live_log_clientid').selectedIndex].text;
	var clientid;
	if(t_clientid.indexOf("0-")==0)
	{
		clientid = {id: 0, appid: t_clientid.split("-")[1]};
	}
	else
	{
		clientid = revMapClientId(t_clientid);
	}
	show_live_log_params(clientid.id, clientname, clientid.appid);	
}
function removeClient(clientid)
{
	var b=confirm(trans("really_remove_client"));
	if(b)
	{
		show_status1("", false, [clientid]);
	}
}
function removeClients(clientid)
{
	if(clientid)
	{
		removeClient(clientid);
		return;
	}
	
	var cbs=document.getElementsByName("status_selected");
	var ids=[];
	for(var i=0;i<cbs.length;++i)
	{
		if(cbs[i].checked)
		{
			ids.push(cbs[i].value);
		}
	}
	if(ids.length==1)
	{
		removeClient(ids[0]);
		return;
	}
	else if(ids.length>0)
	{	
		var b=confirm(trans("really_remove_clients"));
		if(b)
		{
			show_status1("", false, ids);
		}
	}
	else
	{
		alert(trans("no_client_selected"));
	}
}
function showMoveClient(clientids)
{
	var m_apps = {};

	for(var i=0;i<clientids.length;++i)
	{
		var clientid = revMapClientId(clientids[i]);
		if(typeof m_apps[clientid.appid] == "undefined")
			m_apps[clientid.appid] = {clientids: [], replication_dests: g.app_replication_dests[clientid.appid], replication_ports: g.app_replication_ports[clientid.appid], appid: clientid.appid,
						appname: getAppname(clientid.appid)};
		
		m_apps[clientid.appid].clientids.push(clientid.id);
	}

	var a_apps = [];

	for(var k in m_apps)
	{
		m_apps[k].clientids_str = m_apps[k].clientids.join();
		a_apps.push(m_apps[k]);
	}

	var ndata=dustRender("migrate_clients", {apps: a_apps});
	
	if(g.data_f!=ndata)
	{
		destroy_selectpickers();
		$("#data_f").empty();
		I('data_f').innerHTML=ndata;
		dustPost(I('data_f'));
		$('select[id^="move_dest_"]').filter(
			function() {
				setup_selectpicker("#"+$(this).attr("id"));
			});
		g.data_f=ndata;
	}
}
function moveClients(clientid)
{
	if(clientid)
	{
		showMoveClient([clientid]);
		return;
	}
	
	var cbs=document.getElementsByName("status_selected");
	var ids=[];
	for(var i=0;i<cbs.length;++i)
	{
		if(cbs[i].checked)
		{
			ids.push(cbs[i].value);
		}
	}
	if(ids.length>0)
	{	
		showMoveClient(ids);
	}
	else
	{
		alert(trans("no_client_selected"));
	}
}
function selectClientsToggle()
{
	if(I("status_selected_toggle").checked)
	{
		selectAllClients();
	}
	else
	{
		selectNoClients();
	}
}
function selectAllClients()
{
	var cbs=document.getElementsByName("status_selected");
	for(var i=0;i<cbs.length;++i)
	{
		cbs[i].checked=true;
	}
}
function selectNoClients()
{
	var cbs=document.getElementsByName("status_selected");
	for(var i=0;i<cbs.length;++i)
	{
		cbs[i].checked=false;
	}
}
function stopRemove(clientid)
{
	show_status1("", false, [clientid], true);
}
function unarchive_single(backupid, clientid, type)
{
	if(!startLoading()) return;
	new getJSON("backups", "sa=backups&clientid="+clientid+"&unarchive="+backupid+"&type="+type, show_backups2);
}
function archive_single(backupid, clientid, type)
{
	if(!startLoading()) return;
	new getJSON("backups", "sa=backups&clientid="+clientid+"&archive="+backupid+"&type="+type, show_backups2);
}
function deleteBackup(clientid, backupid)
{
	if(!startLoading()) return;
	new getJSON("backups", "sa=backups&clientid="+clientid+"&delete="+backupid, show_backups2);
}
function stopDeleteBackup(clientid, backupid)
{
	if(!startLoading()) return;
	new getJSON("backups", "sa=backups&clientid="+clientid+"&stop_delete="+backupid, show_backups2);
}
function deleteBackupNow(clientid, backupid)
{
	if(!startLoading()) return;
	new getJSON("backups", "sa=backups&clientid="+clientid+"&delete_now="+backupid, show_backups2);
}
function addArchiveItem(global)
{
	if(!validate_text_nonempty(["archive_every"])) return;
	if(I('archive_for_unit').value!="i")
	{
		if(!validate_text_nonempty(["archive_for"])) return;
	}
	if(!validate_text_regex([{id: "archive_window", regexp: /^((([0-9]+,?)+)|\*);((([0-9]+,?)+)|\*);((([0-9]+,?)+)|\*);((([0-9]+,?)+)|\*)$/i } ]) ) return;

	if(!g.curr_archive_item_id )
		g.curr_archive_item_id=1;
	else
		g.curr_archive_item_id+=1;
	
	addArchiveItemInt(parseInt(I('archive_every').value), I('archive_every_unit').value, parseInt(I('archive_for').value), I('archive_for_unit').value, 
		I('archive_backup_type').value, -1, I('archive_window').value, I("archive_to").value, I('archive_letters').value, (global?"-":-1), g.curr_archive_item_id, global, 2);

	updateArchiveParams();
}
function getTimelengthSeconds(tl, unit)
{
	tl*=60*60;
	if(unit!='h')
	{
		tl*=24;
		if(unit!='d')
		{
			tl*=7;
			if(unit!='w')
			{
				tl*=4.345;
				if(unit!='m')
				{
					tl*=12;
				}
			}
		}
	}
	return tl;
}
function getTimelengthUnit(tl, unit)
{
	tl/=3600;
	if(unit!='h')
	{
		tl/=24;
		if(unit!='d')
		{
			tl/=7;
			if(unit!='w')
			{
				tl/=4.345;
				if(unit!='m')
				{
					tl/=12;
				}
			}
		}
	}
	return tl;
}
function addPlural(val, str)
{
	if(val!=1)
		return str+"s";
	else
		return str;
}
function dectorateTimelength(tl, unit)
{
	if(unit=='h') tl+=" "+trans(addPlural(tl, "hour"));
	else if(unit=='d') tl+=" "+trans(addPlural(tl,"day"));
	else if(unit=='w') tl+=" "+trans(addPlural(tl,"week"));
	else if(unit=='m') tl+=" "+trans(addPlural(tl,"month"));
	else if(unit=='y') tl+=" "+trans(addPlural(tl,"year"));
	else if(unit=='i') tl=trans("forever");
	return  tl;
}
function backupTypeStr(bt)
{
	if(bt=="incr_file") return trans("action_1");
	else if(bt=="full_file") return trans("action_2");
	else if(bt=="file") return trans("file_backup");
	else if(bt=="image") return trans("image_backup");
	else if(bt=="incr_image") return trans("action_3");
	else if(bt=="full_image") return trans("action_4");
}
function archiveToStr(bt)
{
	if(bt=="local") return "Archive locally";
	else if(bt=="cloud") return "Archive to Cloud";
	else return "##err5468##";
}
function getArchiveTable()
{
	var archive_table=I('archive_table').childNodes[1];
	return archive_table;
}
function archiveTableClear()
{
	for(var i=0;i<g.curr_archive_items.length;++i)
	{
		var id = g.curr_archive_items[i].archive_uuid;
		if(I("archive_item_"+id))
		{
			getArchiveTable().removeChild(I("archive_item_"+id));
		}
	}
}
function addArchiveItemInt(archive_every, archive_every_unit, archive_for, archive_for_unit, archive_backup_type, next_archival, archive_window, archive_to, archive_letters, archive_timeleft, archive_uuid, global, source)
{
	archive_every_i=getTimelengthSeconds(archive_every, archive_every_unit);
	archive_for_i=getTimelengthSeconds(archive_for, archive_for_unit);
	if(archive_for_unit=='i')
	{
		archive_for_i=-1;
	}
	archive_every=dectorateTimelength(archive_every, archive_every_unit);
	archive_for=dectorateTimelength(archive_for, archive_for_unit);
	
	var new_item=document.createElement('tr');
	new_item.id = "archive_item_"+archive_uuid;
	
	var archive_letters_str = archive_letters;
	if(archive_letters.length==0)
	{
		archive_letters_str = "-";
	}
	else if(archive_backup_type.indexOf("image")==-1)
	{
		archive_letters_str = "-";
		archive_letters="";
	}

	if(archive_timeleft==null)
		archive_timeleft="-";

	var source_group = !global && source==1;
	var source_here = !global && source==2;
	
	var row_vals={ archive_next: next_archival, archive_every_i: archive_every_i, archive_every: archive_every, archive_every_unit: archive_every_unit,
			archive_for_i: archive_for_i, archive_for: archive_for, archive_for_unit: archive_for_unit,
			archive_backup_type: archive_backup_type, archive_backup_type_str: backupTypeStr(archive_backup_type), archive_window: archive_window, archive_letters: archive_letters,
			archive_to: archive_to, archive_to_str: archiveToStr(archive_to),
			archive_letters_str: archive_letters_str, archive_uuid: archive_uuid, show_archive_timeleft: !global, source: source, archive_timeleft: archive_timeleft, with_archive_to_cloud: !g.cloudcache_mode,
			source_group: source_group, source_here: source_here};
	
	if(archive_timeleft!="-")
	{
		if(archive_timeleft<=0)
		{
			archive_timeleft=trans("wait_for_archive_window");
		}
		else
		{
			archive_timeleft=format_time_seconds(archive_timeleft, true);
		}
		
		row_vals.archive_timeleft=archive_timeleft;
	}
	
	new_item.innerHTML=dustRender("settings_archive_row",  row_vals );
	
	var archive_table=getArchiveTable();
	
	archive_table.appendChild(new_item);

	dustPost(I('data_f'));

	g.curr_archive_items.push(row_vals);
}
function deleteArchiveItem(id)
{
	if(I("archive_item_"+id))
	{
		getArchiveTable().removeChild(I("archive_item_"+id));
	}
	
	var rerender=false;

	for(var i=0;i<g.curr_archive_items.length;++i)
	{
		var item=g.curr_archive_items[i];
		if(item.archive_uuid==id)
		{
			if(item.source!=2
				&& g.curr_settings["archive"].use & 1)
			{
				
				for(var j=0;j<g.curr_archive_items.length;++j)
				{
					if(g.curr_archive_items[j].source!=2)
						rerender=true;
					g.curr_archive_items[j].source=2;
				}
				g.curr_settings["archive"].use=2;
				renderSettingSwitch("archive");
			}

			g.curr_archive_items.splice(i, 1);
			break;
		}
	}

	updateArchiveParams();

	if(rerender)
	{
		renderArchiveSettings(g.curr_settings_type==0 || g.curr_settings_type==1);
	}
}
function changeArchiveForUnit()
{
	if(I('archive_for_unit').value=='i')
	{
		I('archive_for').type="hidden";
	}
	else
	{
		I('archive_for').type="text";
	}
}
function changeArchiveBackupType()
{
	I('archive_letters').disabled = I('archive_backup_type').value.indexOf("image")==-1;
}
function startBackups(start_type, clientid)
{
	$(this).prop('selectedIndex', -1);
	
	if(start_type=="none")
	{
		return;
	}
	
	if(start_type=="remove")
	{
		removeClients(clientid);
		return;
	}
	
	if(start_type=="move")
	{
		moveClients(clientid);
		return;
	}
	
	var ids={};
	if(clientid)
	{
		var t_clientid = revMapClientId(clientid);
		ids[t_clientid.appid] = [t_clientid.id];
	}
	else
	{
		var cbs=document.getElementsByName("status_selected");
		for(var i=0;i<cbs.length;++i)
		{
			if(cbs[i].checked)
			{
				var t_clientid = revMapClientId(cbs[i].value);
				if(t_clientid.appid in ids)
				{
					ids[t_clientid.appid].push(t_clientid.id);
				}
				else
				{
					ids[t_clientid.appid] = [t_clientid.id];
				}
			}
		}
	}
	if(Object.keys(ids).length>0)
	{	
		startLoading(false);

		appid_extra_params = {};
		for(var i=0;i<g.remote_apps.length;++i)
		{
			var appid = g.remote_apps[i].id;
			if(appid in ids)
			{
				appid_extra_params[appid] = "start_type="+start_type+"&start_client="+ids[appid].join(",");
			}
			else
			{
				appid_extra_params[appid] = "start_type="+start_type+"&start_client=0";
			}
		}

		new getJSONMultiple("start_backup", "", backups_started, start_backups_aggregate, appid_extra_params);
	}
	else
	{
		alert(trans("no_client_selected"));
	}
}
function backups_started(data)
{
	stopLoading();
	
	if(data.result)
	{
		for(var i=0;i<data.result.length;++i)
		{
			var res = data.result[i];
			
			var text;
			var dom_id;
			if(res.start_type==="full_file" || res.start_type==="incr_file")
			{
				dom_id = 'start_file_backup_'+res.clientid;
				if(res.start_ok)
				{
					text = "<br />"+trans("queued_backup");
				}
				else
				{
					text = "<br />"+trans("starting_backup_failed");
				}
			}
			else
			{
				dom_id = 'start_image_backup_'+res.clientid;
				if(res.start_ok)
				{
					text = "<br />"+trans("queued_backup");
				}
				else
				{
					text = "<br />"+trans("starting_backup_failed");
				}
			}
			
			I(dom_id).style.display="inline";
			I(dom_id).innerHTML = text;
		}
	}
}
function stopBackup(clientid, id)
{
	if(!startLoading()) return;
	
	if(confirm(trans("trying_to_stop_backup")) )
	{
		g.progress_stop_client_id=clientid;
		g.progress_stop_id=id;
		show_progress1(true);
	}
	else
	{
		stopLoading();
	}
}
function recalculateStatistics()
{
	if(!startLoading(false)) return;
	clearTimeout(g.refresh_timeout);
	g.refresh_timeout=-1;
	
	if(confirm(trans("really_recalculate")))
	{
		new getJSONMultiple("users", "", show_statistics2, show_statistics_aggregate_users);
		new getJSONMultiple("usage", "recalculate=true", show_statistics3, show_statistics_aggregate_usage);
	}
	else
	{
		stopLoading();
	}
}

g.showing_backup_window_details=true;

function setBackupWindowDisplay(display)
{
	I('backup_window_incr_file_row').style.display=display;
	I('backup_window_full_file_row').style.display=display;
	I('backup_window_incr_image_row').style.display=display;
	I('backup_window_full_image_row').style.display=display;
}
function showBackupWindowDetails()
{
	setBackupWindowDisplay("inline");
	I('backup_window_row').style.display="none";
	g.showing_backup_window_details=true;
}
function hideBackupWindowDetails()
{
	g.showing_backup_window_details=true;
	if(I('backup_window_incr_file').value==I('backup_window_full_file').value
	    && I('backup_window_full_file').value==I('backup_window_incr_image').value
	    && I('backup_window_incr_image').value==I('backup_window_full_image').value 
		&& getSettingSave('backup_window_incr_file').use ==  getSettingSave('backup_window_full_file').use
		&& getSettingSave('backup_window_full_file').use ==  getSettingSave('backup_window_incr_image').use
		&& getSettingSave('backup_window_incr_image').use ==  getSettingSave('backup_window_full_image').use )
	{
		setBackupWindowDisplay("none");
		I('backup_window').value=I('backup_window_incr_file').value;
		g.showing_backup_window_details=false;
	}
	else
	{
		showBackupWindowDetails();
	}
}

function backupWindowChange()
{
	if(!g.showing_backup_window_details)
	{
		var val = I('backup_window').value;
		I('backup_window_incr_file').value=val;
		I('backup_window_full_file').value=val;
		I('backup_window_incr_image').value=val;
		I('backup_window_full_image').value=val;
	}
}

g.maximize_or_minimize = function(refresh)
{
	if(I('boostrap_container').className==="container")
	{
		I('boostrap_container').className='container-fluid';
		I('maximize').innerHTML=trans('Minimize');
		document.cookie="bootstrap_minimize=";
		if(window.localStorage)
		{
			window.localStorage.setItem('bootstrap_minimize', 'false');
		}
		g.maximized=true;
	}
	else
	{
		I('boostrap_container').className='container';
		I('maximize').innerHTML=trans('Maximize'); 
		var d = new Date();
		d.setTime(d.getTime() + 365*24*60*60*1000);
		document.cookie="bootstrap_minimize=true; expires="+d.toUTCString()+"";
		if(window.localStorage)
		{
			window.localStorage.setItem('bootstrap_minimize', 'true');
		}
		g.maximized=false;
	}
	
	if($("#status_table"))
	{
		$("#status_table").DataTable().columns.adjust().draw();
	}
	
	if($("#statistics_table"))
	{
		$("#statistics_table").DataTable().columns.adjust().draw();
	}
	
	if(refresh)
	{
		refresh_page();
	}
}

function addNewClient1()
{
	if(!startLoading()) return;
	stopLoading();
	
	var ndata=dustRender("add_client", {server_identity: g.server_identity, "apps": g.remote_apps, "has_apps": g.remote_apps.length>1,
										server_identities: g.server_identities,
										server_pubkey: g.server_pubkey});
	
	if(g.data_f!=ndata)
	{
		destroy_selectpickers();
		$("#data_f").empty();
		I('data_f').innerHTML=ndata;
		dustPost(I('data_f'));
		g.data_f=ndata;
		if(I("add_client_appliance"))
			setup_selectpicker("#add_client_appliance");
	}
}

function addNewClient2()
{	
	if(I("choice_internet_client").checked)
	{
		if(!validate_text_nonempty(['internet_client_name']) )
		{
			return;
		}
		
		if(!startLoading()) return;

		var appid=null;
		if(I("add_client_appliance"))
			appid = I("add_client_appliance").value;
		else
			appid = g.self_appid;

		g.add_client_appid = appid;

		new getJSONSingleApp("add_client", "clientname="+encodeURIComponent(I("internet_client_name").value), addNewClient3, appid);
	}
	else
	{
		addExtraClient();
	}
}

function addNewClient3(data)
{
	stopLoading();
	
	if(data.already_exists)
	{
		alert(trans("client_exists"));
	}
	else
	{
		data.new_clientid = mapClientId(data.new_clientid, g.add_client_appid);
		data.linux_url = downloadClientURL(data.new_clientid, data.new_authkey, "linux", data.new_clientname);
		data.mac_url = downloadClientURL(data.new_clientid, data.new_authkey, "mac", data.new_clientname);
		if(data.internet_server_proxy)
		{
			data.internet_proxy_settings = " --proxy \""+unescapeHTML(data.internet_server_proxy)+"\"";
		}
		var ndata=dustRender("client_added", data);
	
		if(g.data_f!=ndata)
		{
			destroy_selectpickers();
			$("#data_f").empty();
			I('data_f').innerHTML=ndata;
			dustPost(I('data_f'));
			g.data_f=ndata;
		}
	}
}
function aboutUrBackup()
{
	if(!startLoading()) return;
	stopLoading();

	clearTimeout(g.refresh_timeout);
	g.refresh_timeout=-1;
	
	var ndata=dustRender("about_urbackup", {version: I('server_version_full').innerHTML.trim()});
	if(g.data_f!=ndata)
	{
		destroy_selectpickers();
		$("#data_f").empty();
		I('data_f').innerHTML=ndata;
		dustPost(I('data_f'));
		g.data_f=ndata;
	}
	I('nav_pos').innerHTML="";
}

function resetFirmware()
{
	if(!startLoading()) return;
	
	if(confirm("Are you sure you want to reset your system? All settings and backups will be lost!"))
	{
		new getJSON("admin", "url=reset_firmware", resetFirmwareCb);
	}
}
function show_scripts1()
{
	if(!startLoading()) return;
	new getJSON("scripts", "sa=get_alert", show_scripts2);
	I('nav_pos').innerHTML="";
}
function disable_alert_edit(b)
{
	I("remove_alert_script_btn").disabled=b;
	I("add_param_btn").disabled=b;
	I("save_alert_script_btn").disabled=b;
	for(var i=0;i<g.alert_script_idx.length;++i)
	{
		var idx = g.alert_script_idx[i];
		I("alert_name_"+idx).disabled=b;
		I("alert_label_"+idx).disabled=b;
		I("alert_default_"+idx).disabled=b;
		I("alert_remove_"+idx).disabled=b;
		I("alert_type_"+idx).disabled=b;
	}
}
function iframe_document(ifrm)
{
	return (ifrm.contentWindow) ? ifrm.contentWindow : (ifrm.contentDocument.document) ? ifrm.contentDocument.document : ifrm.contentDocument;
}
function show_scripts2(data)
{
	stopLoading();
	
	var script_options = "";
	
	for(var i=0;i<data.scripts.length;++i)
	{
		var script = data.scripts[i];
		var selected="";
		if(script.id==data.id)
		{
			selected=" selected=\"selected\"";
		}
		script_options += "<option value=\""+script.id+"\""+selected+">"+escapeHTML(script.name)+"</option>";
	}
	
	g.alert_script_id = data.id;
	g.alert_script_idx = [];
	var params_html = "";
	for(var j=0;j<data.params.length;++j)
	{
		var param = data.params[j];
		param.idx = j;
		param.default_value = unescapeHTML(param.default_value);
		var sel="selected=\"selected\""
		if(param.type=="num")
			param.dtype_num=sel;
		else if(param.type=="int")
			param.dtype_int=sel;
		else if(param.type=="bool")
			param.dtype_bool=sel;
		else if(param.type=="choice")
			param.dtype_choice=sel;
		else if(param.type=="interval")
			param.dtype_interval=sel;
		params_html+=dustRender("alert_script_edit_params", param);
		g.alert_script_idx.push(j);
	}
	
	var tdata = dustRender("alert_script_edit", {alert_scripts: script_options, mod_alert_params: params_html, saved_ok: data.saved_ok} );
	
	if(g.data_f!=tdata)
	{
		destroy_selectpickers();
		$("#data_f").empty();
		I('data_f').innerHTML=tdata;
		dustPost(I('data_f'));
		dustPost(I('data_f'), 'alert_script_edit_params');
		g.data_f=tdata;
	}
	
	if(data.saved_ok)
	{
		setTimeout(remove_saved_ok, 5000);
	}

	$("#editor").on("load", function() {
		var editor_doc = iframe_document(I('editor'));
		if(!editor_doc.g)
			editor_doc.g = {};
		editor_doc.g.code = unescapeHTML(data.script)
		editor_doc.postMessage("display", "*");
   } );
	
	if(data.id==1 || data.id%100000==0)
	{
		disable_alert_edit(true);
	}
}
function resetFirmwareCb(data)
{
	stopLoading();
	
	if(data.err)
	{
		alert("Error while resetting system: " + data.err)
	}
	else if(data.ok)
	{
		alert("System has been reset successfully. The UrBackup will now restart.");
		restartWait();
	}
}

function restartWait()
{
	stopLoading();
	
	ndata=dustRender("restart_wait");
		
	if(g.data_f!=ndata)
	{
		I('data_f').innerHTML=ndata;
		dustPost(I('data_f'));
		g.data_f=ndata;
	}
	
	if(I('nav_pos'))
	{
		I('nav_pos').innerHTML="";
	}
	
	setTimeout(function()
	{
		window.location.reload();
	}, 50000);
}


function shutdownSystem()
{
	if(!startLoading()) return;
	
	if(confirm("Do you really want to shut down your UrBackup?"))
	{
		new getJSON("admin", "url=shutdown_system", shutdownSystemCb);
	}
	else
	{
		stopLoading();
	}
}

function shutdownSystemCb(data)
{
	stopLoading();
	
	if(data.ok)
	{
		I("data_f").innerHTML = dustRender("shutdown_msg");
		dustPost(I('data_f'));
	}
	else
	{
		alert("Error shutting down system: "+data.err);
	}
}
function removeAlertParam(idx)
{
	g.alert_script_idx.splice( $.inArray(idx, g.alert_script_idx), 1 );
	I("alert_param_"+idx).remove();
}

function restartSystem()
{
	if(!startLoading()) return;
	
	if(confirm("Do you really want to restart your UrBackup?"))
	{
		new getJSON("admin", "url=restart_system_webinterface", restartSystemCb);
	}
	else
	{
		stopLoading();
	}
}

function alertAddParam()
{
	if(g.alert_script_idx.length==0)
	{
		idx = 0;
	}
	else
	{
		idx = Math.max.apply(null, g.alert_script_idx) + 1;
	}
	
	append_via_span(I("alert_script_params"), dustRender("alert_script_edit_params", {idx: idx}), true);
	g.alert_script_idx.push(idx);
}

function restartSystemCb(data)
{
	stopLoading();
	
	if(data.ok)
	{
		restartWait();
	}
	else
	{
		alert("Error restarting system: "+data.err);
	}
}

function report_problem()
{
	var ndata=dustRender("report_problem", {with_sender_mail: !g.has_account});
	
	I('data_f').innerHTML=ndata;
	dustPost(I('data_f'));
	
	g.data_f="";
	
	var valConfig = default_validator_config();
	
	valConfig.rules = 
	{
		problem_text: {
			required: true,
			maxlength: 16184,
			minlength: 5
		}
	};
	
	if(!g.has_account)
	{
		valConfig.rules["sender_mail"] = {
			required: true,
			minlength: 3
		};
	}
	
	g.formValidator = $("#form1").validate(valConfig);
}

function submitProblem()
{
	if(g.formValidator.form())
	{
		if(!startLoading()) return;
		
		var withLogData = false;
		var problemText = I("problem_text").value;
		
		if(I("attach_information").checked)
		{
			withLogData = true;
		}
		
		var sender_mail = "0";
		if(!g.has_account)
		{
			sender_mail = encode2(I("sender_mail").value);
		}
		
		I('data_f').innerHTML=dustRender("report_problem_uploading");
		dustPost(I('data_f'));
		
		new getJSON("admin", "url=start_report_problem%2F" + ( withLogData ? "1" : "0" ) + "%2F" + sender_mail + "%2F"
					+encode2(problemText), submitProblemCb);
	}
}

function submitProblemCb(data)
{
	if(!data.ok)
	{
		stopLoading();
		I('data_f').innerHTML = "Error reporting problem: "+data.err;
		return;
	}
	g.problem_id = data.id;
	if(data.with_log_data)
	{
		new getJSON("admin", "url=report_problem_status", updateProblemUploadStatus);
	}
	else
	{
		stopLoading();
		I('data_f').innerHTML=dustRender("reported_problem", {case_id: g.problem_id});
		dustPost(I('data_f'));
	}
}
function addAlertScript()
{
	var name = prompt(trans("new_alert_script_name"));
	if(name!=null)
	{
		g.alert_script_id=-1;
		I("alert_script").innerHTML+="<option value=\"-1\" selected=\"selected\">"+escapeHTML(name)+"</option>";
		disable_alert_edit(false);
	}
}
function removeAlertScript()
{
	if(confirm(trans("confirm_alert_script_remove")))
	{
		if(!startLoading()) return;
		new getJSON("scripts", "sa=rm_alert&id="+g.alert_script_id, show_scripts2);
	}
}
function getEditorValue()
{
	var editor_doc = iframe_document(I('editor'));
	return editor_doc.g.editor.getValue();
}
function saveAlertScript()
{
	if(!startLoading()) return;
	var params = "&name="+encodeURIComponent($("#alert_script option:selected").text());
	for(var i=0;i<g.alert_script_idx.length;++i)
	{
		var idx = g.alert_script_idx[i];
		params+="&"+i+"_name="+encodeURIComponent(I("alert_name_"+idx).value);
		params+="&"+i+"_label="+encodeURIComponent(I("alert_label_"+idx).value);
		params+="&"+i+"_default="+encodeURIComponent(I("alert_default_"+idx).value);
		params+="&"+i+"_type="+encodeURIComponent(I("alert_type_"+idx).value);
	}
	params+="&script="+encodeURIComponent(getEditorValue());
	new getJSON("scripts", "sa=set_alert&id="+g.alert_script_id+params, show_scripts2);
}
function showAlertScript()
{
	if(!startLoading()) return;
	new getJSON("scripts", "sa=get_alert&id="+I("alert_script").value, show_scripts2);
}
function show_report_script1()
{
	if(!startLoading()) return;
	new getJSON("scripts", "sa=get_report", show_report_script2);
	I('nav_pos').innerHTML="";
}
function remove_saved_ok()
{
	if(I("saved_ok"))
	{
		I("saved_ok").remove();
	}
}
function show_report_script2(data)
{
	stopLoading();
	
	var tdata = dustRender("report_script_edit", data);
	
	if(g.data_f!=tdata)
	{
		destroy_selectpickers();
		$("#data_f").empty();
		I('data_f').innerHTML=tdata;
		dustPost(I('data_f'));
		g.data_f=tdata;
	}
	
	if(data.saved_ok)
	{
		setTimeout(remove_saved_ok, 5000);
	}
	
	$("#editor").on("load", function() {
		var editor_doc = iframe_document(I('editor'));
		if(!editor_doc.g)
			editor_doc.g = {};
		editor_doc.g.code = unescapeHTML(data.script)
		editor_doc.postMessage("display", "*");
   } );
}
function saveReportScript()
{
	if(!startLoading()) return;
	var params="&script="+encodeURIComponent(getEditorValue());
	new getJSON("scripts", "sa=set_report"+params, show_report_script2);
}
function updateAlertScriptParams()
{
	var script_id = I("alert_script").value;
	var aparams = build_alert_params(script_id);
	I("alert_script_params_container").innerHTML = aparams.params;
	update_alert_params(true);
}

function updateProblemUploadStatusStart()
{
	new getJSON("admin", "url=report_problem_status", updateProblemUploadStatus);
}

function updateProblemUploadStatus(data)
{
	if(!data.ok)
	{
		stopLoading();
		if(data.done)
		{
			I('data_f').innerHTML = "Error submitting problem attachment: "+data.err;
		}
		else
		{
			I('data_f').innerHTML = "Error getting attachment upload progress: "+data.err;
		}
		return;
	}
	
	if(data.done)
	{
		stopLoading();
		I('data_f').innerHTML=dustRender("reported_problem", {case_id: g.problem_id});
		dustPost(I('data_f'));
	}
	else
	{
		if(data.total_bytes>=0)
		{
			I("action").innerHTML="Uploading data... (uncompressed size of data is "+format_size(data.total_bytes)+")";
		}
		I("upload_progress").innerHTML=data.pc + "%";
		I("upload_progress").style.width = data.pc + "%";
		setTimeout(updateProblemUploadStatusStart, 1000);
	}
}
function saveBackupEncryptionKeys()
{
	if(!startLoading()) return;
	
	var upload_keys="0"
	if(I("upload_encryption_keys").checked)
	{
		upload_keys="1";
	}
	
	new getJSON("admin", "url=save_upload_encryption_keys%2F" + upload_keys, saveBackupEncryptionKeysCb);
}

function saveBackupEncryptionKeysCb(data)
{
	stopLoading();
	
	if(data.ok)
	{
		if(I("upload_encryption_keys_feedback"))
		{
			I("upload_encryption_keys_feedback").innerHTML="Successfully saved setting";
		}
	}
	else
	{
		if(I("upload_encryption_keys_feedback"))
		{
			I("upload_encryption_keys_feedback").innerHTML="Error saving setting: "+data.err;
		}
	}
}

function configureClouddrive()
{
	if(!startLoading(false)) return;
	
	new getJSON("admin", "url=clouddrive_settings", configureClouddriveCb);
}

function configureClouddriveCb(data)
{
	stopLoading();
	
	if(data.err)
	{
		alert("Error getting cloud storage settings: "+data.err);
		return;
	}
	else
	{
		data.clouddrive_size_gb=data.size/(1024*1024*1024);
		data.clouddrive_size=data.size;
		
		if(!data.cds_error)
		{
			g.clouddrive_info = data.cds;
			for(var i=0;i<data.cds.length;++i)
			{
				data.cds[i].created = format_unix_timestamp(data.cds[i].created);
				if(data.cds[i].cdname ==data.cdname)
				{
					data.cds[i].is_selected=true;
				}
			}
		}
		data.orig_advanced_clouddrive_settings = data.advanced_clouddrive_settings;
		prepareAdvancedSettings(data.advanced_clouddrive_settings);
		data.advanced_clouddrive_settings = dustRender("advanced_clouddrive_settings", data.advanced_clouddrive_settings);

		if(data.endpoint=="azure")
		{
			if(!data.azure_container_name)
				data.azure_container_name = data.container_name;
			if(!data.azure_account_name)
				data.azure_account_name = data.account_name;
			if(!data.azure_account_key)
				data.azure_account_key = unescapeHTML(data.account_key);
		}
		
		var ndata;
		if(g.cloudcache_setup)
		{
			ndata = dustRender("cloudcache_cloud_storage_settings", data);
			g.cloudcache_setup=false;
			data.endpoint="none";
		}
		else
		{
			ndata = dustRender("configure_cloud_storage", data);
		}
		
		if(g.data_f!=ndata)
		{
			I('data_f').innerHTML=ndata;
			dustPost(I('data_f'));
			dustPost(I('data_f'), "advanced_clouddrive_settings");
			g.data_f=ndata;
						
			if(data.endpoint=="urbackup")
			{
				I("use_default").checked=true;
			}
			else if(data.endpoint=="s3")
			{
				I("amazon_s3").checked=true;
			}
			else if(data.endpoint=="azure")
			{
				I("azure").checked=true;
			}
			if(I("s3_storage_class")
				&& data.s3_storage_class)
			{
				I("s3_storage_class").value=data.s3_storage_class;
			}

			changeCloudStorageSettingsSwitch(data.endpoint);
			
			var valConfig = default_validator_config();
		
			valConfig.rules = 
			{
				encryption_key: {
					required: true
				},
				s3_access_key: {
					required: {
						depends: function(e) { return g.cloud_mode!="ec2" && g.cloud_mode!="ec2b" && I("amazon_s3").checked; }
					}
				},
				s3_secret_access_key: {
					required: {
						depends: function(e) { return g.cloud_mode!="ec2" &&  g.cloud_mode!="ec2b" && I("amazon_s3").checked; }
					}
				},
				s3_bucket_name: {
					required: {
						depends: function(e) { return I("amazon_s3").checked; }
					}
				},
				s3_size: {
					number: true,
					required: true,
					max: 100000,
					min: data.clouddrive_size_gb
				},
				azure_account_name: {
					required: {
						depends: function(e) { return I("azure").checked; }
					}
				},
				azure_account_key : {
					required: {
						depends: function(e) { return I("azure").checked; }
					}
				},
				azure_container_name : {
					required: {
						depends: function(e) { return I("azure").checked; }
					}
				}
			};		
			
			g.formValidator = $("#form1").validate(valConfig);

			if(data.orig_advanced_clouddrive_settings.compression_method)
				$("#compression_method").val(data.orig_advanced_clouddrive_settings.compression_method);
			if(data.orig_advanced_clouddrive_settings.background_compression_method)
				$("#background_compression_method").val(data.orig_advanced_clouddrive_settings.background_compression_method);
			if(data.orig_advanced_clouddrive_settings.metadata_compression_method)
				$("#metadata_compression_method").val(data.orig_advanced_clouddrive_settings.metadata_compression_method);
			if(data.orig_advanced_clouddrive_settings.file_system_compression)
				$("#file_system_compression").val(data.orig_advanced_clouddrive_settings.file_system_compression);
			if(data.orig_advanced_clouddrive_settings.cache_file_compression_method)
				$("#cache_file_compression_method").val(data.orig_advanced_clouddrive_settings.cache_file_compression_method);
			if(data.orig_advanced_clouddrive_settings.cache_meta_file_compression_method)
				$("#cache_meta_file_compression_method").val(data.orig_advanced_clouddrive_settings.cache_meta_file_compression_method);

			if(data.orig_advanced_clouddrive_settings.cache_compression)
				$("#cache_compression").val(data.orig_advanced_clouddrive_settings.cache_compression);

			if(data.orig_advanced_clouddrive_settings.memcache_compression)
				$("#memcache_compression").val(data.orig_advanced_clouddrive_settings.memcache_compression);
		}
	}
}

function updateArchiveParams()
{
	var setting = g.curr_settings["archive"];
	var home_params = {};
	var home_param_idx = 0;
	setting.use = 0;
	for(var i=0;i<g.curr_archive_items.length;++i)
	{
		var item = g.curr_archive_items[i];
		setting.use = setting.use | item.source;

		var prefix = "c";

		if(g.curr_settings_type==0)
			prefix = "d";
		else if(g.curr_settings_type==1)
			prefix = "g";

		if(item.source==2)
		{
			home_params["every_"+prefix+home_param_idx] = item.archive_every_i;
			home_params["every_unit_"+prefix+home_param_idx] = item.archive_every_unit;
			home_params["for_"+prefix+home_param_idx] = item.archive_for_i;
			home_params["for_unit_"+prefix+home_param_idx] = item.archive_for_unit;
			home_params["backup_type_"+prefix+home_param_idx] = item.archive_backup_type;
			home_params["window_"+prefix+home_param_idx] = item.archive_window;
			home_params["letters_"+prefix+home_param_idx] = item.archive_letters;
			if((item.archive_uuid+"").length>10)
			{
				home_params["uuid_c"+home_param_idx] = item.archive_uuid;
			}
			home_param_idx+=1;
		}
	}

	setting.value = $.param(home_params);
}
function addArchiveItemParams(params, idx, global, source)
{
	var next_archival =  null;
	var archive_every = params["every_"+idx];
	var archive_every_unit = params["every_unit_"+idx];
	var archive_for = params["for_"+idx];
	var archive_for_unit = params["for_unit_"+idx];
	var archive_backup_type = params["backup_type_"+idx];
	var archive_window = params["window_"+idx];
	var archive_letters = params["letters_"+idx];
	var archive_uuid = params["uuid_"+idx];
	var archive_timeleft = null;
	if(params["timeleft_"+idx])
		archive_timeleft = params["timeleft_"+idx];
	if(params["next_archival_"+idx])
		next_archival = params["next_archival_"+idx];

	addArchiveItemInt(getTimelengthUnit(archive_every, archive_every_unit), archive_every_unit,
		getTimelengthUnit(archive_for, archive_for_unit), archive_for_unit, archive_backup_type, next_archival, archive_window, archive_letters, archive_timeleft, 
		archive_uuid, global, source);
}
function renderArchiveSettings(global)
{
	var setting = g.curr_settings["archive"];

	archiveTableClear();
	g.curr_archive_items = [];

	if(setting.use & 1)
	{
		params = deparam(setting.value_group);

		var idx=0;
		while(typeof params["every_d"+idx] != "undefined")
		{
			addArchiveItemParams(params, "d"+idx, global, 1);
			idx+=1;
		}
		idx=0;
		while(typeof params["every_g"+idx] != "undefined")
		{
			addArchiveItemParams(params, "g"+idx, global, 1);
			idx+=1;
		}
	}
	if(typeof setting.use=="undefined" 
		|| setting.use & 2)
	{
		params = deparam(setting.value);

		var prefix="c";
		if(typeof setting.use=="undefined" )
			prefix="d";
		else if(global)
			prefix="g";

		var idx=0;
		while(typeof params["every_"+prefix+idx] != "undefined")
		{
			addArchiveItemParams(params, prefix+idx, global, 2);
			idx+=1;
		}
	}
}

function linux_image_restore1(data)
{
	stopLoading();

	if(!data.ok)
	{
		alert("Error getting linux image restore information");
	}

	var site_url = location.protocol+'//'+location.host+location.pathname;
	
	if(site_url.substr(site_url.length-1)!="/")
	{
		site_url+="/";
	}

	data.linux_restore_url = site_url+getURL("download_client", "restore_image=1&os=linux&authkey="+encodeURIComponent(data.authkey)+"&token="+encodeURIComponent(data.token));
	
	var ndata=dustRender("restore_linux_img", data);
	if(g.data_f!=ndata)
	{
		$("#data_f").empty();
		I('data_f').innerHTML=ndata;
		g.data_f=ndata;
	}
}

function selectClouddriveChange()
{
	if(I("cdname"))
	{
		for(var i=0;i<g.clouddrive_info.length;++i)
		{
			if(g.clouddrive_info[i].cdname == I("cdname").value)
			{
				I("orig_clouddrive_size").value = g.clouddrive_info[i].size;
				I("clouddrive_size").value = g.clouddrive_info[i].size/(1024*1024*1024);
				break;
			}
		}
	
		if(!startLoading()) return;
		
		new getJSON("admin", "url=clouddrive_enckey%2F"+encode2(I("cdname").value), selectClouddriveChangeCb);
	}
}

function selectClouddriveChangeCb(data)
{
	stopLoading();
	
	if(data.ok)
	{
		I("encryption_key").value=data.key;
	}
}

function changeCloudStorageSettings(from_cloudcache)
{
	if(!I("use_default").checked && !I("amazon_s3").checked && !I("azure").checked)
	{
		alert("Please select a cloud storage location");
		return;
	}

	if(g.formValidator.form())
	{
		if(!startLoading()) return;
		
		var clouddrive_size = I("clouddrive_size").value*1024*1024*1024;
		
		if(clouddrive_size<1*I("orig_clouddrive_size").value)
		{
			clouddrive_size = 1*I("orig_clouddrive_size").value;
		}
		
		var settings={endpoint: "", key: I("encryption_key").value, size: clouddrive_size };
		if(I("use_default").checked)
		{
			settings["endpoint"]="urbackup";
			settings["cdname"]=I("cdname").value;
		}
		else if(I("amazon_s3").checked)
		{
			settings["endpoint"]="s3";
			settings["s3_access_key"]=I("s3_access_key").value;
			settings["s3_secret_access_key"]=I("s3_secret_access_key").value;
			settings["s3_bucket_name"]=I("s3_bucket_name").value;
			settings["s3_endpoint"]=I("s3_endpoint").value;
			settings["s3_region"]=I("s3_region").value;
			settings["s3_storage_class"]=I("s3_storage_class").value;
		}
		else if(I("azure").checked)
		{
			settings["endpoint"]="azure";
			settings["account_name"]=I("azure_account_name").value;
			settings["account_key"]=I("azure_account_key").value;
			settings["container_name"]=I("azure_container_name").value;
		}
		
		if(settings["endpoint"]=="")
		{
			alert("internal error");
			return;
		}
		
		var cb = changeCloudStorageSettingsCb;
		if(from_cloudcache)
		{
			if(!g.system_cloudcache_setup)
				cb = changeCloudStorageSettingsCbUseDevice;
			else
				cb = changeCloudStorageSettingsCbSystemCache;
			
			g.system_cloudcache_setup=false;
			settings["migrate"]=false;
			settings["reboot"]=false;
		}
		else if(I("already_migrated") && I("already_migrated").checked)
		{
			settings["migrate"]=false;
		}
		
		g.cloud_storage_settings = settings;
		new getJSON("admin", "url=set_clouddrive_settings%2F"+encode2(JSON.stringify(settings)), cb);
	}
}

function changeCloudStorageSettingsCb(data)
{
	stopLoading();
	
	if(data.err)
	{
		I("errors").style.display="inline";
		I("errors_content").innerHTML = "<pre>"+data.err+"</pre>";
		return;
	}
	
	if(!data.nochange)
	{
		if(data.migration)
		{
			alert("Cloud storage migration currently not supported. Settings not changed.");
			//alert("Changed cloud storage settings successfully. Cloud storage migration is in progress now. Please do not restart the appliance.");
		}
		else if(data.needs_restart)
		{
			alert("Changed cloud storage settings successfully. Please restart the appliance for the changes to come into effect.");
		}
	}
	
	storageSettings();
}

function changeCloudStorageSettingsCbSystemCache(data)
{
	stopLoading();
	
	if(data.err)
	{
		I("errors").style.display="inline";
		I("errors_content").innerHTML = "<pre>"+data.err+"</pre>";
		return;
	}
	
	if(!data.nochange)
	{
		if(data.migration)
		{
			alert("Cloud storage migration currently not supported. Settings not changed.");
			//alert("Changed cloud storage settings successfully. Cloud storage migration is in progress now. Please do not restart the appliance.");
		}
	}
	
	show_status1('');
}

function changeCloudStorageSettingsSwitch(endpoint)
{
	if(endpoint=="default" || endpoint=="urbackup" || endpoint=="none")
	{
		I('clouddrive_size').disabled=true;
		if(I('default_settings'))
			I('default_settings').style.display="inline";
		I("s3_settings").style.display="none";
		I("azure_settings").style.display="none";
	}
	else if(endpoint=="s3")
	{
		I('clouddrive_size').disabled=false;
		if(I('default_settings'))
			I('default_settings').style.display="none";
		I("s3_settings").style.display="inline";
		I("azure_settings").style.display="none";
	}
	else if(endpoint=="azure")
	{
		I('clouddrive_size').disabled=false;
		if(I('default_settings'))
			I('default_settings').style.display="none";
		I("s3_settings").style.display="none";
		I("azure_settings").style.display="inline";
	}
}

function changeCloudStorageSettingsCbUseDevice(data)
{
	if(data.err)
	{
		I("errors").style.display="inline";
		I("errors_content").innerHTML = "<pre>"+data.err+"</pre>";
		stopLoading();
		return;
	}
	
	if(!g.skip_add_cloudcache_device)
	{
		var ndata=dustRender("formatting_drive", device_fn_info(g.use_device_dev_fn) );
	
		if(g.data_f!=ndata)
		{
			I('data_f').innerHTML=ndata;
			dustPost(I('data_f'));
			g.data_f=ndata;
		}
		
		new getJSON("admin", "url=add_new_device%2Fcloudcache%2F"+encode2(g.use_device_dev_fn), changeCloudStorageSettingsCbUseDeviceCb1);
	}
	else
	{
		g.skip_add_cloudcache_device=false;
		new getJSON("admin", "url=setup_s3%2F"+encode2(JSON.stringify(g.cloud_storage_settings)), setup_s3_results);
	}
}

function changeCloudStorageSettingsCbUseDeviceCb1(data)
{
	if(data.res)
	{
		new getJSON("admin", "url=setup_s3%2F"+encode2(JSON.stringify(g.cloud_storage_settings)), setup_s3_results);
	}
	else
	{
		stopLoading();
		alert("Error while formatting device.");
	}
}

function setup_s3_results(data)
{
	stopLoading();
	if(data.ok)
	{
		I('data_f').innerHTML=dustRender("setup_s3_progress");
		dustPost(I('data_f'));
		setup_s3_progress_refresh();
	}
	else
	{
		alert("Error setting up S3 backup storage: "+data.err);
		show_status1('');
	}
}

function setup_s3_progress_refresh()
{
	new getJSON("admin", "url=setup_s3_progress", setup_s3_progress);
}

function setup_s3_progress(data)
{
	if(I("s3_setup_status"))
	{
		if(data.ok)
		{
			if(data.status=="done")
			{
				stopLoading();
				alert("Imported database and backup storage successfully. The system will now be restarted...");
				new getJSON("admin", "url=restart_system_webinterface", setup_s3_restart);
				return;
			}
			else if(data.status=="done:no_import")
			{
				stopLoading();
				show_status1('');
				return;
			}
			else
			{
				I("s3_setup_status").innerHTML = data.status;
			}
		}
		else
		{
			if(data.err=="enckey_wrong")
			{
				data.err="The encryption key seems to be wrong. Please try again with the correct encryption key or delete all objects in the bucket.";
			}
			
			alert("Error setting up S3 storage: "+data.err);
			
			g.cloudcache_setup = true;
			g.skip_add_cloudcache_device = true;
			configureClouddrive();
			return;
		}
		
		setTimeout(setup_s3_progress_refresh, 1000);
	}
}

function setup_s3_restart(data)
{
	stopLoading();
	if(data.ok)
	{
		restartWait();
	}
	else
	{
		alert("Error restarting system: "+data.err);
	}
}

function show_replication1()
{
	if(!startLoading()) return;
	clearTimeout(g.refresh_timeout);
	g.refresh_timeout=-1;

	if(typeof g.replication_appliance=="undefined")
		g.replication_appliance = g.self_appid;

	new getJSONSingleApp("replication", "", show_replication2, g.replication_appliance);
	
	g.main_nav_pos=7;
	build_main_nav();
	I('nav_pos').innerHTML="";
}

function handle_bandwidth_limit(arr)
{
	for(var i=0;i<arr.length;++i)
	{
		var obj = arr[i];
		if(obj.bandwidth_limit==0)
		{
			obj.bandwidth_limit="-";
			obj.bandwidth_limit_extra = "";
		}
		else
		{
			obj.bandwidth_limit=multiplyTimeSpan(obj.bandwidth_limit, 1/((1024*1024)/8), true);
			obj.bandwidth_limit_extra = " MBit/s";
		}
	}
}

function show_replication2(data)
{
	stopLoading();
	
	for(var i=0;i<data.replication_clients.length;++i)
	{
		var obj = data.replication_clients[i];
		if(obj.dest==1)
		{
			obj.destination="destination/"+obj.dest_name;
		}
		else
		{
			obj.destination="port/"+obj.dest_name;
		}
		
		obj.s_backup_type = backupTypeStr(obj.backup_type);
	}
	
	handle_bandwidth_limit(data.replication_clients);
	handle_bandwidth_limit(data.replication_dests);
	handle_bandwidth_limit(data.replication_ports);

	data.has_apps = g.remote_apps.length>1;
	data.apps = clone(g.remote_apps);

	for(var i=0;i<data.apps.length;++i)
	{
		if(data.apps[i].id==g.replication_appliance)
		{
			data.apps[i].app_selected=true;
			break;
		}
	}

	for(var i=0;i<data.replication_dests.length;++i)
	{
		if(data.replication_dests[i].proxy.length>0)
		{
			data.replication_dests[i].has_proxy=true;
			data.replication_dests[i].proxy = unescapeHTML(data.replication_dests[i].proxy);
		}
	}
	
	var ndata=dustRender("replication", data);
	
	g.replication_dests = data.replication_dests;
	g.replication_ports = data.replication_ports;
		
	if(g.data_f!=ndata)
	{
		I('data_f').innerHTML=ndata;
		g.data_f=ndata;
		dustPost(I('data_f'));
		
		setup_selectpicker("#replication_clients_client");
		setup_selectpicker("#replication_clients_dest");
		setup_selectpicker("#replication_appliance");
	}
}

function changeReplicationAppliance()
{
	g.replication_appliance = I("replication_appliance").value;
	show_replication1();
}

function addNewReplicationDestination()
{
	if(!validate_text_nonempty(["replication_dest_hostname", "replication_dest_authkey"]))
	{
		return;
	}
	
	if(!validate_text_int(["replication_dest_port", "replication_dest_max_concurrent"]))
	{
		return;
	}
	
	if(I("replication_dest_bandwidth_limit").value=="-" || I("replication_dest_bandwidth_limit").value=="")
	{
		I("replication_dest_bandwidth_limit").value="0";
	}
	
	if(!validate_text_regex({ id: "replication_dest_bandwidth_limit", regexp: g.time_span_speed_regex}))
	{
		return;
	}

	if(!validate_text_regex([{ id: "replication_dest_proxy", regexp: /(^(http|https):\/\/[\w-]+([\w-]*)+([\w.,@?^=%&amp;:\/~+#-]*[\w@?^=%&amp;\/~+#-])?$)|(^$)/i }]))
	{
		return;
	}
	
	/*for(var i=0;i<g.replication_dests.length;++i)
	{
		if(g.replication_dests[i].name==I("replication_dest_name").value)
		{
			alert("Replication destination name already in use. Please choose another.");
			I("replication_dest_name").focus();
			return;
		}
	}*/
	
	if(!startLoading()) return;

	var bandwidth_limit = I("replication_dest_bandwidth_limit").value;
	if(bandwidth_limit.length==0 || bandwidth_limit=="-")
	{
		bandwidth_limit = 0;
	}
	else
	{
		bandwidth_limit = multiplyTimeSpan(bandwidth_limit, 1/((1024.0*1024.0)/8.0), true);
	}
	
	var params = $.param({add: "dest",
		hostname: I("replication_dest_hostname").value, port: I("replication_dest_port").value, authkey: I("replication_dest_authkey").value,
		max_concurrent: I("replication_dest_max_concurrent").value,
		bandwidth_limit: bandwidth_limit, remote_control: (I("replication_dest_remote_control").checked ? 1 :0),
		proxy: I("replication_dest_proxy").value
	});
	
	new getJSONSingleApp("replication", params, show_replication2, g.replication_appliance);
}

function removeReplicationDest(id)
{
	var name="";
	for(var i=0;i<g.replication_dests.length;++i)
	{
		if(g.replication_dests[i].id==id)
		{
			name=g.replication_dests[i].name;
		}
	}
	
	if(!startLoading()) return;
	
	if(confirm("Do you really want to remove the replication destination \""+name+"\"?"))
	{
		var params = $.param({remove: "dest", id: id});
		new getJSONSingleApp("replication", params, show_replication2, g.replication_appliance);
	}
	else
	{
		stopLoading();
	}
}

function changeReplicationDest1(id)
{
	var name="";
	for(var i=0;i<g.replication_dests.length;++i)
	{
		if(g.replication_dests[i].id==id)
		{
			g.replication_dests[i].remote_control_val = getCheckboxValue(g.replication_dests[i].remote_control);
			var ndata = dustRender("replication_change_dest", g.replication_dests[i]);
			if(g.data_f!=ndata)
			{
				I('data_f').innerHTML=ndata;
				dustPost(I('data_f'));
				g.data_f=ndata;
			}
			return;
		}
	}
}

function changeReplicationDest2()
{
	if(!validate_text_nonempty(["replication_dest_hostname", "replication_dest_authkey"]))
	{
		return;
	}
	
	if(!validate_text_int(["replication_dest_port", "replication_dest_max_concurrent"]))
	{
		return;
	}

	if(I("replication_dest_bandwidth_limit").value=="-" || I("replication_dest_bandwidth_limit").value=="")
	{
		I("replication_dest_bandwidth_limit").value="0";
	}

	if(!validate_text_regex({ id: "replication_dest_bandwidth_limit", regexp: g.time_span_speed_regex}))
	{
		return;
	}

	if(!validate_text_regex([{ id: "replication_dest_proxy", regexp: /(^(http|https):\/\/[\w-]+([\w-]*)+([\w.,@?^=%&amp;:\/~+#-]*[\w@?^=%&amp;\/~+#-])?$)|(^$)/i }]))
	{
		return;
	}

	var params = $.param({change: "dest", id: I("replication_dest_id").value,
		hostname: I("replication_dest_hostname").value, port: I("replication_dest_port").value, authkey: I("replication_dest_authkey").value,
		max_concurrent: I("replication_dest_max_concurrent").value,
		bandwidth_limit: multiplyTimeSpan(I("replication_dest_bandwidth_limit").value, (1024.0*1024.0)/8.0, true),
		remote_control: (I("replication_dest_remote_control").checked ? 1 :0),
		proxy: I("replication_dest_proxy").value
	});

	if(!startLoading()) return;
	new getJSONSingleApp("replication", params, show_replication2, g.replication_appliance);
}

function changeReplicationPort1(id)
{
	var name="";
	for(var i=0;i<g.replication_ports.length;++i)
	{
		if(g.replication_ports[i].id==id)
		{
			g.replication_ports[i].remote_control_val = getCheckboxValue(g.replication_ports[i].remote_control);
			var ndata = dustRender("replication_change_port", g.replication_ports[i]);
			if(g.data_f!=ndata)
			{
				I('data_f').innerHTML=ndata;
				dustPost(I('data_f'));
				g.data_f=ndata;
			}
			return;
		}
	}
}

function changeReplicationPort2()
{
	if(!validate_text_nonempty(["replication_port_name"]))
	{
		return;
	}
	
	if(!validate_text_int(["replication_port_max_concurrent"]))
	{
		return;
	}

	if(I("replication_port_bandwidth_limit").value=="-" || I("replication_port_bandwidth_limit").value=="")
	{
		I("replication_port_bandwidth_limit").value="0";
	}

	if(!validate_text_regex({ id: "replication_port_bandwidth_limit", regexp: g.time_span_speed_regex}))
	{
		return;
	}

	for(var i=0;i<g.replication_ports.length;++i)
	{
		if(g.replication_ports[i].name==I("replication_port_name").value
			&& g.replication_ports[i].id!=I("replication_port_id").value)
		{
			alert("Replication appliance name already in use. Please choose another.");
			I("replication_port_name").focus();
			return;
		}
	}

	var params = $.param({change: "port", id: I("replication_port_id").value,
		name: I("replication_port_name").value, authkey: I("replication_port_authkey").value,
		max_concurrent: I("replication_port_max_concurrent").value,
		bandwidth_limit: multiplyTimeSpan(I("replication_port_bandwidth_limit").value, (1024.0*1024.0)/8.0, true),
		remote_control: (I("replication_port_remote_control").checked ? 1 :0)
	});

	if(!startLoading()) return;
	new getJSONSingleApp("replication", params, show_replication2, g.replication_appliance);
}

function addNewReplicationPort()
{
	if(!validate_text_nonempty(["replication_port_name"]))
	{
		return;
	}
	
	if(!validate_text_int(["replication_port_max_concurrent"]))
	{
		return;
	}
	
	if(I("replication_port_bandwidth_limit").value=="-" || I("replication_port_bandwidth_limit").value=="")
	{
		I("replication_port_bandwidth_limit").value="0";
	}
	
	if(!validate_text_regex({ id: "replication_port_bandwidth_limit", regexp: g.time_span_speed_regex}))
	{
		return;
	}

	for(var i=0;i<g.replication_ports.length;++i)
	{
		if(g.replication_ports[i].name==I("replication_port_name").value)
		{
			alert("Replication appliance name already in use. Please choose another.");
			I("replication_port_name").focus();
			return;
		}
	}
	
	if(!startLoading()) return;
	
	var params = $.param({add: "port", name: I("replication_port_name").value,
		max_concurrent: I("replication_port_max_concurrent").value,
		bandwidth_limit: multiplyTimeSpan(I("replication_port_bandwidth_limit").value, (1024.0*1024.0)/8.0, true),
		remote_control: (I("replication_port_remote_control").checked ? 1 :0) });
	
	new getJSONSingleApp("replication", params, show_replication2, g.replication_appliance);
}

function removeReplicationPort(id)
{
	var name="";
	for(var i=0;i<g.replication_ports.length;++i)
	{
		if(g.replication_ports[i].id==id)
		{
			name=g.replication_ports[i].name;
		}
	}
	
	if(!startLoading()) return;
	
	if(confirm("Do you really want to remove the replication port \""+name+"\"?"))
	{
		var params = $.param({remove: "port", id: id});
		new getJSONSingleApp("replication", params, show_replication2, g.replication_appliance);
	}
	else
	{
		stopLoading();
	}
}

function addNewReplication()
{
	if(!validate_text_nonempty(["replication_clients_window"]))
	{
		return;
	}
	
	if(!validate_text_int(["replication_clients_max_concurrent"]))
	{
		return;
	}
	
	if(I("replication_clients_bandwidth_limit").value=="-" || I("replication_clients_bandwidth_limit").value=="")
	{
		I("replication_clients_bandwidth_limit").value="0";
	}
	
	if(!validate_text_regex({ id: "replication_clients_bandwidth_limit", regexp: g.time_span_speed_regex}))
	{
		return;
	}
	
	var sdest = I("replication_clients_dest").value;
	var adest = sdest.split("/");
	
	var dest=0;
	if(adest[0]=="dest")
	{
		dest=1;
	}
	
	var dest_name = sdest.substr(sdest.indexOf("/") + 1);
	
	var params = $.param({add: "client",
		clientid: I("replication_clients_client").value, 
		dest: dest, dest_name: dest_name, 
		backup_type: I("replication_clients_backup_type").value,
		window: I("replication_clients_window").value,
		max_concurrent: I("replication_clients_max_concurrent").value,
		bandwidth_limit: multiplyTimeSpan(I("replication_clients_bandwidth_limit").value, (1024.0*1024.0)/8.0, true)  });
		
	new getJSONSingleApp("replication", params, show_replication2, g.replication_appliance);
}

function removeReplicationClient(id)
{	
	if(!startLoading()) return;
	
	if(confirm("Do you really want to remove the replication?"))
	{
		var params = $.param({remove: "client", id: id});
		new getJSONSingleApp("replication", params, show_replication2, g.replication_appliance);
	}
	else
	{
		stopLoading();
	}
}

function raiddevcache_disk_select(curr_fn)
{
	if(I("raiddevcache_disk_mirrors"))
	{
		I("raiddevcache_disk_mirrors").style.display="inline";
		I("raiddevcache_disk_mirrors_inner").innerHTML='';
		raiddevcache_add_mirror(curr_fn);
	}
	if(I("repeat_action"))
		I("repeat_action").style.display="none";
}

function raiddevcache_add_mirror(curr_fn)
{
	var idx=0;
	while(I("raiddevcache_mirror"+idx))
	{
		++idx;
	}
	var ndata="<select id='raiddevcache_mirror"+idx+"'>"
	for(var i=0;i<g.last_new_devices.length;++i)
	{
		var fn = g.last_new_devices[i].fn;
		if(fn==curr_fn)
			continue;
			
		ndata+="<option value='"+fn+"'>"+g.last_new_devices[i].name+" with size "+g.last_new_devices[i].size+"</option>";
	}
	ndata+="</select>";
	I("raiddevcache_disk_mirrors_inner").innerHTML+=ndata;
}

function prepareAdvancedSettings(data)
{
	data.with_prev_link=getCheckboxValue(data.with_prev_link);
	data.checksum_protect=getCheckboxValue(data.checksum_protect);
	data.background_compress=getCheckboxValue(data.background_compress);
	data.allow_evict=getCheckboxValue(data.allow_evict);
	data.enable_fs_integrity=getCheckboxValue(data.enable_fs_integrity);
	if(typeof data.share_raid_disks!="undefined")
	{
		data.share_raid_disks=getCheckboxValue(data.share_raid_disks);
	}
	data.resubmit_compressed_ratio=data.resubmit_compressed_ratio*100;
	data.min_commit_delay=data.min_commit_delay/(60*1000);
	data.max_commit_delay=data.max_commit_delay/(60*1000);
	if(typeof data.mirror_raid!="undefined")
	{
		data.mirror_raid = data.mirror_raid==1;
		data.mirror_raid_checked=getCheckboxValue(data.mirror_raid);
	}
	if(typeof data.defrag_disks_enabled!="undefined")
	{
		data.defrag_disks_enabled_checked=getCheckboxValue(data.defrag_disks_enabled);
	}
	if(typeof data.defrag_smr!="undefined")
	{
		data.defrag_smr_checked=getCheckboxValue(data.defrag_smr);
	}
	if(typeof data.raid_disk_removed_reboot!="undefined")
	{
		data.raid_disk_removed_reboot_checked=getCheckboxValue(data.raid_disk_removed_reboot);
	}
	if(typeof data.raid_disk_removed_reattach!="undefined")
	{
		data.raid_disk_removed_reattach_checked=getCheckboxValue(data.raid_disk_removed_reattach);
	}
	if(typeof data.raid_burn_in != "undefined")
	{
		data.raid_burn_in_checked = getCheckboxValue(data.raid_burn_in);
	}
	if(typeof data.background_worker_manual_run != "undefined")
	{
		data.background_worker_manual_run_checked = getCheckboxValue(data.background_worker_manual_run);
	}
	if(typeof data.cache_dev_low_iops != "undefined")
	{
		data.cache_dev_low_iops_checked = getCheckboxValue(data.cache_dev_low_iops);
	}
	if(typeof data.enable_vdisks != "undefined")
	{
		data.enable_vdisks_checked = getCheckboxValue(data.enable_vdisks);
	}
}

function showAdvancedSettings()
{
	I("advanced_clouddrive_settings").style.display="inline";
	I("show_advanced_settings").style.display="none";
}

function mirrorRaidSwitch()
{
	if(I("mirror_raid").checked)
	{
		I("s3_settings").style.display="inline";
	}
	else
	{
		I("s3_settings").style.display="none";
	}
}

function saveAdvancedSettings()
{
	var raiddrive = !I("orig_clouddrive_size");
	
	var params = {
		"max_active_transactions": I("max_active_transactions").value,
		"with_prev_link": I("with_prev_link").checked,
		"checksum_protect": I("checksum_protect").checked,
		"background_compress": I("background_compress").checked,
		"resubmit_compressed_ratio": I("resubmit_compressed_ratio").value/100,
		"allow_evict": I("allow_evict").checked,
		"enable_fs_integrity": I("enable_fs_integrity").checked,
		"raiddrive": raiddrive ? 1 : 0,
		"memcache_size_gb": I("memcache_size_gb").value,
		"min_commit_delay": I("min_commit_delay").value*60*1000,
		"max_commit_delay": I("max_commit_delay").value*60*1000,
		"compression_method": I("compression_method").value,
		"background_compression_method": I("background_compression_method").value,
		"cache_compression": I("cache_compression").value,
		"memcache_compression": I("memcache_compression").value,
		"background_worker_manual_run": I("background_worker_manual_run").checked,
		"cache_dev_low_iops": I("cache_dev_low_iops").checked,
		"file_system_compression": I("file_system_compression").value,
		"metadata_compression_method": I("metadata_compression_method").value,
		"cache_meta_file_compression_method": I("cache_meta_file_compression_method").value,
		"cache_file_compression_method": I("cache_file_compression_method").value
	};

	if(I("share_raid_disks"))
	{
		params["share_raid_disks"] = I("share_raid_disks").checked;
	}

	if(I("mirror_raid"))
	{
		params["mirror_raid"] = I("mirror_raid").checked;
		params["mirror_raid_endpoint"] = I("mirror_raid_endpoint").value;
		params["s3_access_key"] = I("s3_access_key").value;
		params["s3_secret_access_key"] = I("s3_secret_access_key").value;
		params["s3_bucket_name"] = I("s3_bucket_name").value;
		params["s3_endpoint"] = I("s3_endpoint").value;
		params["s3_region"] = I("s3_region").value;
		params["s3_storage_class"] = I("s3_storage_class").value;
		params["mirror_raid_window"] = I("mirror_raid_window").value;		
	}


	if(I("defrag_disks_enabled"))
	{
		params["defrag_disks_enabled"] = I("defrag_disks_enabled").checked;
		params["defrag_disks_timemin"] = I("defrag_disks_timemin").value;
		params["defrag_smr"] = I("defrag_smr").checked;
	}

	if(I("raid_disk_removed_reboot"))
	{
		params["raid_disk_removed_reboot"] = I("raid_disk_removed_reboot").checked;
		params["raid_disk_removed_reattach"] = I("raid_disk_removed_reattach").checked;
		params["raid_burn_in"] = I("raid_burn_in").checked;
		params["enable_vdisks"] = I("enable_vdisks").checked ? 1 : 0;
	}

	if(I("ext_freespace_cache"))
	{
		params["ext_freespace_cache"] = I("ext_freespace_cache").value;
	}

	if(I("ext_raid_db_cache"))
	{
		params["ext_raid_db_cache"] = I("ext_raid_db_cache").value;
		params["ext_raid_db_cache_size"] = I("ext_raid_db_cache_size").value;
	}
	
	if(!startLoading(false)) return;
	
	new getJSONSingleApp("admin", "url=save_advanced_settings%2F"+encode2(JSON.stringify(params)), saveAdvancedSettingsCb, g.settings_selected_app);
}

function saveAdvancedSettingsCb(data)
{
	stopLoading();
	if(data.ok)
	{
		I("advanced_settings_save_feedback").style.display="inline";
	}
	else
	{
		if(data.err)
		{
			I("advanced_settings_save_feedback").innerHTML="Error saving advanced settings: "+data.err;
		}
		else
		{
			I("advanced_settings_save_feedback").innerHTML="Error saving advanced settings";
		}
	}
}
function moveClients2()
{
	if(!startLoading()) return;

	var appid_extra_params = {};

	for(var i=0;i<g.remote_apps.length;++i)
	{
		if(!I("clientids_"+g.remote_apps[i].id))
			continue;

		var pars = "";
		pars+="move_client="+I("clientids_"+g.remote_apps[i].id).value;
		pars+="&move_dest="+I("move_dest_"+g.remote_apps[i].id).value;
		appid_extra_params[g.remote_apps[i].id] = pars;
	}

	var pars="";
	pars+="move_action="+$('input[name=move_action]:checked', '#form1').val()
	pars+="&delete_after_move="+ (I("delete_after_move").checked ? "true" : "false");
	pars+="&keep_archived="+(I("keep_archived").checked ? "true" : "false" );
	pars+="&migrate_archived_state="+(I("migrate_archived_state").checked ? "true" : "false" );
	
	new getJSONMultiple("status", pars, show_status2, show_status_aggregate, appid_extra_params);
	
	g.main_nav_pos=6;
	build_main_nav();
	I('nav_pos').innerHTML="";
}

function stopMoveClient(clientid)
{
	if(!startLoading()) return;
	var appid_extra_params = {};
	var t_clientid = revMapClientId(clientid);
	var pars="";
	pars+="move_client="+t_clientid.id;
	pars+="&stop_move_client=1";

	appid_extra_params[t_clientid.appid]=pars;
	
	new getJSONMultiple("status", pars, show_status2, show_status_aggregate, appid_extra_params);
	
	g.main_nav_pos=6;
	build_main_nav();
	I('nav_pos').innerHTML="";
}

function changeAppearance1()
{
	if(!startLoading()) return;
	new getJSONSingleApp("admin", "url=get_appearance_settings", changeAppearance2, g.settings_selected_app);
}

function changeAppearance2(data)
{
	stopLoading();
	
	for(var k in data)
	{
		data[k] = unescapeHTML(data[k]);
	}
	
	var ndata=dustRender("appearance_change", data);
		
	if(g.data_f!=ndata)
	{
		I('data_f').innerHTML=ndata;
		dustPost(I('data_f'));
		g.data_f=ndata;
	}
}

function changeAppearance3()
{
	if(!startLoading()) return;
	var form = $('#form1')[0];
	var formData = new FormData(form);

	new getJSONOtherFormData("change_appearance", changeAppearance4, formData);
}

function changeAppearance4(data)
{
	stopLoading();
	
	if(!data.ok)
	{
		alert("Error changing appearance");
	}
	else
	{
		alert("Please hard refresh the web page for the changes to come into effect (with CTRL+SHIFT+R)");
	}
	
	firmwareSettings();
}

function setupCertFiles1()
{
	if(!startLoading()) return;
	new getJSONSingleApp("admin", "url=setup_cert_files_prep", setupCertFiles2, g.settings_selected_app);
}

function setupCertFiles2(data)
{
	stopLoading();

	if(!data.ok)
	{
		alert("Error preparing setup cert files");
		return;
	}
	
	var ndata=dustRender("setup_cert_files", data);
		
	if(g.data_f!=ndata)
	{
		I('data_f').innerHTML=ndata;
		dustPost(I('data_f'));
		g.data_f=ndata;
	}
}

function setupCertFiles3()
{
	if(!startLoading()) return;
	var form = $('#form1')[0];
	var formData = new FormData(form);

	new getJSONOtherFormData("setup_cert_files", setupCertFiles4, formData);
}

function setupCertFiles4(data)
{
	stopLoading();
	
	if(!data.ok)
	{
		if(data.err)
			alert("Error setting certifcate: "+data.err);
		else
			alert("Error setting certificate")
	}
	else
	{
		alert("Please hard refresh the web page for the changes to come into effect");
	}
	
	firmwareSettings();
}

function setupDns1()
{
	if(!startLoading(false)) return;
	new getJSON("admin", "url=get_dns", setupDns2);
}

$.validator.addMethod('dnsname', function (value) { 
    return /^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]$/.test(value); 
}, 'Please enter a valid DNS subdomain name');

$.validator.addMethod('domainname', function (value) { 
    return /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$/.test(value); 
}, 'Please enter a valid DNS domain name');


function setupDns2(data)
{
	stopLoading();
	
	if(!data.ok)
	{
		alert("Error getting dns settings.");
		return;
	}

	var ndata=dustRender("dns_setup", data);
		
	if(g.data_f!=ndata)
	{
		I('data_f').innerHTML=ndata;
		dustPost(I('data_f'));
		g.data_f=ndata;
	}

	$("#domain").val(data.dnsname_domain);

	var valConfig = default_validator_config();

	valConfig.rules = 
	{
		dnsname: {
			required:true,
			dnsname: true,
			remote:
			{
				param:
				{
					url: getURL("admin", ""),
					dataType: "json",
					method: "POST",
					contentType:"application/json; charset=utf-8",
					data: { 
						ses: g.session,
						url: function() {
							return "check_dns/"+encodeURIComponent($("#domain").val())+"/"+encodeURIComponent($("#dnsname").val());
						}
					}
				}
			}
		}
	};
	
	valConfig.messages =
	{
		dnsname: {
			remote: jQuery.validator.format('{0} is already in use, please choose a different name')
		}
	}
	
	var formValidator = $("#form1").validate(valConfig);
	
	var submit_fun = function(event) {
		event.preventDefault();
		if(formValidator.form())
		{			
			if(!startLoading()) return;
			new getJSON("admin", "url=update_dns%2F"+encode2($("#domain").val())+"%2F"+encode2(I("dnsname").value), setupDns3);
		}
		else
		{
			alert("Please fix the errors in this form");
		}
	};
	
	$("#form1").submit(submit_fun);
}

function setupDns3(data)
{
	stopLoading();
	
	if(!data.ok)
	{
		alert("Error setting up dns. "+data.err);
	}
	else
	{
		alert("Saved DNS settings successfully. It might take some time till your appliance is accessible with the configured DNS entry.");
	}
	
	networkingSettings();
}

function setupSsl1()
{
	if(!startLoading(false)) return;
	new getJSON("admin", "url=get_ssl", setupSsl2);
}

function setupSsl2(data)
{
	stopLoading();
	
	if(!data.ok)
	{
		alert("Error getting SSL settings.");
		return;
	}

	var ndata=dustRender("ssl_setup", data);
		
	if(g.data_f!=ndata)
	{
		I('data_f').innerHTML=ndata;
		dustPost(I('data_f'));
		g.data_f=ndata;
	}

	if(data.redir)
	{
		I("ssl_redir").checked=true;
	}

	var valConfig = default_validator_config();

	valConfig.rules = 
	{
		domainname: {
			required:true,
			domainname: true
		},
		letsencrypt_agree: {
			required: true
		}
	};
	
	var formValidator = $("#form1").validate(valConfig);
	
	var submit_fun = function(event) {
		event.preventDefault();
		I("err_msg_container").style.display="none";
		if(formValidator.form())
		{			
			if(!startLoading(false)) return;
			g.ignore_ajax_error=true;
			var redir = "0";
			if(I("ssl_redir").checked)
				redir= "1";
			new getJSON("admin", "url=setup_ssl%2F"+redir+"%2F"+encode2(I("domainname").value), setupSsl3);
			g.setup_ssl_result_timeout = setTimeout(setupSsl21, 10000);
		}
		else
		{
			alert("Please fix the errors in this form");
		}
	};
	
	$("#form1").submit(submit_fun);
}

function setupSsl21()
{
	new getJSON("admin", "url=get_setup_ssl_result", setupSsl3);
	g.setup_ssl_result_timeout = setTimeout(setupSsl21, 10000);
}

function setupSsl3(data)
{
	if(!data.ok && data.err=="in_progress")
	{
		return;
	}
	
	clearTimeout(g.setup_ssl_result_timeout);

	g.ignore_ajax_error=false;
	stopLoading();
	if(!data.ok)
	{
		I("err_msg_container").style.display="inline";
		I("err_msg").innerHTML=data.err;
	}
	else
	{
		alert("Setup SSL successfully.");
		firmwareSettings();
	}
}

function showShell1()
{
	if(!startLoading()) return;
	new getJSON("admin", "url=enable_web_shell", showShell2);
	g.shell_win = window.open('', '_blank', '');
	g.shell_win.document.write("Starting... Please wait 10s");
}

function showShell2(data)
{
	stopLoading();
	if(!data.ok)
	{
		alert("Error starting web shell service. "+data.err);
		return;
	}

	g.shell_win.location = data.uid+"/";
	g.shell_win.focus();	
}

function enable2Factor1(userid, username)
{
	if(!startLoading()) return;
	new getJSON("settings", "sa=enable2factor1&userid="+userid, enable2Factor11);
}

function enable2Factor11(data)
{
	stopLoading();
	if(!data.ok)
	{
		alert("Error setting up 2-factor login. "+data.err);
		return;
	}
	
	var ndata=dustRender("settings_user_2factor_enable", data);
		
	if(g.data_f!=ndata)
	{
		I('data_f').innerHTML=ndata;
		dustPost(I('data_f'));
		g.data_f=ndata;
	}
	
	$('#qrcode').qrcode(unescapeHTML(data.uri));
}

function enable2Factor2(userid)
{
	if(!startLoading(false)) return;
	new getJSON("settings", "sa=enable2factor2&userid="+userid+"&code="+I("curr_code").value, enable2Factor21);
}

function enable2Factor21(data)
{
	stopLoading();
	if(!data.ok)
	{
		alert("Error setting up 2-factor login. "+data.err);
		return;
	}
	
	if(!data.res)
	{
		alert("Current authentication code wrong. Did not enable 2-factor auth. Please retry.");
		I("curr_code").value="";
		I("curr_code").focus();
		return;
	}
	
	userSettings();
}

function disable2Factor(userid, username)
{
	if(!startLoading()) return;
	new getJSON("settings", "sa=disable2factor&userid="+userid, disable2Factor1);
}

function disable2Factor1(data)
{
	stopLoading();
	if(!data.ok)
	{
		alert("Error disabling 2-factor login. "+data.err);
		return;
	}
	
	userSettings();
}
function doSwitch2Factor()
{
	if(!startLoading()) return;
	
	if( I('password').value.length==0 )
	{
		alert(trans("password_empty"));
		I('password').focus();
		stopLoading();
		return;
	}
	
	if(I("code"))
	{
		var code=I('code').value;
	
		if( code.length==0 )
		{
			alert(trans("code_empty"));
			I('code').focus();
			stopLoading();
			return;
		}
	}
	
	new getJSON("salt", "", doSwitch2Factor2);
}
function doSwitch2Factor2(data)
{
	if(data.error==0)
	{
		alert(trans("user_n_exist"));
		stopLoading();
		I('password').focus();
		return;
	}
	
	var password=I('password').value;
	
	var pwmd5 = calcMD5(data.salt+password);
	
	if(data.pbkdf2_rounds>0)
	{
		pwmd5 = sjcl.codec.hex.fromBits(sjcl.misc.pbkdf2(sjcl.codec.hex.toBits(pwmd5), data.salt, data.pbkdf2_rounds));
	}
	
	pwmd5=calcMD5(data.rnd+pwmd5);
			
	if(I("code"))
	{
		new getJSON("settings", "sa=disable2factor&userid=own&code="+I("code").value+"&pw="+pwmd5, disable2FactorUser2);
	}
	else
	{
		new getJSON("settings", "sa=enable2factor1&userid=own&pw="+pwmd5, enable2FactorUser2);
	}
}
function disable2FactorUser2(data)
{
	stopLoading();
	if(!data.ok)
	{
		alert("Error disabling 2-factor login: "+data.err);
		return;
	}
	if(!data.pwok)
	{
		alert(trans("password_wrong"));
		I('password').focus();
		return;
	}	
	if(!data.res)
	{
		alert(trans("code_wrong"));
		I('code').focus();
		return;
	}
	g.totp_enabled=false;
	changePW();
}

function enable2FactorUser2(data)
{
	stopLoading();
	if(!data.ok)
	{
		alert("Error enabling 2-factor login: "+data.err);
		return;
	}
	if(!data.pwok)
	{
		alert(trans("password_wrong"));
		I('password').focus();
		return;
	}
	data.user_2factor=true;
	
	var ndata=dustRender("settings_user_2factor_enable", data);
		
	if(g.data_f!=ndata)
	{
		I('data_f').innerHTML=ndata;
		dustPost(I('data_f'));
		g.data_f=ndata;
	}
	
	$('#qrcode').qrcode(unescapeHTML(data.uri));
}

function enable2FactorUser3()
{
	if(!startLoading()) return;
	new getJSON("settings", "sa=enable2factor2&userid=own&code="+I("curr_code").value, enable2FactorUser4);
}

function enable2FactorUser4(data)
{
	stopLoading();
	if(!data.ok)
	{
		alert("Error setting up 2-factor login. "+data.err);
		return;
	}
	
	if(!data.res)
	{
		alert("Current authentication code wrong. Did not enable 2-factor auth. Please retry.");
		I("curr_code").value="";
		I("curr_code").focus();
		return;
	}
	
	g.totp_enabled=true;
	changePW();
}

function showNetdata1()
{
	if(!startLoading()) return;
	new getJSON("admin", "url=enable_netdata", showNetdata2);
	g.netdata_win = window.open('', '_blank', '');
	g.netdata_win.document.write("Starting... Please wait 10s");
}

function showNetdata2(data)
{
	stopLoading();
	if(!data.ok)
	{
		alert("Error starting netdata service. "+data.err);
		return;
	}

	g.netdata_win.location = data.uid+"/";
	g.netdata_win.focus();	
}

function show_vms1()
{
	if(!startLoading()) return;
	if(g.refresh_timeout!=-1)
	{
		clearTimeout(g.refresh_timeout);
	}
	g.refresh_timeout=0;
	show_vms11(true);
}

function show_vms11(manual_click)
{
	if(g.refresh_timeout==-1) return;
	clearTimeout(g.refresh_timeout);
	
	new getJSONMultiple("vms", "", manual_click ? show_vms2 : show_vms21, show_vms_aggregate, {}, manual_click==true);
	
	if(manual_click)
	{	
		g.main_nav_pos=8;
		build_main_nav();
		I('nav_pos').innerHTML="";
	}
}

function show_vms21(data)
{
	if(I("show_vms") && !g.loading)
	{
		data.from_timeout=true;		
		show_vms2(data);
	}
}

function show_vms2(data)
{
	if(g.refresh_timeout==-1)
	{
		return;
	}
	
	if(!data.from_timeout)
	{
		stopLoading();
	}
	
	g.maxcpus=data.maxcpus;
	g.maxram = data.maxram;
	
	for(var i=0;i<data.vms.length;++i)
	{
		var vm = data.vms[i];
		
		if(vm.state==0)
		{
			vm.sstate = "offline";
		}
		else if(vm.state==1)
		{
			vm.is_running=true;
			vm.sstate = "running";
		}
		else if(vm.state==2)
			vm.sstate = "blocked";
		else if(vm.state==3)
			vm.sstate = "paused";
		else if(vm.state==4)
			vm.sstate = "shutdown";
		else if(vm.state==5)
			vm.sstate = "shutoff";
		else if(vm.state==6)
			vm.sstate = "crashed";
		else if(vm.state==7)
			vm.sstate = "suspended";
				
		vm.ram = format_size(vm.ram);
	}
	
	var ndata=dustRender("vms", data);
		
	if(g.data_f!=ndata)
	{
		destroy_selectpickers();
		$("#data_f").empty();
		I('data_f').innerHTML=ndata;
		dustPost(I('data_f'));
		g.data_f=ndata;
		
		$('select[id^="vm_action_"]').filter(
				function() {
					setup_selectpicker("#"+$(this).attr("id"));
					//$(this).selectpicker();
					$(this).prop('selectedIndex', -1);
				});
	}
	
	clearTimeout(g.refresh_timeout);
	g.refresh_timeout=setTimeout(show_vms11, 1000);
}

function createNewVm1()
{
	if(!startLoading()) return;
	new getJSONMultiple("backups", "", createNewVm2, show_backups_aggregate);
}

function createNewVm2(data)
{	
	stopLoading();

	g.create_vm_name_changed=false;
	data.maxram = g.maxram[g.self_appid];
	data.maxcpus = g.maxcpus[g.self_appid];
	g.disks = {};
	
	if(data.maxcpus==1)
	{
		data.cpus_disabled=true;
	}
	g.clients = data.clients;
	data.volumes = [{select_client: true, clients: data.clients}];
	data.num=1;
	data.partnum=1;
	data.backup_select_disabled=true;
	
	data.create_vm_disk = dustRender("create_vm_disk", data);
	
	var ndata=dustRender("create_vm", data);
	
	if(g.data_f!=ndata)
	{
		I('data_f').innerHTML=ndata;
		dustPost(I('data_f'));
		dustPost(I('data_f'), "create_vm_disk");
		g.data_f=ndata;
	}
}

function changeMaxCpusRam(appid)
{
	if(I("cpus"))
		I("cpus").max = g.maxcpus[appid];
	if(I("ram"))
		I("ram").max = g.maxram[appid];

	if(g.maxcpus[appid]>1 && I("cpus"))
	{
		I("cpus").disabled=false;
	}
}

function createVmChangeClient(disknum)
{
	var clientid = revMapClientId(I("client"+disknum).value);
	if(clientid.id==0)
	{
		var idx=1;
		while(I("backup"+disknum+"-"+idx))
		{
			I("backup"+disknum+"-"+idx).disabled="disabled";
			++idx;
		}
		return;
	}
	if(!startLoading()) return;
	var clientname = "";
	if(I("client"+disknum).selectedIndex!=-1)
	{
		clientname = I("client"+disknum).options[I("client"+disknum).selectedIndex].text;
	}
	
	if(!g.disks[disknum])
	{
		g.disks[disknum] = { "clientid": parseInt(I("client"+disknum).value), "clientname": clientname };
	}
	else
	{
		g.disks[disknum]["clientid"] = parseInt(I("client"+disknum).value);
		g.disks[disknum]["clientname"] = clientname;
	}
	g.curr_disknum = disknum;
	changeMaxCpusRam(clientid.appid);
	g.vm_selected_appid = clientid.appid;
	new getJSONSingleApp("backups", "sa=backups&clientid="+clientid.id, createVmChangeClient2, clientid.appid);
}

function createVmChangeClient2(data)
{
	stopLoading();
	
	var disknum = g.curr_disknum;
	
	g.disks[disknum]["all_volumes"] = data.backup_images;
	g.disks[disknum]["volumes"] = [];
	
	renderDisk(disknum);
	createVmChangeVolume(disknum, 1);
}

function updateCpus()
{
	I("cpus_curr").innerHTML = I("cpus").value;
}

function updateRam()
{
	I("ram_curr").innerHTML = format_size(I("ram").value);
}

function createVmChangeVolume(disknum, partnum)
{
	var backupid = parseInt(I("backup"+disknum+"-"+partnum).value);
	
	if(backupid==0)
		return;

	if(!startLoading()) return;
	g.curr_disknum = disknum;
	g.curr_partnum = partnum;
	g.curr_backupid = backupid;
	g.disks[disknum]["backupid"]=backupid
	new getJSONSingleApp("vms", "sa=partinfo&backupid="+backupid, createVmChangeVolume2, g.vm_selected_appid);
}

function renderDisk(disknum)
{
	var data = {num: disknum};
	var diskdata = g.disks[disknum];
	
	if(!diskdata.volumes
		|| diskdata.volumes.length==0
		|| diskdata.disk_image)
	{
		var backups = [];
		for(var i=0;i<diskdata.all_volumes.length;++i)
		{
			if(diskdata.all_volumes[i].letter!="SYSVOL"
				&& diskdata.all_volumes[i].letter!="ESP")
			{
				var vol = diskdata.all_volumes[i];
				vol.backuptime_f = format_unix_timestamp(vol.backuptime);
				
				if(diskdata.disk_image
					&& vol.id==diskdata.backupid)
				{
					vol = clone(vol);
					vol.selected=true;
					
					if(!g.create_vm_name_changed)
					{
						I("name").value=diskdata.clientname+" - backup "+vol.backuptime_f;
						g.create_vm_name_changed=false;
					}
					
					diskdata.backuptime = vol.backuptime;
				}
				
				backups.push(vol);
			}	
		}
		if(diskdata.disk_image)
		{
			data.disk_image=true;
		}
		data.volumes = [{ backups: backups, partnum: 1}];
	}
	else
	{
		data.volumes = [];
		for(var i=0;i<diskdata.volumes.length;++i)
		{
			var vol = diskdata.volumes[i];
			
			var backup_select_disabled=false;
			var backups = [];
			if(vol.assoc_part)
			{
				for(var j=0;j<diskdata.all_volumes.length;++j)
				{
					if(diskdata.all_volumes[j].id==vol.assoc_id)
					{
						var backup = diskdata.all_volumes[j];
						backup.backuptime_f = format_unix_timestamp(backup.backuptime);
						backups.push(backup);
					}
				}
				backup_select_disabled=true;
			}
			else
			{
				var backups = [];
				for(var j=0;j<diskdata.all_volumes.length;++j)
				{
					if(diskdata.all_volumes[j].letter!="SYSVOL"
						&& diskdata.all_volumes[j].letter!="ESP"
						&& (!diskdata.all_volumes[j].partnum
							|| (diskdata.all_volumes[j].partnum==vol.partnum
								&& (!vol.disknum || diskdata.all_volumes[j].disknum==vol.disknum) ) ) )
					{
						var backup = diskdata.all_volumes[j];
						backup.backuptime_f = format_unix_timestamp(backup.backuptime);
						if(backup.id==g.curr_backupid)
						{
							backup = clone(backup);
							backup.selected=true;
							
							if(!g.create_vm_name_changed)
							{
								I("name").value=diskdata.clientname+" - backup "+backup.backuptime_f;
								g.create_vm_name_changed=false;
							}
						}
						backups.push(backup);
					}	
				}
			}
			
			data.volumes.push({backups: backups, partnum: vol.num+1, backup_select_disabled: backup_select_disabled});
		}
	}
	
	var clients = [];
	for(var j=0;j<g.clients.length;++j)
	{
		var client = g.clients[j];
		if(diskdata.clientid 
			&& client.id == diskdata.clientid)
		{
			client = clone(client)
			client.selected=true;
		}
		clients.push(client);
	}
	data.clients = clients;
	
	I("disk"+disknum).innerHTML = dustRender("create_vm_disk", data);
	dustPost(I("disk"+disknum));
}

function createVmChangeVolume2(data)
{
	var diskdata = g.disks[g.curr_disknum];
	
	diskdata.volumes = [];
	for(var i=0;i<data.partitions.length;++i)
	{
		var obj = data.partitions[i];		
		if(obj.curr_part)
		{
			obj.backupid = g.curr_backupid ;
		}
		else if(obj.assoc_id)
		{
			obj.backupid = obj.assoc_id;
		}
		diskdata.volumes.push(obj);
	}
	
	if(data.uefi_boot)
	{
		diskdata.uefi_boot=true;
	}
	
	if(data.disk_image)
	{
		diskdata.disk_image=true;
		diskdata.backupid=g.curr_backupid;
	}
	
	stopLoading();
	renderDisk(g.curr_disknum);
}

function createNewVm3()
{	
	var data = {};
	
	var disknum=1;
	var has_disks=false;
	var disks = [];
	var uefi_boot=0;
	while(g.disks[disknum])
	{
		var diskdata = g.disks[disknum];
		
		if(!diskdata.disk_image
			&& diskdata.volumes
			&& diskdata.volumes.length>0)
		{
			has_disks=true;
			
			var backuptime = 0;
			var disk_backupid = 0;
			var volumes = [];
			for(var i=0;i<diskdata.volumes.length;++i)
			{
				var vol = clone(diskdata.volumes[i]);
				if(vol.backuptime)
				{
					backuptime = vol.backuptime;
				}
				if(!vol.backupid)
				{
					var sel = I("backup"+disknum+"-"+(i+1));
					if(sel)
					{
						if(sel.value!=0)
						{
							vol.backupid=parseInt(sel.value);
						}
					}
				}
				if(disk_backupid==0
					&& vol.backupid
					&& !vol.assoc_part)
				{
					disk_backupid = vol.backupid;
				}
				if(vol.backupid
					&& vol.backupid!=0)
				{
					volumes.push(vol);
				}
			}
			
			disks.push({"volumes": volumes, "clientid": diskdata.clientid, "backuptime": backuptime, "backupid": disk_backupid});
		}
		else if(diskdata.disk_image)
		{
			disks.push({"clientid": diskdata.clientid, "backuptime": diskdata.backuptime, "backupid": diskdata.backupid});
			has_disks=true;
		}
		
		if(diskdata.uefi_boot)
		{
			uefi_boot=1;
		}
		
		++disknum;
	}
	
	if(!has_disks)
	{
		alert("Please select VM disks");
		return;
	}
	
	data.disks=disks;
	data.name=I("name").value;
	data.vcpus = parseInt(I("cpus").value);
	data.ram = parseInt(I("ram").value);
	data.network = parseInt(I("network").value);
	data.autostart = 2;
	data.uefi_boot=uefi_boot;
	var appid="";
	var appurl="";
	if(g.vm_selected_appid!=g.self_appid)
	{
		appid = g.vm_selected_appid;
		for(var i=0;i<g.remote_apps.length;++i)
		{
			if(g.remote_apps[i].id == appid)
				appurl = g.remote_Apps[i].url;
		}
	}

	var fixed_appurl = appurl;
	if(fixed_appurl!="")
	{
		fixed_appurl = fixupRemoteUrlWithSlash(fixed_appurl);
		if(fixed_appurl==null)
			fixed_appurl="";
	}
	
	var win = window.open('', '_blank', '');
	var create_vm_page = dustRender("create_vm_status", {session: g.session,
												jquery_js: I("jquery_js").src,
												dust_js: I("dust_js").src,
												templates_js: I("templates_js").src,
												urbackup_functions_js: I("urbackup_functions_js").src,
												urbackup_js: I("urbackup_js").src,
												bootstrap_js: I("bootstrap_js").src,
												bootstrap_css: I("bootstrap_css").href,
												bootstrap_theme_css: I("bootstrap_theme_css").href,
												create_vm_js: I("create_vm_js").src,
												template_post_js: I("template_post_js").src,
												template_post_css: I("template_post_css").src,
												urbackup_extra_css: I("urbackup_extra_css").src,
												create_data: encodeURIComponent(JSON.stringify(data)),
												appid:appid,
												appurl: fixed_appurl
											});
	win.document.write(create_vm_page);
	win.document.close();
	win.focus();
	
	show_vms1();
}

function createNewVm4()
{
	if(g.remote_id.length>0)
	{
		new getJSON("remote", "ra_f7f7aa43a9a04633a6d4fd34bc8a20b9=vms&sa=create&remote_id_f7f7aa43a9a04633a6d4fd34bc8a20b9="+g.remote_id+"&data="+g.create_data, createNewVm5);
	}
	else
	{
		new getJSON("vms", "sa=create&data="+g.create_data, createNewVm5);	
	}
}

function createNewVm5(data)
{
	if(!data.ok)
	{
		alert("Error creating VM");
		return;
	}
	
	g.create_vm_id = data.id;
	
	setTimeout(refreshCreateVmStatus, 500);
}

function refreshCreateVmStatus()
{
	if(g.remote_id.length>0)
	{
		new getJSON("remote", "ra_f7f7aa43a9a04633a6d4fd34bc8a20b9=vms&sa=create_status&remote_id_f7f7aa43a9a04633a6d4fd34bc8a20b9="+g.remote_id+"&cid="+g.create_vm_id, refreshCreateVmStatus2);
	}
	else
	{
		new getJSON("vms", "sa=create_status&cid="+g.create_vm_id, refreshCreateVmStatus2);
	}
}
function refreshCreateVmStatus2(data)
{
	if(!data.ok)
	{
		alert("Error getting create vm status");
		return;
	}
	
	if(data.has_error)
	{
		I("create_vm_status").innerHTML=data.err.replace(/\n/g, "<br>");
	}
	else if(data.status)
	{
		I("create_vm_status").innerHTML=data.status;
	}
	
	if(data.loglines)
	{
		var lines = data.loglines.split("\n");
		for(var i=0;i<lines.length;++i)
		{
			if(lines[i].length>0
				&& lines[i].indexOf("-")!=-1)
			{
				var s = lines[i].indexOf("-");
				I("create_vm_log").innerHTML += format_unix_timestamp(parseInt(lines[i].substr(0, s)))+ ": "+lines[i].substr(s+1)+"<br>";
			}			
		}
	}
	
	if(data.has_error)
	{
		return;
	}
	
	if(data.done)
	{
		if(g.remote_url.length>0)
		{
			document.cookie="GUAC_AUTH=; path="+g.remote_url+data.guac_uid+"/";
			location.href=g.remote_url+data.guac_uid+"/#?username="+data.username+"&password="+data.key;
		}
		else
		{
			document.cookie="GUAC_AUTH=; path="+getLocationCurrentPath()+data.guac_uid+"/";
			location.href=g.remote_url+data.guac_uid+"/#?username="+data.username+"&password="+data.key;
		}
		return;
	}
	
	setTimeout(refreshCreateVmStatus, 500);
}

function createVmNameChanged()
{
	g.create_vm_name_changed=true;
}

function vmAction(action, t_vmid, vmname)
{
	var vmid = revMapRemoteId(t_vmid, g.remote_vm_map);
	if(action=="start")
	{
		if(!startLoading()) return;
		new getJSONSingleApp("vms", "sa=start&vmid="+vmid.id, startVm2, vmid.appid);
	}
	else if(action=="stop")
	{
		if(!startLoading()) return;
		new getJSONSingleApp("vms", "sa=stop&vmid="+vmid.id, stopVm2, vmid.appid);
	}
	else if(action=="remove")
	{
		if(confirm("Do you really want to remove the VM \""+vmname+"\"?"))
		{
			if(!startLoading()) return;
			new getJSONSingleApp("vms", "sa=remove&vmid="+vmid.id, removeVm2, vmid.appid);
		}
	}
	else if(action=="remote")
	{
		remoteVm1(t_vmid);
	}
}

function startVm2(data)
{
	stopLoading();
	if(!data.ok)
	{
		alert("Error starting VM");
		return;
	}
	else if(data.error)
	{
		alert("Error starting VM: "+data.err);
		return;
	}
	
	show_vms1();
}

function stopVm2(data)
{
	stopLoading();
	if(!data.ok)
	{
		alert("Error stopping VM -1");
		return;
	}
	else if(data.err)
	{
		alert("Error stopping VM");
		return;
	}
	
	show_vms1();
}

function removeVm2(data)
{
	stopLoading();
	if(!data.ok)
	{
		alert("Error removing VM -1");
		return;
	}
	
	show_vms1();
}

function remoteVm1(t_vmid)
{
	var vmid = revMapRemoteId(t_vmid, g.remote_vm_map);
	var win = window.open('', '_blank', '');
	var appid = "";
	var appurl = "";
	if(vmid.appid!=g.self_appid)
	{
		appid = vmid.appid;
		for(var i=0;i<g.remote_apps.length;++i)
		{
			if(g.remote_apps[i].id == appid)
				appurl = g.remote_Apps[i].url;
		}
	}
	var appurl_fixed = fixupRemoteUrlWithSlash(appurl);
	if(appurl_fixed==null)
		appurl_fixed="";

	var create_vm_page = dustRender("remote_vm", {session: g.session,
												jquery_js: I("jquery_js").src,
												dust_js: I("dust_js").src,
												templates_js: I("templates_js").src,
												urbackup_functions_js: I("urbackup_functions_js").src,
												urbackup_js: I("urbackup_js").src,
												bootstrap_js: I("bootstrap_js").src,
												bootstrap_css: I("bootstrap_css").href,
												bootstrap_theme_css: I("bootstrap_theme_css").href,
												remote_vm_js: I("remote_vm_js").src,
												template_post_js: I("template_post_js").src,
												template_post_css: I("template_post_css").src,
												urbackup_extra_css: I("urbackup_extra_css").src,
												jquery_validate_js: I("jquery_validate_js").src,
												vmid: vmid.id,
												appid: appid,
												appurl: appurl_fixed});
	win.document.write(create_vm_page);
	win.document.close();
	win.focus();
}

function remoteVm2(vmid, appid)
{
	if(appid.length>0)
	{
		new getJSON("remote", "ra_f7f7aa43a9a04633a6d4fd34bc8a20b9=vms&sa=remote&remote_id_f7f7aa43a9a04633a6d4fd34bc8a20b9="+appid+"&vmid="+vmid, remoteVm3);
	}
	else
	{
		new getJSON("vms", "sa=remote&vmid="+vmid, remoteVm3);
	}
}

function remoteVm3(data)
{
	if(!data.ok)
	{
		alert("Error connecting to VM");
		return;
	}

	if(g.remote_url.length>0)
	{

	}
	else
	{
		document.cookie="GUAC_AUTH=; path="+g.remote_url+data.guac_uid+"/";
		location.href=g.remote_url+data.guac_uid+"/#?username="+data.username+"&password="+data.key;
	}
}

function stopAutomaticRebuild(appid)
{
	if(!startLoading()) return;
	new getJSONSingleApp("admin", "url=stop_automatic_rebuild", stopAutomaticRebuild2, appid);
}

function stopAutomaticRebuild2(data)
{
	stopLoading();
	
	if(!data.ok)
	{
		alert("Error stopping automatic rebuild");
		return;
	}
	
	show_status1();
}

function stopAutomaticScrub(appid)
{
	if(!startLoading()) return;
	new getJSONSingleApp("admin", "url=stop_automatic_scrub", stopAutomaticScrub2, appid);
}

function stopAutomaticScrub2(data)
{
	stopLoading();
	
	if(!data.ok)
	{
		alert("Error stopping automatic scrub");
		return;
	}
	
	show_status1();
}

function startBtrfsTests()
{
	if(!startLoading()) return;
	new getJSONSingleApp("admin", "url=start_btrfs_test", startBtrfsTests2, g.settings_selected_app);
}

function startBtrfsTests2(data)
{
	stopLoading();
	show_live_log_params(-10, "Btrfs test");
}

function advancedDiskSettings(duuid)
{
	if(!startLoading(false)) return;
	new getJSONSingleApp("admin", "url=disk_settings%2F"+duuid, advancedDiskSettings2, g.settings_selected_app);
}

function advancedDiskSettings2(data)
{
	stopLoading();
	if(!data.ok)
	{
		alert("Error getting disk settings");
		return;
	}
	
	data.name=unescapeHTML(data.name);
	data.failure_prob*=100;

	data.remote_disk = data.usage=="remote_raid";
	
	var ndata=dustRender("advanced_disk_settings", data);
		
	if(g.data_f!=ndata)
	{
		I('data_f').innerHTML=ndata;
		dustPost(I("data_f"));
		g.data_f=ndata;
	}
}

function saveAdvancedDiskSettings(duuid)
{
	if(!startLoading()) return;
	
	data = {
		"duuid": duuid,
		"failure_prob": I("failure_prob").value/100,
		"ure_rate": I("ure_rate").value,
		"notes": I("notes")
	}

	if(I("remote_addr"))
	{
		data["remote_addr"] = I("remote_addr").value;
	}
	
	new getJSONSingleApp("admin", "url=save_disk_settings%2F"+encode2(JSON.stringify(data)), saveAdvancedDiskSettings2, g.settings_selected_app);
}

function saveAdvancedDiskSettings2(data)
{
	stopLoading();
	if(!data.ok)
	{
		alert("Error saving disk settings");
		return;
	}
	storageSettings();
}

function addRemoteDisk1(only_scsi)
{
	var ndata=dustRender("storage_add_remote_disk", 
			{iscsi_initiator_name: g.iscsi_initiator_name,
				only_scsi: only_scsi});
		
	if(g.data_f!=ndata)
	{
		I('data_f').innerHTML=ndata;
		dustPost(I("data_f"));
		g.data_f=ndata;
	}
}

function addRemoteDisk2()
{
	if(I("remote_app_raid") &&
		I("remote_app_raid").checked)
	{
		if(!startLoading()) return;
		g.remote_add_disk_hostname = I("remote_app_raid_hostname").value;
		new getJSONSingleApp("admin", "url=list_remote_disks%2F"+encode2(I("remote_app_raid_hostname").value), addRemoteDisk2Cb, g.settings_selected_app);
	}
	else if(I("cifs") &&
		I("cifs").checked)
	{
		addDiskCifs();
	}
	else
	{
		//iSCSI
		if(!startLoading()) return;
		g.remote_add_iscsi_settings = {
			"hostname": I("iscsi_target_name").value,
			"iscsi_discovery_username": I("iscsi_discovery_username").value,
			"iscsi_discovery_password": I("iscsi_discovery_password").value
		}
		new getJSONSingleApp("admin", "url=discover_iscsi%2F"+encode2(JSON.stringify(g.remote_add_iscsi_settings)), addRemoteDisk2IscsiCb, g.settings_selected_app);
	}
}
function addDiskCifs()
{
	if(!startLoading()) return;

	var data = {"type": "cifs",
				"hostname": I("cifs_hostname").value,
				"share": I("cifs_share").value,
				"username": I("cifs_username").value,
				"password": I("cifs_password").value }

	new getJSONSingleApp("admin", "url=add_cifs%2F"+encode2(JSON.stringify(data)), addDiskCifsCb, g.settings_selected_app);
}

function addDiskCifsCb(data)
{
	stopLoading();
	if(!data.ok)
	{
		alert("Error adding CIFS share");
		return;
	}

	if(data.err)
	{
		alert("Error adding CIFS share: "+data.err)
	}

	storageSettings();
}

function addRemoteDisk2Cb(data)
{
	stopLoading();
	if(!data.ok)
	{
		alert("Error listing remote disks. Please make sure RAID disk sharing is enabled, the appliance is rebooted afterwards and tcp port 3541 is reachable from this appliance");
		return;
	}

	g.remote_add_disks = {};

	for(var i=0;i<data.disks.length;++i)
	{
		g.remote_add_disks[data.disks[i].uuid] = data.disks[i];
		data.disks[i].size = format_size(data.disks[i].device_size);
		data.disks[i].free_space_str = format_size(data.disks[i].free_space);
		data.disks[i].failure_prob_pc = data.disks[i].failure_prob*100;
	}

	data.has_disks = data.disks.length>0;

	var ndata=dustRender("storage_add_remote_disk2", data);
		
	if(g.data_f!=ndata)
	{
		I('data_f').innerHTML=ndata;
		dustPost(I("data_f"));
		g.data_f=ndata;
	}
}

function addRemoteDisk2IscsiCb(data)
{
	stopLoading();
	if(!data.ok)
	{
		alert("Error listing iSCSI targets.\n"+data.err);
		return;
	}

	g.remote_iscsi_targets = {};

	var new_targets = [];
	for(var i=0;i<data.targets.length;++i)
	{
		var f=false;
		for(var j=0;j<g.iscsi_targets.length;++j)
		{
			if(g.iscsi_targets[j].hostname == data.targets[i].hostname
					&& g.iscsi_targets[j].name == data.targets[i].name)
				{
					f=true;
					break;
				}
		}

		if(!f)
		{
			new_targets.push(data.targets[i]);
		}
	}

	data.targets = new_targets;

	for(var i=0;i<data.targets.length;++i)
	{
		g.remote_iscsi_targets[data.targets[i].name] = data.targets[i];
	}

	data.has_disks = data.targets.length>0;

	var ndata=dustRender("storage_add_remote_disk2_iscsi", data);
		
	if(g.data_f!=ndata)
	{
		I('data_f').innerHTML=ndata;
		dustPost(I("data_f"));
		g.data_f=ndata;
	}
}

function selectAddDisksToggle()
{
	var cbs=document.getElementsByName("add_disk");
	for(var i=0;i<cbs.length;++i)
	{
		cbs[i].checked=I("select_add_disks_toggle").checked;
	}   
}

function selectAddDisksToggle2()
{
	var tg = I("auto_add_new").checked;
	I("select_add_disks_toggle").checked = tg;
	selectAddDisksToggle();
	var cbs=document.getElementsByName("add_disk");
	for(var i=0;i<cbs.length;++i)
	{
		cbs[i].disabled=tg;
	}   
	I("select_add_disks_toggle").disabled = tg;
}

function addRemoteDisk3()
{
	if(!startLoading()) return;

	var data = {"auto_add_new": I("auto_add_new").checked,
							"remote_addr": g.remote_add_disk_hostname,
							"disks": []};

	var cbs=document.getElementsByName("add_disk");
	for(var i=0;i<cbs.length;++i)
	{
		if(cbs[i].checked)
		{
			data["disks"].push(g.remote_add_disks[cbs[i].value]);
		}
	}

	new getJSONSingleApp("admin", "url=add_remote_disks%2F"+encode2(JSON.stringify(data)), addRemoteDisk3Cb, g.settings_selected_app);
}

function addRemoteDisk3Iscsi()
{
	if(!startLoading()) return;

	var data = {"iscsi_session_username": I("iscsi_session_username").value,
							"iscsi_session_password": I("iscsi_session_password").value,
							"targets": [] }

	var cbs=document.getElementsByName("add_disk");
	for(var i=0;i<cbs.length;++i)
	{
		if(cbs[i].checked)
		{
			data["targets"].push(g.remote_iscsi_targets[cbs[i].value]);
		}
	}

	new getJSONSingleApp("admin", "url=add_iscsi_targets%2F"+encode2(JSON.stringify(data)), addRemoteDisk3IscsiCb, g.settings_selected_app);
}

function addRemoteDisk3Cb(data)
{
	stopLoading();
	if(!data.ok)
	{
		alert("Error adding remote disks");
		return;
	}

	storageSettings();
}

function removeDisk(duuid)
{
	if(confirm("Do you really want to remove this disk?"))
	{
		if(!startLoading()) return;
		new getJSONSingleApp("admin", "url=remove_disk%2F"+encode2(duuid), removeDiskCb, g.settings_selected_app);
	}
}

function removeDiskCb(data)
{
	stopLoading();

	if(!data.ok)
	{
		alert("Error removing disk");
	}
	else if(data.reboot)
	{
		alert("Rebooting appliance now to finish removing the disk.");
		restartWait();
	}
}

function resetDisk(duuid)
{
	if(confirm("Do you really want to reset the cache?"))
	{
		if(!startLoading()) return;
		new getJSONSingleApp("admin", "url=reset_disk%2F"+encode2(duuid), resetDiskCb, g.settings_selected_app);
	}
}

function resetDiskCb(data)
{
	stopLoading();

	if(!data.ok)
	{
		alert("Error resetting disk");
	}

	if(data.reboot)
	{
		alert("Rebooting appliance now.");
		restartWait();
	}
}

function resetDisk(duuid)
{
	if(confirm("Do you really want to reset the cache?"))
	{
		if(!startLoading()) return;
		new getJSONSingleApp("admin", "url=reset_disk%2F"+encode2(duuid), resetDiskCb, g.settings_selected_app);
	}
}

function resetDiskCb(data)
{
	stopLoading();

	if(!data.ok)
	{
		alert("Error resetting disk");
	}

	if(data.reboot)
	{
		alert("Rebooting appliance now.");
	}
}

function addRemoteDisk3IscsiCb(data)
{
	stopLoading();
	if(!data.ok)
	{
		alert("Error adding iSCSI target(s).\n"+data.err);
		return;
	}

	alert("iSCSI target(s) added successfully.");

	storageSettings();
}

function replaceDisk(duuid)
{
	g.replace_disk_uuid = duuid;
	var disk;
	for(var i=0;i<g.curr_devices.length;++i)
	{
		if(g.curr_devices[i].complete_uuid==duuid)
			disk=g.curr_devices[i];
	}

	if(typeof disk=="undefined" || disk==null)
	{
		alert("Disk not found");
	}

	var usable_new_disks = [];
	for(var i=0;i<g.new_devices.length;++i)
	{
		if(g.new_devices[i].orig_size>=disk.orig_size)
		{
			usable_new_disks.push(g.new_devices[i]);
		}
	}

	if(usable_new_disks.length==0)
	{
		alert("Found no currently attached, unused disk that has at least size "+disk.size);
		return;
	}

	var ndata=dustRender("storage_replace_disk", {"disks": usable_new_disks});
		
	if(g.data_f!=ndata)
	{
		I('data_f').innerHTML=ndata;
		dustPost(I("data_f"));
		g.data_f=ndata;
	}
}

function replaceDisk2()
{
	var disk_fn = $('input[name="replace_disk"]:checked').val();
	if(typeof disk_fn=="undefined" || disk_fn.length==0)
	{
		alert("No disk selected");
		return;
	}

	if(confirm("Do you really want to replace this disk?"))
	{
		if(!startLoading()) return;
		new getJSONSingleApp("admin", "url=replace_device%2F"+encode2(g.replace_disk_uuid)+"%2F"+encode2(disk_fn), replaceDisk2Cb, g.settings_selected_app);
	}
}

function replaceDisk2Cb(data)
{
	stopLoading();

	if(!data.ok)
	{
		alert("Starting disk replace operation failed. "+data.err);
	}
	else
	{
		alert("Disk replace operation started successfully.");
	}

	storageSettings();
}

function startScrubRaid()
{
	if(!startLoading()) return;
	new getJSONSingleApp("admin", "url=start_raid_scrub", startScrubRaidCb, g.settings_selected_app);
}

function startScrubRaidCb(data)
{
	stopLoading();
	if(data.ok)
	{
		alert("RAID scrub started");
	}
	else
	{
		alert("Starting RAID scrub failed");
	}
}

function resetRAIDErrorCounter()
{
	if(!startLoading()) return;
	if(confirm("Are you sure you want to reset the RAID error counter of all disks?"))
	{
		new getJSONSingleApp("admin", "url=reset_raid_disk_errors", resetRAIDErrorCounterCb, g.settings_selected_app);
	}
	else
	{
		stopLoading();
	}
}

function resetRAIDErrorCounterCb(data)
{
	stopLoading();
	if(data.ok)
	{
		alert("RAID disk error counter reset successfully");
	}
	else
	{
		alert("Resetting RAID disk error counter failed");
	}
}

function saveCbtKey()
{
	var cbt_key = I("client_cbt_key").value.replace("https://cbt.urbackup.com/","").replace("/", "").trim();

	var branch = I("client_cbt_branch").value;

	if(branch=="default-cbt" || branch=="2.3.x" || branch=="2.4.x")
	{
		if(cbt_key.length==0)
		{
			alert("Please enter a CBT key.")
			I("client_cbt_key").focus();
			return;
		}
	}

	if(cbt_key.length==0)
		cbt_key="none";

	if(!startLoading()) return;
	new getJSONSingleApp("admin", "url=set_cbt_key%2F"+encode2(cbt_key)+"%2F"+encode2(branch), saveCbtKeyCb, g.settings_selected_app);
}

function saveCbtKeyCb(data)
{
	stopLoading();
	if(!data.ok)
	{
		alert("Error saving client update settings: "+data.err);
	}
	else
	{
		I("client_cbt_key_save_feedback").innerHTML="Saved client update settings.";
	}
}

function changeTheme()
{
	if(!startLoading()) return;
	var theme = I("app_theme").value;
	new getJSONSingleApp("admin", "url=set_app_theme%2F"+encode2(theme), changeThemeCb, g.settings_selected_app);
}

function changeThemeCb(data)
{
	stopLoading();
	if(!data.ok)
	{
		alert("Error changing theme: "+data.err);
	}
	else
	{
		I("theme_save_feedback").innerHTML="Theme changed successfully. Please refresh browser with CTRL+ALT+R for changes to come into effect.";
	}
}

function compareSelectA(elem)
{
	$(elem).prop("checked", true);
	var backupid = $(elem).val();
	var dis=false;

	
	$("#file_backups_table").find("tr").each(function(idx, elem) {
		if($(elem).data("id")==backupid)
			dis=true;

		$(elem).find("input[name='compare_sel_b']").prop("disabled", dis);
	});
}

function compareSelectB(elem)
{
	$(elem).prop("checked", true);
	var backupid = $(elem).val();
	var dis=false;

	$($("#file_backups_table").find("tr").get().reverse()).each(function(idx, elem) {
		if($(elem).data("id")==backupid)
			dis=true;

		$(elem).find("input[name='compare_sel_a']").prop("disabled", dis);
	});
}

function compareBackups()
{
	if(!I("file_backups_table"))
		return;

	var sel_a = $('input[name=compare_sel_a]:checked', '#file_backups_table');
	var sel_b = $('input[name=compare_sel_b]:checked', '#file_backups_table');

	if(sel_a.length>0
		&& sel_b.length>0)
	{
		if(!startLoading()) return;
		new getJSONSingleApp("backups", "sa=compare&clientid="+sel_a.data("clientid")+"&backupid_a="+sel_a.val()+"&backupid_b="+sel_b.val(), compareBackups1, g.curr_browse_appid);	
		return;
	}


	$("#file_backups_table").find("tr").each(function(idx, elem) {
		if(typeof $(elem).data("id")!="undefined")
			elem.lastChild.innerHTML = '<input type="radio" name="compare_sel_a" data-clientid="'+$(elem).data('clientid')+'" value="'+$(elem).data("id")+'">'
								   + '&nbsp;<input type="radio" name="compare_sel_b" value="'+$(elem).data("id")+'">';
		else
			elem.lastChild.innerHTML = "Compare";

	});

	$("#file_backups_table").find("input[name='compare_sel_a']").on("click", function(evt){
		compareSelectA(this);
	});

	$("#file_backups_table").find("input[name='compare_sel_b']").on("click", function(evt){
		compareSelectB(this);
	});

	var first_a = $("#file_backups_table").find("input[name='compare_sel_a']").last();
	var last_b = $("#file_backups_table").find("input[name='compare_sel_b']").first();
	compareSelectA(first_a);
	compareSelectB(last_b);

	I("compare_button").innerHTML="Compare file backups";
}

function compareBackupToLast(clientid, backupid)
{
	if(!startLoading()) return;
	new getJSONSingleApp("backups", "sa=compare&clientid="+clientid+"&backupid_a=0&backupid_b="+backupid, compareBackups1, g.curr_browse_appid);	
}

function compareBackups1(data)
{
	stopLoading();

	if(!data.ok)
	{
		alert("Error starting file backup comparison");
		return;
	}

	var ndata=dustRender("compare_progress");
	if(g.data_f!=ndata)
	{
		I('data_f').innerHTML=ndata;
		dustPost(I("data_f"));
		g.data_f=ndata;
	}

	setTimeout(compareBackups1Refresh, 1000);
}

function compareBackups1Refresh()
{
	if(!startLoading()) return;
	new getJSONSingleApp("backups", "sa=compare_finished", compareBackups1Refresh2, g.curr_browse_appid);
}

function compareBackups1Refresh2(data)
{
	stopLoading();

	if(!data.ok)
	{
		alert("Error checking for compare progress");
		return;
	}
	else if(data.err)
	{
		alert("Comparison failed.");
		return;
	}
	
	if(data.working)
	{
		setTimeout(compareBackups1Refresh, 1000);
	}
	else
	{
		var ndata=dustRender("compare_result", data);
		I('data_f').innerHTML=ndata;
		dustPost(I("data_f"));
		g.data_f=ndata;

		var datatable_config = jQuery.extend(true, {}, g.datatable_default_config);
		datatable_config["ajax"] = function (data, callback, settings)
		{
			startLoading();
			var cb = new compareBackups2(callback);
			new getJSONSingleApp("backups", "sa=compare_get&params="+encodeURIComponent(JSON.stringify(data)), cb.func, g.curr_browse_appid);
		};
		datatable_config["serverSide"] = true;
		datatable_config.aaSorting = [[ 1, "asc" ]];
		datatable_config["columnDefs"] = [
			{
				"targets": 0,
				"render": function ( data, type, row, meta ) {
					if(type === 'display')
					{
						if(data==0)
							return '<span class="glyphicon glyphicon-transfer" aria-hidden="true"></span>';
						else if(data==1)
							return '<span class="glyphicon glyphicon-minus" aria-hidden="true"></span>';
						else if(data==2)
							return '<span class="glyphicon glyphicon-plus" aria-hidden="true"></span>';
					}
					return data;
				}
			}];
		datatable_config["bStateSave"] = false;
		$("#diff_table").dataTable(datatable_config);		
	}
}

function compareBackups2(callback)
{
	var cb = callback;
	this.func = function(data)
	{
		stopLoading();
		if(!data.changes)
		{
			alert("Error getting changes");
			return;
		}

		var ret = { display: 1, draw: data.draw, recordsTotal: data.recordsTotal,
			recordsFiltered: data.recordsFiltered, data : [] };

		var total_clen=0;
		var total_size=0;

		for(var i=0;i<data.changes.length;++i)
		{
			var c = data.changes[i];

			if(c.path)
			{
				if(c.cflags & 16)
				{
					c.cflags&=~1;
					if(!c.size)
						c.size=c.clen;				

					c.clen=-1;
				}

				var size_str;
				if(c.size)
				{
					size_str = format_size(c.size);
					total_size += c.size;
				}
				else
				{
					size_str = "-";
				}
				var mod = 0;

				var c_str = "";
				if(c.cflags & 1)
				{
					c_str+="modified";
				}
				if(c.cflags & 2)
				{
					if(c_str.length>0)
						c_str+=", ";
					c_str+="resized";
				}
				if(c.cflags & 4)
				{
					if(c_str.length>0)
						c_str+=", ";
					c_str+="directory removed";
					c.clen=-1;
					mod=1;
				}
				if(c.cflags & 8)
				{
					if(c_str.length>0)
						c_str+=", ";
					c_str+="file removed";
					c.clen=-1;
					mod=1;
				}
				if(c.cflags & 16)
				{
					if(c_str.length>0)
						c_str+=", ";
					c_str+="file created";
					mod=2;
				}
				if(c.cflags & 32)
				{
					if(c_str.length>0)
						c_str+=", ";
					c_str+="directory created";
					c.clen=-1;
					mod=2;
				}

				var clen_str="";
				if(c.clen>=0)
				{
					clen_str = format_size(c.clen);
					total_clen+=c.clen;
				}

				ret.data.push([mod, c.path, c_str, clen_str, size_str]);
			}
		}

		cb(ret);
	}
}

function convertToRaidWCloudMirror1()
{
	var ndata=dustRender("convert_raid_confirm");
	if(g.data_f!=ndata)
	{
		I('data_f').innerHTML=ndata;
		dustPost(I("data_f"));
		g.data_f=ndata;
	}

	var valConfig = default_validator_config();
	
	valConfig.rules = 
	{
		confirm_selection: {
			required: true,
			requireYes: true
		}
	};
	
	g.formValidator = $("#form2").validate(valConfig);
}

function convertToRaidWCloudMirror2()
{
	if(g.formValidator.form())
	{
		if(!startLoading()) return;
		new getJSONSingleApp("admin", "url=convert_to_raidcache_w_mirror", convertToRaidWCloudMirror3, g.settings_selected_app);
	}
}

function convertToRaidWCloudMirror3(data)
{
	if(!data.ok)
	{
		stopLoading();
		if(data.err)
			alert("Error starting cloud to RAID conversion");
		else
			alert("Error starting cloud to RAID conversion: "+data.err);

		return;
	}

	var ndata=dustRender("convert_raid_progress");
	if(g.data_f!=ndata)
	{
		I('data_f').innerHTML=ndata;
		dustPost(I("data_f"));
		g.data_f=ndata;
	}

	setTimeout(convertToRaidWCloudMirror4, 1000);
}

function convertToRaidWCloudMirror4()
{
	new getJSONSingleApp("admin", "url=convert_to_raidcache_w_mirror_finished", convertToRaidWCloudMirror5, g.settings_selected_app);
}

function convertToRaidWCloudMirror5(data)
{
	if(!data.ok)
	{
		stopLoading();
		alert("Error querying for convert progress");
		return;
	}
	
	if(data.finished)
	{
		stopLoading();
		alert("Conversion finished. Will reboot now.");
		restartWait();
	}
	else
	{
		setTimeout(convertToRaidWCloudMirror4, 1000);
	}
}

function searchFileBackup(clientid, backupid)
{
	if(!startLoading()) return;
	g.search_query = I("search").value;
	g.search_clientid = clientid;
	new getJSONSingleApp("backups", "sa=search&clientid="+clientid+"&backupid="+backupid+"&query="+encodeURIComponent(I("search").value), searchFileBackup1, g.curr_browse_appid);	
}

function searchFileBackup1(data)
{
	stopLoading();

	if(!data.ok)
	{
		alert("Error starting file backup search");
		return;
	}

	var ndata=dustRender("search_progress");
	if(g.data_f!=ndata)
	{
		I('data_f').innerHTML=ndata;
		dustPost(I("data_f"));
		g.data_f=ndata;
	}

	setTimeout(searchBackups1Refresh, 100);
}

function searchBackups1Refresh()
{
	if(!startLoading()) return;
	new getJSONSingleApp("backups", "sa=search_finished", searchBackups1Refresh2, g.curr_browse_appid);
}

function searchBackups1Refresh2(data)
{
	stopLoading();

	if(!data.ok)
	{
		alert("Error checking for search progress");
		return;
	}
	else if(data.err)
	{
		alert("Search failed.");
		return;
	}
	
	if(data.working)
	{
		setTimeout(searchBackups1Refresh, 1000);
	}
	else
	{
		var ndata=dustRender("search_result", data);
		I('data_f').innerHTML=ndata;
		dustPost(I("data_f"));
		g.data_f=ndata;

		var datatable_config = jQuery.extend(true, {}, g.datatable_default_config);
		datatable_config["ajax"] = function (data, callback, settings)
		{
			startLoading();
			var cb = new searchBackups2(callback);
			new getJSONSingleApp("backups", "sa=search_get&params="+encodeURIComponent(JSON.stringify(data)), cb.func, g.curr_browse_appid);
		};
		datatable_config["serverSide"] = true;
		datatable_config.aaSorting = [[ 1, "asc" ]];
		datatable_config["columnDefs"] = [
			{
				"targets": 0,
				"render": function ( data, type, row, meta ) {
					if(type === 'display')
					{
						if(data==1)
							return '<span class="glyphicon glyphicon-folder-open" aria-hidden="true"></span> ';
						else
							return '&nbsp;';
					}
					return data;
				}
			}];
		datatable_config["search"] = {
			"search": g.search_query
		  };
		datatable_config["bStateSave"] = false;
		datatable_config["oLanguage"]["sInfoFiltered"]="";
		$("#search_res_table").dataTable(datatable_config);	

		$('#search_res_table tbody').on( 'click', 'tr', function () {
			var trid = $(this).attr("id");
			var c = g.search_res[parseInt(trid)];
			if(c.ftype==1)
				tabMouseClickFiles(g.search_clientid, c.backupid, "/"+unescapeHTML(c.path));
			else
				tabMouseClickFilesDL(g.search_clientid, c.backupid,  "/"+unescapeHTML(c.path));
		} );
	}
}

function searchBackups2(callback)
{
	var cb = callback;
	this.func = function(data)
	{
		stopLoading();
		if(!data.res)
		{
			alert("Error getting search results");
			return;
		}

		var ret = { display: 1, draw: data.draw,
			recordsFiltered: data.recordsFiltered, data : [] };

		g.search_res = {};
		if(typeof g.search_res_id=="undefined")
			g.search_res_id=1;

		for(var i=0;i<data.res.length;++i)
		{
			var c = data.res[i];

			if(c.path)
			{
				var csize_str = "-";
				if(c.csize>=0)
				{
					csize_str = format_size(c.csize);
				}

				var a = [c.ftype, c.path, csize_str, format_unix_timestamp(c.backuptime)]
				a.DT_RowId = g.search_res_id;
				g.search_res[g.search_res_id] = c;
				++g.search_res_id;

				ret.data.push(a);
			}
		}

		cb(ret);
	}
}

function startVerifyAll()
{
	if(!startLoading()) return;
	new getJSONSingleApp("backups", "sa=verify_all", startVerifyAllCb, g.settings_selected_app);
}

function startVerifyAllCb(data)
{
	stopLoading();

	if(data.ok)
	{
		alert("Started verify all successfully");
	}
	else
	{
		alert("Failed to start verify all");
	}
}

function changeCbtBranch()
{
	var val = I("client_cbt_branch").value;
	if(val=="2.3.x" || val=="2.4.x" || val=="default-cbt")
	{
		I("cbt_key_container").style.display="inline";
	}
	else
	{
		I("cbt_key_container").style.display="none";
	}
}

function blinkDisk(duuid, activate)
{
	if(!startLoading()) return;
	new getJSONSingleApp("admin", "url=locate_enclosure_device%2F"+encode2(duuid)+"%2F"+activate, blinkDiskCb, g.settings_selected_app);
}

function blinkDiskCb(data)
{
	stopLoading()
	if(!data.ok)
		alert("Error blinking disk");
	else if(!data.found)
		alert("Did not find disk to blink");
	else if(data.locate_err)
		alert("Error enabling enclosure blinking");
	else if(data.start)
		alert("Successfully started enclosure locate (blinking)");
	else
		alert("Successfully stopped enclosure locate (blinking)");
}

function blinkAllDisks(activate)
{
	if(!startLoading()) return;
	new getJSONSingleApp("admin", "url=locate_all_enclosure_device%2F"+activate, blinkAllDisksCb, g.settings_selected_app);
}

function blinkAllDisksCb()
{
	stopLoading()
	if(!data.ok)
		alert("Error starting blinking all disk");
	else if(data.start)
		alert("Successfully started all enclosure locate (blinking)");
	else
		alert("Successfully stopped all enclosure locate (blinking)");
}

function savePromtailClientUrl()
{
	var promtail_client_url = I("promtail_client_url").value.trim();
	if(!startLoading()) return;
	new getJSONSingleApp("admin", "url=set_promtail_client_url%2F"+encode2(promtail_client_url), savePromtailClientUrlCb, g.settings_selected_app);
}

function savePromtailClientUrlCb(data)
{
	stopLoading();
	if(!data.ok)
	{
		alert("Error saving promtail client URL: "+data.err);
	}
	else
	{
		I("promtail_client_url_save_feedback").innerHTML="Saved promtail client URL.";
	}
}

if(!g.has_live_log)
{
	$(window).on("load", startup);
}